// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package di

import (
	"github.com/google/wire"
	"server/application/service"
	"server/application/service/admin"
	"server/infrastructure/aws"
	"server/infrastructure/datasource"
	"server/infrastructure/datasource/admin"
	"server/infrastructure/mailpit"
	"server/infrastructure/minio"
	"server/presentation/controller"
	"server/presentation/controller/admin"
)

// Injectors from wire.go:

func InitializeControllers() (*ControllersSet, func(), error) {
	client, cleanup, err := datasource.ProvideClient()
	if err != nil {
		return nil, nil, err
	}
	boardDatasource := datasource.NewBoardDatasource(client)
	boardApplicationService := service.NewBoardApplicationService(boardDatasource)
	boardController := controller.NewBoardController(boardApplicationService)
	userDatasource := datasource.NewUserDatasource(client)
	threadDatasource := datasource.NewThreadDatasource(client)
	threadCommentDatasource := datasource.NewThreadCommentDatasource(client)
	mailpitClient := mailpit.NewMailpitClient()
	sesClient, err := aws.NewSESClient()
	if err != nil {
		cleanup()
		return nil, nil, err
	}
	userApplicationService := service.NewUserApplicationService(userDatasource, threadDatasource, threadCommentDatasource, mailpitClient, sesClient)
	userController := controller.NewUserController(userApplicationService)
	tagDatasource := datasource.NewTagDatasource(client)
	threadApplicationService := service.NewThreadApplicationService(client, threadDatasource, threadCommentDatasource, tagDatasource)
	threadController := controller.NewThreadController(threadApplicationService)
	threadCommentApplicationService := service.NewThreadCommentApplicationService(threadCommentDatasource)
	threadCommentController := controller.NewThreadCommentController(threadCommentApplicationService)
	tagApplicationService := service.NewTagApplicationService(tagDatasource)
	tagController := controller.NewTagController(tagApplicationService)
	minioClient, err := minio.NewMinioClient()
	if err != nil {
		cleanup()
		return nil, nil, err
	}
	s3Client, err := aws.NewS3Client()
	if err != nil {
		cleanup()
		return nil, nil, err
	}
	storageApplicationService := service.NewStorageApplicationService(minioClient, s3Client)
	storageController := controller.NewStorageController(storageApplicationService)
	datasource_adminUserDatasource := datasource_admin.NewUserDatasource(client)
	service_adminUserApplicationService := service_admin.NewUserApplicationService(datasource_adminUserDatasource)
	controller_adminUserController := controller_admin.NewUserController(service_adminUserApplicationService)
	datasource_adminBoardDatasource := datasource_admin.NewBoardDatasource(client)
	service_adminBoardApplicationService := service_admin.NewBoardApplicationService(datasource_adminBoardDatasource)
	controller_adminBoardController := controller_admin.NewBoardController(service_adminBoardApplicationService)
	datasource_adminThreadDatasource := datasource_admin.NewThreadDatasource(client)
	service_adminThreadApplicationService := service_admin.NewThreadApplicationService(datasource_adminThreadDatasource)
	controller_adminThreadController := controller_admin.NewThreadController(service_adminThreadApplicationService)
	contactDatasource := datasource.NewContactDatasource(client)
	contactApplicationService := service.NewContactApplicationService(contactDatasource)
	contactController := controller.NewContactController(contactApplicationService)
	datasource_adminContactDatasource := datasource_admin.NewContactDatasource(client)
	service_adminContactApplicationService := service_admin.NewContactApplicationService(datasource_adminContactDatasource)
	controller_adminContactController := controller_admin.NewContactController(service_adminContactApplicationService)
	datasource_adminThreadCommentDatasource := datasource_admin.NewThreadCommentDatasource(client)
	service_adminThreadCommentApplicationService := service_admin.NewThreadCommentApplicationService(datasource_adminThreadCommentDatasource)
	controller_adminThreadCommentController := controller_admin.NewThreadCommentController(service_adminThreadCommentApplicationService)
	datasource_adminTagDatasource := datasource_admin.NewTagDatasource(client)
	service_adminTagApplicationService := service_admin.NewTagApplicationService(datasource_adminTagDatasource)
	controller_adminTagController := controller_admin.NewTagController(service_adminTagApplicationService)
	controllersSet := &ControllersSet{
		BoardController:              boardController,
		UserController:               userController,
		ThreadController:             threadController,
		ThreadCommentController:      threadCommentController,
		TagController:                tagController,
		StorageController:            storageController,
		UserAdminController:          controller_adminUserController,
		BoardAdminController:         controller_adminBoardController,
		ThreadAdminController:        controller_adminThreadController,
		ContactController:            contactController,
		ContactAdminController:       controller_adminContactController,
		ThreadCommentAdminController: controller_adminThreadCommentController,
		TagAdminController:           controller_adminTagController,
	}
	return controllersSet, func() {
		cleanup()
	}, nil
}

// wire.go:

var externalServiceSet = wire.NewSet(datasource.ProvideClient, aws.NewS3Client, aws.NewSESClient, minio.NewMinioClient, mailpit.NewMailpitClient)

var controllerSet = wire.NewSet(controller.NewBoardController, controller.NewUserController, controller.NewThreadController, controller.NewThreadCommentController, controller.NewTagController, controller.NewStorageController, controller_admin.NewUserController, controller_admin.NewBoardController, controller_admin.NewThreadController, controller.NewContactController, controller_admin.NewContactController, controller_admin.NewThreadCommentController, controller_admin.NewTagController)

var serviceSet = wire.NewSet(service.NewBoardApplicationService, service.NewUserApplicationService, service.NewThreadApplicationService, service.NewThreadCommentApplicationService, service.NewTagApplicationService, service.NewStorageApplicationService, service_admin.NewUserApplicationService, service_admin.NewBoardApplicationService, service_admin.NewThreadApplicationService, service.NewContactApplicationService, service_admin.NewContactApplicationService, service_admin.NewThreadCommentApplicationService, service_admin.NewTagApplicationService)

var datasourceSet = wire.NewSet(datasource.NewBoardDatasource, datasource.NewUserDatasource, datasource.NewThreadDatasource, datasource.NewThreadCommentDatasource, datasource.NewTagDatasource, datasource_admin.NewUserDatasource, datasource_admin.NewBoardDatasource, datasource_admin.NewThreadDatasource, datasource.NewContactDatasource, datasource_admin.NewContactDatasource, datasource_admin.NewThreadCommentDatasource, datasource_admin.NewTagDatasource)

type ControllersSet struct {
	BoardController              *controller.BoardController
	UserController               *controller.UserController
	ThreadController             *controller.ThreadController
	ThreadCommentController      *controller.ThreadCommentController
	TagController                *controller.TagController
	StorageController            *controller.StorageController
	UserAdminController          *controller_admin.UserController
	BoardAdminController         *controller_admin.BoardController
	ThreadAdminController        *controller_admin.ThreadController
	ContactController            *controller.ContactController
	ContactAdminController       *controller_admin.ContactController
	ThreadCommentAdminController *controller_admin.ThreadCommentController
	TagAdminController           *controller_admin.TagController
}
