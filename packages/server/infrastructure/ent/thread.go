// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"server/infrastructure/ent/board"
	"server/infrastructure/ent/thread"
	"server/infrastructure/ent/user"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// Thread is the model entity for the Thread schema.
type Thread struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// BoardID holds the value of the "board_id" field.
	BoardID int `json:"board_id,omitempty"`
	// UserID holds the value of the "user_id" field.
	UserID int `json:"user_id,omitempty"`
	// Title holds the value of the "title" field.
	Title string `json:"title,omitempty"`
	// Description holds the value of the "description" field.
	Description *string `json:"description,omitempty"`
	// ThumbnailURL holds the value of the "thumbnail_url" field.
	ThumbnailURL *string `json:"thumbnail_url,omitempty"`
	// スレッド作成者のIPアドレス
	IPAddress string `json:"ip_address,omitempty"`
	// 0: Open, 1: Pending, 2: Archived
	Status int `json:"status,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ThreadQuery when eager-loading is set.
	Edges        ThreadEdges `json:"edges"`
	selectValues sql.SelectValues
}

// ThreadEdges holds the relations/edges for other nodes in the graph.
type ThreadEdges struct {
	// Board holds the value of the board edge.
	Board *Board `json:"board,omitempty"`
	// Owner holds the value of the owner edge.
	Owner *User `json:"owner,omitempty"`
	// Comments holds the value of the comments edge.
	Comments []*ThreadComment `json:"comments,omitempty"`
	// Tags holds the value of the tags edge.
	Tags []*Tag `json:"tags,omitempty"`
	// LikedUsers holds the value of the liked_users edge.
	LikedUsers []*User `json:"liked_users,omitempty"`
	// ThreadTags holds the value of the thread_tags edge.
	ThreadTags []*ThreadTag `json:"thread_tags,omitempty"`
	// UserThreadLike holds the value of the user_thread_like edge.
	UserThreadLike []*UserThreadLike `json:"user_thread_like,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [7]bool
}

// BoardOrErr returns the Board value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ThreadEdges) BoardOrErr() (*Board, error) {
	if e.Board != nil {
		return e.Board, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: board.Label}
	}
	return nil, &NotLoadedError{edge: "board"}
}

// OwnerOrErr returns the Owner value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ThreadEdges) OwnerOrErr() (*User, error) {
	if e.Owner != nil {
		return e.Owner, nil
	} else if e.loadedTypes[1] {
		return nil, &NotFoundError{label: user.Label}
	}
	return nil, &NotLoadedError{edge: "owner"}
}

// CommentsOrErr returns the Comments value or an error if the edge
// was not loaded in eager-loading.
func (e ThreadEdges) CommentsOrErr() ([]*ThreadComment, error) {
	if e.loadedTypes[2] {
		return e.Comments, nil
	}
	return nil, &NotLoadedError{edge: "comments"}
}

// TagsOrErr returns the Tags value or an error if the edge
// was not loaded in eager-loading.
func (e ThreadEdges) TagsOrErr() ([]*Tag, error) {
	if e.loadedTypes[3] {
		return e.Tags, nil
	}
	return nil, &NotLoadedError{edge: "tags"}
}

// LikedUsersOrErr returns the LikedUsers value or an error if the edge
// was not loaded in eager-loading.
func (e ThreadEdges) LikedUsersOrErr() ([]*User, error) {
	if e.loadedTypes[4] {
		return e.LikedUsers, nil
	}
	return nil, &NotLoadedError{edge: "liked_users"}
}

// ThreadTagsOrErr returns the ThreadTags value or an error if the edge
// was not loaded in eager-loading.
func (e ThreadEdges) ThreadTagsOrErr() ([]*ThreadTag, error) {
	if e.loadedTypes[5] {
		return e.ThreadTags, nil
	}
	return nil, &NotLoadedError{edge: "thread_tags"}
}

// UserThreadLikeOrErr returns the UserThreadLike value or an error if the edge
// was not loaded in eager-loading.
func (e ThreadEdges) UserThreadLikeOrErr() ([]*UserThreadLike, error) {
	if e.loadedTypes[6] {
		return e.UserThreadLike, nil
	}
	return nil, &NotLoadedError{edge: "user_thread_like"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Thread) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case thread.FieldID, thread.FieldBoardID, thread.FieldUserID, thread.FieldStatus:
			values[i] = new(sql.NullInt64)
		case thread.FieldTitle, thread.FieldDescription, thread.FieldThumbnailURL, thread.FieldIPAddress:
			values[i] = new(sql.NullString)
		case thread.FieldCreatedAt, thread.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Thread fields.
func (t *Thread) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case thread.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			t.ID = int(value.Int64)
		case thread.FieldBoardID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field board_id", values[i])
			} else if value.Valid {
				t.BoardID = int(value.Int64)
			}
		case thread.FieldUserID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field user_id", values[i])
			} else if value.Valid {
				t.UserID = int(value.Int64)
			}
		case thread.FieldTitle:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field title", values[i])
			} else if value.Valid {
				t.Title = value.String
			}
		case thread.FieldDescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field description", values[i])
			} else if value.Valid {
				t.Description = new(string)
				*t.Description = value.String
			}
		case thread.FieldThumbnailURL:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field thumbnail_url", values[i])
			} else if value.Valid {
				t.ThumbnailURL = new(string)
				*t.ThumbnailURL = value.String
			}
		case thread.FieldIPAddress:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field ip_address", values[i])
			} else if value.Valid {
				t.IPAddress = value.String
			}
		case thread.FieldStatus:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				t.Status = int(value.Int64)
			}
		case thread.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				t.CreatedAt = value.Time
			}
		case thread.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				t.UpdatedAt = value.Time
			}
		default:
			t.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Thread.
// This includes values selected through modifiers, order, etc.
func (t *Thread) Value(name string) (ent.Value, error) {
	return t.selectValues.Get(name)
}

// QueryBoard queries the "board" edge of the Thread entity.
func (t *Thread) QueryBoard() *BoardQuery {
	return NewThreadClient(t.config).QueryBoard(t)
}

// QueryOwner queries the "owner" edge of the Thread entity.
func (t *Thread) QueryOwner() *UserQuery {
	return NewThreadClient(t.config).QueryOwner(t)
}

// QueryComments queries the "comments" edge of the Thread entity.
func (t *Thread) QueryComments() *ThreadCommentQuery {
	return NewThreadClient(t.config).QueryComments(t)
}

// QueryTags queries the "tags" edge of the Thread entity.
func (t *Thread) QueryTags() *TagQuery {
	return NewThreadClient(t.config).QueryTags(t)
}

// QueryLikedUsers queries the "liked_users" edge of the Thread entity.
func (t *Thread) QueryLikedUsers() *UserQuery {
	return NewThreadClient(t.config).QueryLikedUsers(t)
}

// QueryThreadTags queries the "thread_tags" edge of the Thread entity.
func (t *Thread) QueryThreadTags() *ThreadTagQuery {
	return NewThreadClient(t.config).QueryThreadTags(t)
}

// QueryUserThreadLike queries the "user_thread_like" edge of the Thread entity.
func (t *Thread) QueryUserThreadLike() *UserThreadLikeQuery {
	return NewThreadClient(t.config).QueryUserThreadLike(t)
}

// Update returns a builder for updating this Thread.
// Note that you need to call Thread.Unwrap() before calling this method if this Thread
// was returned from a transaction, and the transaction was committed or rolled back.
func (t *Thread) Update() *ThreadUpdateOne {
	return NewThreadClient(t.config).UpdateOne(t)
}

// Unwrap unwraps the Thread entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (t *Thread) Unwrap() *Thread {
	_tx, ok := t.config.driver.(*txDriver)
	if !ok {
		panic("ent: Thread is not a transactional entity")
	}
	t.config.driver = _tx.drv
	return t
}

// String implements the fmt.Stringer.
func (t *Thread) String() string {
	var builder strings.Builder
	builder.WriteString("Thread(")
	builder.WriteString(fmt.Sprintf("id=%v, ", t.ID))
	builder.WriteString("board_id=")
	builder.WriteString(fmt.Sprintf("%v", t.BoardID))
	builder.WriteString(", ")
	builder.WriteString("user_id=")
	builder.WriteString(fmt.Sprintf("%v", t.UserID))
	builder.WriteString(", ")
	builder.WriteString("title=")
	builder.WriteString(t.Title)
	builder.WriteString(", ")
	if v := t.Description; v != nil {
		builder.WriteString("description=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	if v := t.ThumbnailURL; v != nil {
		builder.WriteString("thumbnail_url=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	builder.WriteString("ip_address=")
	builder.WriteString(t.IPAddress)
	builder.WriteString(", ")
	builder.WriteString("status=")
	builder.WriteString(fmt.Sprintf("%v", t.Status))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(t.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(t.UpdatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// Threads is a parsable slice of Thread.
type Threads []*Thread
