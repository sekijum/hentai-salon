// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"server/infrastructure/ent/thread"
	"server/infrastructure/ent/threadcomment"
	"server/infrastructure/ent/threadcommentattachment"
	"server/infrastructure/ent/user"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ThreadCommentCreate is the builder for creating a ThreadComment entity.
type ThreadCommentCreate struct {
	config
	mutation *ThreadCommentMutation
	hooks    []Hook
}

// SetThreadID sets the "thread_id" field.
func (tcc *ThreadCommentCreate) SetThreadID(i int) *ThreadCommentCreate {
	tcc.mutation.SetThreadID(i)
	return tcc
}

// SetParentCommentID sets the "parent_comment_id" field.
func (tcc *ThreadCommentCreate) SetParentCommentID(i int) *ThreadCommentCreate {
	tcc.mutation.SetParentCommentID(i)
	return tcc
}

// SetNillableParentCommentID sets the "parent_comment_id" field if the given value is not nil.
func (tcc *ThreadCommentCreate) SetNillableParentCommentID(i *int) *ThreadCommentCreate {
	if i != nil {
		tcc.SetParentCommentID(*i)
	}
	return tcc
}

// SetUserID sets the "user_id" field.
func (tcc *ThreadCommentCreate) SetUserID(i int) *ThreadCommentCreate {
	tcc.mutation.SetUserID(i)
	return tcc
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (tcc *ThreadCommentCreate) SetNillableUserID(i *int) *ThreadCommentCreate {
	if i != nil {
		tcc.SetUserID(*i)
	}
	return tcc
}

// SetGuestName sets the "guest_name" field.
func (tcc *ThreadCommentCreate) SetGuestName(s string) *ThreadCommentCreate {
	tcc.mutation.SetGuestName(s)
	return tcc
}

// SetNillableGuestName sets the "guest_name" field if the given value is not nil.
func (tcc *ThreadCommentCreate) SetNillableGuestName(s *string) *ThreadCommentCreate {
	if s != nil {
		tcc.SetGuestName(*s)
	}
	return tcc
}

// SetContent sets the "content" field.
func (tcc *ThreadCommentCreate) SetContent(s string) *ThreadCommentCreate {
	tcc.mutation.SetContent(s)
	return tcc
}

// SetIPAddress sets the "ip_address" field.
func (tcc *ThreadCommentCreate) SetIPAddress(s string) *ThreadCommentCreate {
	tcc.mutation.SetIPAddress(s)
	return tcc
}

// SetCreatedAt sets the "created_at" field.
func (tcc *ThreadCommentCreate) SetCreatedAt(t time.Time) *ThreadCommentCreate {
	tcc.mutation.SetCreatedAt(t)
	return tcc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (tcc *ThreadCommentCreate) SetNillableCreatedAt(t *time.Time) *ThreadCommentCreate {
	if t != nil {
		tcc.SetCreatedAt(*t)
	}
	return tcc
}

// SetUpdatedAt sets the "updated_at" field.
func (tcc *ThreadCommentCreate) SetUpdatedAt(t time.Time) *ThreadCommentCreate {
	tcc.mutation.SetUpdatedAt(t)
	return tcc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (tcc *ThreadCommentCreate) SetNillableUpdatedAt(t *time.Time) *ThreadCommentCreate {
	if t != nil {
		tcc.SetUpdatedAt(*t)
	}
	return tcc
}

// SetID sets the "id" field.
func (tcc *ThreadCommentCreate) SetID(i int) *ThreadCommentCreate {
	tcc.mutation.SetID(i)
	return tcc
}

// SetThread sets the "thread" edge to the Thread entity.
func (tcc *ThreadCommentCreate) SetThread(t *Thread) *ThreadCommentCreate {
	return tcc.SetThreadID(t.ID)
}

// SetAuthorID sets the "author" edge to the User entity by ID.
func (tcc *ThreadCommentCreate) SetAuthorID(id int) *ThreadCommentCreate {
	tcc.mutation.SetAuthorID(id)
	return tcc
}

// SetNillableAuthorID sets the "author" edge to the User entity by ID if the given value is not nil.
func (tcc *ThreadCommentCreate) SetNillableAuthorID(id *int) *ThreadCommentCreate {
	if id != nil {
		tcc = tcc.SetAuthorID(*id)
	}
	return tcc
}

// SetAuthor sets the "author" edge to the User entity.
func (tcc *ThreadCommentCreate) SetAuthor(u *User) *ThreadCommentCreate {
	return tcc.SetAuthorID(u.ID)
}

// SetParentComment sets the "parent_comment" edge to the ThreadComment entity.
func (tcc *ThreadCommentCreate) SetParentComment(t *ThreadComment) *ThreadCommentCreate {
	return tcc.SetParentCommentID(t.ID)
}

// AddReplyIDs adds the "replies" edge to the ThreadComment entity by IDs.
func (tcc *ThreadCommentCreate) AddReplyIDs(ids ...int) *ThreadCommentCreate {
	tcc.mutation.AddReplyIDs(ids...)
	return tcc
}

// AddReplies adds the "replies" edges to the ThreadComment entity.
func (tcc *ThreadCommentCreate) AddReplies(t ...*ThreadComment) *ThreadCommentCreate {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return tcc.AddReplyIDs(ids...)
}

// AddAttachmentIDs adds the "attachments" edge to the ThreadCommentAttachment entity by IDs.
func (tcc *ThreadCommentCreate) AddAttachmentIDs(ids ...int) *ThreadCommentCreate {
	tcc.mutation.AddAttachmentIDs(ids...)
	return tcc
}

// AddAttachments adds the "attachments" edges to the ThreadCommentAttachment entity.
func (tcc *ThreadCommentCreate) AddAttachments(t ...*ThreadCommentAttachment) *ThreadCommentCreate {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return tcc.AddAttachmentIDs(ids...)
}

// AddLikedUserIDs adds the "liked_users" edge to the User entity by IDs.
func (tcc *ThreadCommentCreate) AddLikedUserIDs(ids ...int) *ThreadCommentCreate {
	tcc.mutation.AddLikedUserIDs(ids...)
	return tcc
}

// AddLikedUsers adds the "liked_users" edges to the User entity.
func (tcc *ThreadCommentCreate) AddLikedUsers(u ...*User) *ThreadCommentCreate {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return tcc.AddLikedUserIDs(ids...)
}

// Mutation returns the ThreadCommentMutation object of the builder.
func (tcc *ThreadCommentCreate) Mutation() *ThreadCommentMutation {
	return tcc.mutation
}

// Save creates the ThreadComment in the database.
func (tcc *ThreadCommentCreate) Save(ctx context.Context) (*ThreadComment, error) {
	tcc.defaults()
	return withHooks(ctx, tcc.sqlSave, tcc.mutation, tcc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (tcc *ThreadCommentCreate) SaveX(ctx context.Context) *ThreadComment {
	v, err := tcc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (tcc *ThreadCommentCreate) Exec(ctx context.Context) error {
	_, err := tcc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tcc *ThreadCommentCreate) ExecX(ctx context.Context) {
	if err := tcc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (tcc *ThreadCommentCreate) defaults() {
	if _, ok := tcc.mutation.CreatedAt(); !ok {
		v := threadcomment.DefaultCreatedAt()
		tcc.mutation.SetCreatedAt(v)
	}
	if _, ok := tcc.mutation.UpdatedAt(); !ok {
		v := threadcomment.DefaultUpdatedAt()
		tcc.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (tcc *ThreadCommentCreate) check() error {
	if _, ok := tcc.mutation.ThreadID(); !ok {
		return &ValidationError{Name: "thread_id", err: errors.New(`ent: missing required field "ThreadComment.thread_id"`)}
	}
	if v, ok := tcc.mutation.GuestName(); ok {
		if err := threadcomment.GuestNameValidator(v); err != nil {
			return &ValidationError{Name: "guest_name", err: fmt.Errorf(`ent: validator failed for field "ThreadComment.guest_name": %w`, err)}
		}
	}
	if _, ok := tcc.mutation.Content(); !ok {
		return &ValidationError{Name: "content", err: errors.New(`ent: missing required field "ThreadComment.content"`)}
	}
	if _, ok := tcc.mutation.IPAddress(); !ok {
		return &ValidationError{Name: "ip_address", err: errors.New(`ent: missing required field "ThreadComment.ip_address"`)}
	}
	if v, ok := tcc.mutation.IPAddress(); ok {
		if err := threadcomment.IPAddressValidator(v); err != nil {
			return &ValidationError{Name: "ip_address", err: fmt.Errorf(`ent: validator failed for field "ThreadComment.ip_address": %w`, err)}
		}
	}
	if _, ok := tcc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "ThreadComment.created_at"`)}
	}
	if _, ok := tcc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "ThreadComment.updated_at"`)}
	}
	if len(tcc.mutation.ThreadIDs()) == 0 {
		return &ValidationError{Name: "thread", err: errors.New(`ent: missing required edge "ThreadComment.thread"`)}
	}
	return nil
}

func (tcc *ThreadCommentCreate) sqlSave(ctx context.Context) (*ThreadComment, error) {
	if err := tcc.check(); err != nil {
		return nil, err
	}
	_node, _spec := tcc.createSpec()
	if err := sqlgraph.CreateNode(ctx, tcc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int(id)
	}
	tcc.mutation.id = &_node.ID
	tcc.mutation.done = true
	return _node, nil
}

func (tcc *ThreadCommentCreate) createSpec() (*ThreadComment, *sqlgraph.CreateSpec) {
	var (
		_node = &ThreadComment{config: tcc.config}
		_spec = sqlgraph.NewCreateSpec(threadcomment.Table, sqlgraph.NewFieldSpec(threadcomment.FieldID, field.TypeInt))
	)
	if id, ok := tcc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := tcc.mutation.GuestName(); ok {
		_spec.SetField(threadcomment.FieldGuestName, field.TypeString, value)
		_node.GuestName = &value
	}
	if value, ok := tcc.mutation.Content(); ok {
		_spec.SetField(threadcomment.FieldContent, field.TypeString, value)
		_node.Content = value
	}
	if value, ok := tcc.mutation.IPAddress(); ok {
		_spec.SetField(threadcomment.FieldIPAddress, field.TypeString, value)
		_node.IPAddress = value
	}
	if value, ok := tcc.mutation.CreatedAt(); ok {
		_spec.SetField(threadcomment.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := tcc.mutation.UpdatedAt(); ok {
		_spec.SetField(threadcomment.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if nodes := tcc.mutation.ThreadIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   threadcomment.ThreadTable,
			Columns: []string{threadcomment.ThreadColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(thread.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.ThreadID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := tcc.mutation.AuthorIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   threadcomment.AuthorTable,
			Columns: []string{threadcomment.AuthorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.UserID = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := tcc.mutation.ParentCommentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   threadcomment.ParentCommentTable,
			Columns: []string{threadcomment.ParentCommentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(threadcomment.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.ParentCommentID = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := tcc.mutation.RepliesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   threadcomment.RepliesTable,
			Columns: []string{threadcomment.RepliesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(threadcomment.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := tcc.mutation.AttachmentsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   threadcomment.AttachmentsTable,
			Columns: []string{threadcomment.AttachmentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(threadcommentattachment.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := tcc.mutation.LikedUsersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   threadcomment.LikedUsersTable,
			Columns: threadcomment.LikedUsersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		createE := &UserCommentLikeCreate{config: tcc.config, mutation: newUserCommentLikeMutation(tcc.config, OpCreate)}
		createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// ThreadCommentCreateBulk is the builder for creating many ThreadComment entities in bulk.
type ThreadCommentCreateBulk struct {
	config
	err      error
	builders []*ThreadCommentCreate
}

// Save creates the ThreadComment entities in the database.
func (tccb *ThreadCommentCreateBulk) Save(ctx context.Context) ([]*ThreadComment, error) {
	if tccb.err != nil {
		return nil, tccb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(tccb.builders))
	nodes := make([]*ThreadComment, len(tccb.builders))
	mutators := make([]Mutator, len(tccb.builders))
	for i := range tccb.builders {
		func(i int, root context.Context) {
			builder := tccb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ThreadCommentMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, tccb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, tccb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, tccb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (tccb *ThreadCommentCreateBulk) SaveX(ctx context.Context) []*ThreadComment {
	v, err := tccb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (tccb *ThreadCommentCreateBulk) Exec(ctx context.Context) error {
	_, err := tccb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tccb *ThreadCommentCreateBulk) ExecX(ctx context.Context) {
	if err := tccb.Exec(ctx); err != nil {
		panic(err)
	}
}
