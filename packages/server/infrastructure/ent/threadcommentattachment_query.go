// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"math"
	"server/infrastructure/ent/predicate"
	"server/infrastructure/ent/threadcomment"
	"server/infrastructure/ent/threadcommentattachment"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ThreadCommentAttachmentQuery is the builder for querying ThreadCommentAttachment entities.
type ThreadCommentAttachmentQuery struct {
	config
	ctx         *QueryContext
	order       []threadcommentattachment.OrderOption
	inters      []Interceptor
	predicates  []predicate.ThreadCommentAttachment
	withComment *ThreadCommentQuery
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the ThreadCommentAttachmentQuery builder.
func (tcaq *ThreadCommentAttachmentQuery) Where(ps ...predicate.ThreadCommentAttachment) *ThreadCommentAttachmentQuery {
	tcaq.predicates = append(tcaq.predicates, ps...)
	return tcaq
}

// Limit the number of records to be returned by this query.
func (tcaq *ThreadCommentAttachmentQuery) Limit(limit int) *ThreadCommentAttachmentQuery {
	tcaq.ctx.Limit = &limit
	return tcaq
}

// Offset to start from.
func (tcaq *ThreadCommentAttachmentQuery) Offset(offset int) *ThreadCommentAttachmentQuery {
	tcaq.ctx.Offset = &offset
	return tcaq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (tcaq *ThreadCommentAttachmentQuery) Unique(unique bool) *ThreadCommentAttachmentQuery {
	tcaq.ctx.Unique = &unique
	return tcaq
}

// Order specifies how the records should be ordered.
func (tcaq *ThreadCommentAttachmentQuery) Order(o ...threadcommentattachment.OrderOption) *ThreadCommentAttachmentQuery {
	tcaq.order = append(tcaq.order, o...)
	return tcaq
}

// QueryComment chains the current query on the "comment" edge.
func (tcaq *ThreadCommentAttachmentQuery) QueryComment() *ThreadCommentQuery {
	query := (&ThreadCommentClient{config: tcaq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := tcaq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := tcaq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(threadcommentattachment.Table, threadcommentattachment.FieldID, selector),
			sqlgraph.To(threadcomment.Table, threadcomment.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, threadcommentattachment.CommentTable, threadcommentattachment.CommentColumn),
		)
		fromU = sqlgraph.SetNeighbors(tcaq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first ThreadCommentAttachment entity from the query.
// Returns a *NotFoundError when no ThreadCommentAttachment was found.
func (tcaq *ThreadCommentAttachmentQuery) First(ctx context.Context) (*ThreadCommentAttachment, error) {
	nodes, err := tcaq.Limit(1).All(setContextOp(ctx, tcaq.ctx, ent.OpQueryFirst))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{threadcommentattachment.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (tcaq *ThreadCommentAttachmentQuery) FirstX(ctx context.Context) *ThreadCommentAttachment {
	node, err := tcaq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first ThreadCommentAttachment ID from the query.
// Returns a *NotFoundError when no ThreadCommentAttachment ID was found.
func (tcaq *ThreadCommentAttachmentQuery) FirstID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = tcaq.Limit(1).IDs(setContextOp(ctx, tcaq.ctx, ent.OpQueryFirstID)); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{threadcommentattachment.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (tcaq *ThreadCommentAttachmentQuery) FirstIDX(ctx context.Context) int {
	id, err := tcaq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single ThreadCommentAttachment entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one ThreadCommentAttachment entity is found.
// Returns a *NotFoundError when no ThreadCommentAttachment entities are found.
func (tcaq *ThreadCommentAttachmentQuery) Only(ctx context.Context) (*ThreadCommentAttachment, error) {
	nodes, err := tcaq.Limit(2).All(setContextOp(ctx, tcaq.ctx, ent.OpQueryOnly))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{threadcommentattachment.Label}
	default:
		return nil, &NotSingularError{threadcommentattachment.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (tcaq *ThreadCommentAttachmentQuery) OnlyX(ctx context.Context) *ThreadCommentAttachment {
	node, err := tcaq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only ThreadCommentAttachment ID in the query.
// Returns a *NotSingularError when more than one ThreadCommentAttachment ID is found.
// Returns a *NotFoundError when no entities are found.
func (tcaq *ThreadCommentAttachmentQuery) OnlyID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = tcaq.Limit(2).IDs(setContextOp(ctx, tcaq.ctx, ent.OpQueryOnlyID)); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{threadcommentattachment.Label}
	default:
		err = &NotSingularError{threadcommentattachment.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (tcaq *ThreadCommentAttachmentQuery) OnlyIDX(ctx context.Context) int {
	id, err := tcaq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of ThreadCommentAttachments.
func (tcaq *ThreadCommentAttachmentQuery) All(ctx context.Context) ([]*ThreadCommentAttachment, error) {
	ctx = setContextOp(ctx, tcaq.ctx, ent.OpQueryAll)
	if err := tcaq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*ThreadCommentAttachment, *ThreadCommentAttachmentQuery]()
	return withInterceptors[[]*ThreadCommentAttachment](ctx, tcaq, qr, tcaq.inters)
}

// AllX is like All, but panics if an error occurs.
func (tcaq *ThreadCommentAttachmentQuery) AllX(ctx context.Context) []*ThreadCommentAttachment {
	nodes, err := tcaq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of ThreadCommentAttachment IDs.
func (tcaq *ThreadCommentAttachmentQuery) IDs(ctx context.Context) (ids []int, err error) {
	if tcaq.ctx.Unique == nil && tcaq.path != nil {
		tcaq.Unique(true)
	}
	ctx = setContextOp(ctx, tcaq.ctx, ent.OpQueryIDs)
	if err = tcaq.Select(threadcommentattachment.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (tcaq *ThreadCommentAttachmentQuery) IDsX(ctx context.Context) []int {
	ids, err := tcaq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (tcaq *ThreadCommentAttachmentQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, tcaq.ctx, ent.OpQueryCount)
	if err := tcaq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, tcaq, querierCount[*ThreadCommentAttachmentQuery](), tcaq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (tcaq *ThreadCommentAttachmentQuery) CountX(ctx context.Context) int {
	count, err := tcaq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (tcaq *ThreadCommentAttachmentQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, tcaq.ctx, ent.OpQueryExist)
	switch _, err := tcaq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (tcaq *ThreadCommentAttachmentQuery) ExistX(ctx context.Context) bool {
	exist, err := tcaq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the ThreadCommentAttachmentQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (tcaq *ThreadCommentAttachmentQuery) Clone() *ThreadCommentAttachmentQuery {
	if tcaq == nil {
		return nil
	}
	return &ThreadCommentAttachmentQuery{
		config:      tcaq.config,
		ctx:         tcaq.ctx.Clone(),
		order:       append([]threadcommentattachment.OrderOption{}, tcaq.order...),
		inters:      append([]Interceptor{}, tcaq.inters...),
		predicates:  append([]predicate.ThreadCommentAttachment{}, tcaq.predicates...),
		withComment: tcaq.withComment.Clone(),
		// clone intermediate query.
		sql:  tcaq.sql.Clone(),
		path: tcaq.path,
	}
}

// WithComment tells the query-builder to eager-load the nodes that are connected to
// the "comment" edge. The optional arguments are used to configure the query builder of the edge.
func (tcaq *ThreadCommentAttachmentQuery) WithComment(opts ...func(*ThreadCommentQuery)) *ThreadCommentAttachmentQuery {
	query := (&ThreadCommentClient{config: tcaq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	tcaq.withComment = query
	return tcaq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		CommentID uint64 `json:"comment_id,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.ThreadCommentAttachment.Query().
//		GroupBy(threadcommentattachment.FieldCommentID).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (tcaq *ThreadCommentAttachmentQuery) GroupBy(field string, fields ...string) *ThreadCommentAttachmentGroupBy {
	tcaq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &ThreadCommentAttachmentGroupBy{build: tcaq}
	grbuild.flds = &tcaq.ctx.Fields
	grbuild.label = threadcommentattachment.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		CommentID uint64 `json:"comment_id,omitempty"`
//	}
//
//	client.ThreadCommentAttachment.Query().
//		Select(threadcommentattachment.FieldCommentID).
//		Scan(ctx, &v)
func (tcaq *ThreadCommentAttachmentQuery) Select(fields ...string) *ThreadCommentAttachmentSelect {
	tcaq.ctx.Fields = append(tcaq.ctx.Fields, fields...)
	sbuild := &ThreadCommentAttachmentSelect{ThreadCommentAttachmentQuery: tcaq}
	sbuild.label = threadcommentattachment.Label
	sbuild.flds, sbuild.scan = &tcaq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a ThreadCommentAttachmentSelect configured with the given aggregations.
func (tcaq *ThreadCommentAttachmentQuery) Aggregate(fns ...AggregateFunc) *ThreadCommentAttachmentSelect {
	return tcaq.Select().Aggregate(fns...)
}

func (tcaq *ThreadCommentAttachmentQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range tcaq.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, tcaq); err != nil {
				return err
			}
		}
	}
	for _, f := range tcaq.ctx.Fields {
		if !threadcommentattachment.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if tcaq.path != nil {
		prev, err := tcaq.path(ctx)
		if err != nil {
			return err
		}
		tcaq.sql = prev
	}
	return nil
}

func (tcaq *ThreadCommentAttachmentQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*ThreadCommentAttachment, error) {
	var (
		nodes       = []*ThreadCommentAttachment{}
		_spec       = tcaq.querySpec()
		loadedTypes = [1]bool{
			tcaq.withComment != nil,
		}
	)
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*ThreadCommentAttachment).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &ThreadCommentAttachment{config: tcaq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, tcaq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := tcaq.withComment; query != nil {
		if err := tcaq.loadComment(ctx, query, nodes, nil,
			func(n *ThreadCommentAttachment, e *ThreadComment) { n.Edges.Comment = e }); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (tcaq *ThreadCommentAttachmentQuery) loadComment(ctx context.Context, query *ThreadCommentQuery, nodes []*ThreadCommentAttachment, init func(*ThreadCommentAttachment), assign func(*ThreadCommentAttachment, *ThreadComment)) error {
	ids := make([]uint64, 0, len(nodes))
	nodeids := make(map[uint64][]*ThreadCommentAttachment)
	for i := range nodes {
		fk := nodes[i].CommentID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(threadcomment.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "comment_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}

func (tcaq *ThreadCommentAttachmentQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := tcaq.querySpec()
	_spec.Node.Columns = tcaq.ctx.Fields
	if len(tcaq.ctx.Fields) > 0 {
		_spec.Unique = tcaq.ctx.Unique != nil && *tcaq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, tcaq.driver, _spec)
}

func (tcaq *ThreadCommentAttachmentQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(threadcommentattachment.Table, threadcommentattachment.Columns, sqlgraph.NewFieldSpec(threadcommentattachment.FieldID, field.TypeInt))
	_spec.From = tcaq.sql
	if unique := tcaq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if tcaq.path != nil {
		_spec.Unique = true
	}
	if fields := tcaq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, threadcommentattachment.FieldID)
		for i := range fields {
			if fields[i] != threadcommentattachment.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
		if tcaq.withComment != nil {
			_spec.Node.AddColumnOnce(threadcommentattachment.FieldCommentID)
		}
	}
	if ps := tcaq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := tcaq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := tcaq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := tcaq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (tcaq *ThreadCommentAttachmentQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(tcaq.driver.Dialect())
	t1 := builder.Table(threadcommentattachment.Table)
	columns := tcaq.ctx.Fields
	if len(columns) == 0 {
		columns = threadcommentattachment.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if tcaq.sql != nil {
		selector = tcaq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if tcaq.ctx.Unique != nil && *tcaq.ctx.Unique {
		selector.Distinct()
	}
	for _, p := range tcaq.predicates {
		p(selector)
	}
	for _, p := range tcaq.order {
		p(selector)
	}
	if offset := tcaq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := tcaq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// ThreadCommentAttachmentGroupBy is the group-by builder for ThreadCommentAttachment entities.
type ThreadCommentAttachmentGroupBy struct {
	selector
	build *ThreadCommentAttachmentQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (tcagb *ThreadCommentAttachmentGroupBy) Aggregate(fns ...AggregateFunc) *ThreadCommentAttachmentGroupBy {
	tcagb.fns = append(tcagb.fns, fns...)
	return tcagb
}

// Scan applies the selector query and scans the result into the given value.
func (tcagb *ThreadCommentAttachmentGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, tcagb.build.ctx, ent.OpQueryGroupBy)
	if err := tcagb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*ThreadCommentAttachmentQuery, *ThreadCommentAttachmentGroupBy](ctx, tcagb.build, tcagb, tcagb.build.inters, v)
}

func (tcagb *ThreadCommentAttachmentGroupBy) sqlScan(ctx context.Context, root *ThreadCommentAttachmentQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(tcagb.fns))
	for _, fn := range tcagb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*tcagb.flds)+len(tcagb.fns))
		for _, f := range *tcagb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*tcagb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := tcagb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// ThreadCommentAttachmentSelect is the builder for selecting fields of ThreadCommentAttachment entities.
type ThreadCommentAttachmentSelect struct {
	*ThreadCommentAttachmentQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (tcas *ThreadCommentAttachmentSelect) Aggregate(fns ...AggregateFunc) *ThreadCommentAttachmentSelect {
	tcas.fns = append(tcas.fns, fns...)
	return tcas
}

// Scan applies the selector query and scans the result into the given value.
func (tcas *ThreadCommentAttachmentSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, tcas.ctx, ent.OpQuerySelect)
	if err := tcas.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*ThreadCommentAttachmentQuery, *ThreadCommentAttachmentSelect](ctx, tcas.ThreadCommentAttachmentQuery, tcas, tcas.inters, v)
}

func (tcas *ThreadCommentAttachmentSelect) sqlScan(ctx context.Context, root *ThreadCommentAttachmentQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(tcas.fns))
	for _, fn := range tcas.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*tcas.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := tcas.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
