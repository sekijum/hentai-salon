// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"server/infrastructure/ent/ad"
	"server/infrastructure/ent/predicate"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// AdDelete is the builder for deleting a Ad entity.
type AdDelete struct {
	config
	hooks    []Hook
	mutation *AdMutation
}

// Where appends a list predicates to the AdDelete builder.
func (_ad *AdDelete) Where(ps ...predicate.Ad) *AdDelete {
	_ad.mutation.Where(ps...)
	return _ad
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (_ad *AdDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, _ad.sqlExec, _ad.mutation, _ad.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (_ad *AdDelete) ExecX(ctx context.Context) int {
	n, err := _ad.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (_ad *AdDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(ad.Table, sqlgraph.NewFieldSpec(ad.FieldID, field.TypeInt))
	if ps := _ad.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, _ad.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	_ad.mutation.done = true
	return affected, err
}

// AdDeleteOne is the builder for deleting a single Ad entity.
type AdDeleteOne struct {
	_ad *AdDelete
}

// Where appends a list predicates to the AdDelete builder.
func (ado *AdDeleteOne) Where(ps ...predicate.Ad) *AdDeleteOne {
	ado._ad.mutation.Where(ps...)
	return ado
}

// Exec executes the deletion query.
func (ado *AdDeleteOne) Exec(ctx context.Context) error {
	n, err := ado._ad.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{ad.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (ado *AdDeleteOne) ExecX(ctx context.Context) {
	if err := ado.Exec(ctx); err != nil {
		panic(err)
	}
}
