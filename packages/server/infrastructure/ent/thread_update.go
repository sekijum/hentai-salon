// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"server/infrastructure/ent/board"
	"server/infrastructure/ent/predicate"
	"server/infrastructure/ent/tag"
	"server/infrastructure/ent/thread"
	"server/infrastructure/ent/threadcomment"
	"server/infrastructure/ent/user"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ThreadUpdate is the builder for updating Thread entities.
type ThreadUpdate struct {
	config
	hooks    []Hook
	mutation *ThreadMutation
}

// Where appends a list predicates to the ThreadUpdate builder.
func (tu *ThreadUpdate) Where(ps ...predicate.Thread) *ThreadUpdate {
	tu.mutation.Where(ps...)
	return tu
}

// SetBoardID sets the "board_id" field.
func (tu *ThreadUpdate) SetBoardID(i int) *ThreadUpdate {
	tu.mutation.SetBoardID(i)
	return tu
}

// SetNillableBoardID sets the "board_id" field if the given value is not nil.
func (tu *ThreadUpdate) SetNillableBoardID(i *int) *ThreadUpdate {
	if i != nil {
		tu.SetBoardID(*i)
	}
	return tu
}

// SetUserID sets the "user_id" field.
func (tu *ThreadUpdate) SetUserID(i int) *ThreadUpdate {
	tu.mutation.SetUserID(i)
	return tu
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (tu *ThreadUpdate) SetNillableUserID(i *int) *ThreadUpdate {
	if i != nil {
		tu.SetUserID(*i)
	}
	return tu
}

// SetTitle sets the "title" field.
func (tu *ThreadUpdate) SetTitle(s string) *ThreadUpdate {
	tu.mutation.SetTitle(s)
	return tu
}

// SetNillableTitle sets the "title" field if the given value is not nil.
func (tu *ThreadUpdate) SetNillableTitle(s *string) *ThreadUpdate {
	if s != nil {
		tu.SetTitle(*s)
	}
	return tu
}

// SetDescription sets the "description" field.
func (tu *ThreadUpdate) SetDescription(s string) *ThreadUpdate {
	tu.mutation.SetDescription(s)
	return tu
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (tu *ThreadUpdate) SetNillableDescription(s *string) *ThreadUpdate {
	if s != nil {
		tu.SetDescription(*s)
	}
	return tu
}

// ClearDescription clears the value of the "description" field.
func (tu *ThreadUpdate) ClearDescription() *ThreadUpdate {
	tu.mutation.ClearDescription()
	return tu
}

// SetThumbnailURL sets the "thumbnail_url" field.
func (tu *ThreadUpdate) SetThumbnailURL(s string) *ThreadUpdate {
	tu.mutation.SetThumbnailURL(s)
	return tu
}

// SetNillableThumbnailURL sets the "thumbnail_url" field if the given value is not nil.
func (tu *ThreadUpdate) SetNillableThumbnailURL(s *string) *ThreadUpdate {
	if s != nil {
		tu.SetThumbnailURL(*s)
	}
	return tu
}

// ClearThumbnailURL clears the value of the "thumbnail_url" field.
func (tu *ThreadUpdate) ClearThumbnailURL() *ThreadUpdate {
	tu.mutation.ClearThumbnailURL()
	return tu
}

// SetIPAddress sets the "ip_address" field.
func (tu *ThreadUpdate) SetIPAddress(s string) *ThreadUpdate {
	tu.mutation.SetIPAddress(s)
	return tu
}

// SetNillableIPAddress sets the "ip_address" field if the given value is not nil.
func (tu *ThreadUpdate) SetNillableIPAddress(s *string) *ThreadUpdate {
	if s != nil {
		tu.SetIPAddress(*s)
	}
	return tu
}

// SetStatus sets the "status" field.
func (tu *ThreadUpdate) SetStatus(i int) *ThreadUpdate {
	tu.mutation.ResetStatus()
	tu.mutation.SetStatus(i)
	return tu
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (tu *ThreadUpdate) SetNillableStatus(i *int) *ThreadUpdate {
	if i != nil {
		tu.SetStatus(*i)
	}
	return tu
}

// AddStatus adds i to the "status" field.
func (tu *ThreadUpdate) AddStatus(i int) *ThreadUpdate {
	tu.mutation.AddStatus(i)
	return tu
}

// SetCreatedAt sets the "created_at" field.
func (tu *ThreadUpdate) SetCreatedAt(t time.Time) *ThreadUpdate {
	tu.mutation.SetCreatedAt(t)
	return tu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (tu *ThreadUpdate) SetNillableCreatedAt(t *time.Time) *ThreadUpdate {
	if t != nil {
		tu.SetCreatedAt(*t)
	}
	return tu
}

// SetUpdatedAt sets the "updated_at" field.
func (tu *ThreadUpdate) SetUpdatedAt(t time.Time) *ThreadUpdate {
	tu.mutation.SetUpdatedAt(t)
	return tu
}

// SetBoard sets the "board" edge to the Board entity.
func (tu *ThreadUpdate) SetBoard(b *Board) *ThreadUpdate {
	return tu.SetBoardID(b.ID)
}

// SetOwnerID sets the "owner" edge to the User entity by ID.
func (tu *ThreadUpdate) SetOwnerID(id int) *ThreadUpdate {
	tu.mutation.SetOwnerID(id)
	return tu
}

// SetOwner sets the "owner" edge to the User entity.
func (tu *ThreadUpdate) SetOwner(u *User) *ThreadUpdate {
	return tu.SetOwnerID(u.ID)
}

// AddCommentIDs adds the "comments" edge to the ThreadComment entity by IDs.
func (tu *ThreadUpdate) AddCommentIDs(ids ...int) *ThreadUpdate {
	tu.mutation.AddCommentIDs(ids...)
	return tu
}

// AddComments adds the "comments" edges to the ThreadComment entity.
func (tu *ThreadUpdate) AddComments(t ...*ThreadComment) *ThreadUpdate {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return tu.AddCommentIDs(ids...)
}

// AddTagIDs adds the "tags" edge to the Tag entity by IDs.
func (tu *ThreadUpdate) AddTagIDs(ids ...int) *ThreadUpdate {
	tu.mutation.AddTagIDs(ids...)
	return tu
}

// AddTags adds the "tags" edges to the Tag entity.
func (tu *ThreadUpdate) AddTags(t ...*Tag) *ThreadUpdate {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return tu.AddTagIDs(ids...)
}

// AddLikedUserIDs adds the "liked_users" edge to the User entity by IDs.
func (tu *ThreadUpdate) AddLikedUserIDs(ids ...int) *ThreadUpdate {
	tu.mutation.AddLikedUserIDs(ids...)
	return tu
}

// AddLikedUsers adds the "liked_users" edges to the User entity.
func (tu *ThreadUpdate) AddLikedUsers(u ...*User) *ThreadUpdate {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return tu.AddLikedUserIDs(ids...)
}

// Mutation returns the ThreadMutation object of the builder.
func (tu *ThreadUpdate) Mutation() *ThreadMutation {
	return tu.mutation
}

// ClearBoard clears the "board" edge to the Board entity.
func (tu *ThreadUpdate) ClearBoard() *ThreadUpdate {
	tu.mutation.ClearBoard()
	return tu
}

// ClearOwner clears the "owner" edge to the User entity.
func (tu *ThreadUpdate) ClearOwner() *ThreadUpdate {
	tu.mutation.ClearOwner()
	return tu
}

// ClearComments clears all "comments" edges to the ThreadComment entity.
func (tu *ThreadUpdate) ClearComments() *ThreadUpdate {
	tu.mutation.ClearComments()
	return tu
}

// RemoveCommentIDs removes the "comments" edge to ThreadComment entities by IDs.
func (tu *ThreadUpdate) RemoveCommentIDs(ids ...int) *ThreadUpdate {
	tu.mutation.RemoveCommentIDs(ids...)
	return tu
}

// RemoveComments removes "comments" edges to ThreadComment entities.
func (tu *ThreadUpdate) RemoveComments(t ...*ThreadComment) *ThreadUpdate {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return tu.RemoveCommentIDs(ids...)
}

// ClearTags clears all "tags" edges to the Tag entity.
func (tu *ThreadUpdate) ClearTags() *ThreadUpdate {
	tu.mutation.ClearTags()
	return tu
}

// RemoveTagIDs removes the "tags" edge to Tag entities by IDs.
func (tu *ThreadUpdate) RemoveTagIDs(ids ...int) *ThreadUpdate {
	tu.mutation.RemoveTagIDs(ids...)
	return tu
}

// RemoveTags removes "tags" edges to Tag entities.
func (tu *ThreadUpdate) RemoveTags(t ...*Tag) *ThreadUpdate {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return tu.RemoveTagIDs(ids...)
}

// ClearLikedUsers clears all "liked_users" edges to the User entity.
func (tu *ThreadUpdate) ClearLikedUsers() *ThreadUpdate {
	tu.mutation.ClearLikedUsers()
	return tu
}

// RemoveLikedUserIDs removes the "liked_users" edge to User entities by IDs.
func (tu *ThreadUpdate) RemoveLikedUserIDs(ids ...int) *ThreadUpdate {
	tu.mutation.RemoveLikedUserIDs(ids...)
	return tu
}

// RemoveLikedUsers removes "liked_users" edges to User entities.
func (tu *ThreadUpdate) RemoveLikedUsers(u ...*User) *ThreadUpdate {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return tu.RemoveLikedUserIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (tu *ThreadUpdate) Save(ctx context.Context) (int, error) {
	tu.defaults()
	return withHooks(ctx, tu.sqlSave, tu.mutation, tu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (tu *ThreadUpdate) SaveX(ctx context.Context) int {
	affected, err := tu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (tu *ThreadUpdate) Exec(ctx context.Context) error {
	_, err := tu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tu *ThreadUpdate) ExecX(ctx context.Context) {
	if err := tu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (tu *ThreadUpdate) defaults() {
	if _, ok := tu.mutation.UpdatedAt(); !ok {
		v := thread.UpdateDefaultUpdatedAt()
		tu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (tu *ThreadUpdate) check() error {
	if v, ok := tu.mutation.Title(); ok {
		if err := thread.TitleValidator(v); err != nil {
			return &ValidationError{Name: "title", err: fmt.Errorf(`ent: validator failed for field "Thread.title": %w`, err)}
		}
	}
	if v, ok := tu.mutation.IPAddress(); ok {
		if err := thread.IPAddressValidator(v); err != nil {
			return &ValidationError{Name: "ip_address", err: fmt.Errorf(`ent: validator failed for field "Thread.ip_address": %w`, err)}
		}
	}
	if _, ok := tu.mutation.BoardID(); tu.mutation.BoardCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Thread.board"`)
	}
	if _, ok := tu.mutation.OwnerID(); tu.mutation.OwnerCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Thread.owner"`)
	}
	return nil
}

func (tu *ThreadUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := tu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(thread.Table, thread.Columns, sqlgraph.NewFieldSpec(thread.FieldID, field.TypeInt))
	if ps := tu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tu.mutation.Title(); ok {
		_spec.SetField(thread.FieldTitle, field.TypeString, value)
	}
	if value, ok := tu.mutation.Description(); ok {
		_spec.SetField(thread.FieldDescription, field.TypeString, value)
	}
	if tu.mutation.DescriptionCleared() {
		_spec.ClearField(thread.FieldDescription, field.TypeString)
	}
	if value, ok := tu.mutation.ThumbnailURL(); ok {
		_spec.SetField(thread.FieldThumbnailURL, field.TypeString, value)
	}
	if tu.mutation.ThumbnailURLCleared() {
		_spec.ClearField(thread.FieldThumbnailURL, field.TypeString)
	}
	if value, ok := tu.mutation.IPAddress(); ok {
		_spec.SetField(thread.FieldIPAddress, field.TypeString, value)
	}
	if value, ok := tu.mutation.Status(); ok {
		_spec.SetField(thread.FieldStatus, field.TypeInt, value)
	}
	if value, ok := tu.mutation.AddedStatus(); ok {
		_spec.AddField(thread.FieldStatus, field.TypeInt, value)
	}
	if value, ok := tu.mutation.CreatedAt(); ok {
		_spec.SetField(thread.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := tu.mutation.UpdatedAt(); ok {
		_spec.SetField(thread.FieldUpdatedAt, field.TypeTime, value)
	}
	if tu.mutation.BoardCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   thread.BoardTable,
			Columns: []string{thread.BoardColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(board.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tu.mutation.BoardIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   thread.BoardTable,
			Columns: []string{thread.BoardColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(board.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tu.mutation.OwnerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   thread.OwnerTable,
			Columns: []string{thread.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tu.mutation.OwnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   thread.OwnerTable,
			Columns: []string{thread.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tu.mutation.CommentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   thread.CommentsTable,
			Columns: []string{thread.CommentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(threadcomment.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tu.mutation.RemovedCommentsIDs(); len(nodes) > 0 && !tu.mutation.CommentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   thread.CommentsTable,
			Columns: []string{thread.CommentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(threadcomment.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tu.mutation.CommentsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   thread.CommentsTable,
			Columns: []string{thread.CommentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(threadcomment.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tu.mutation.TagsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   thread.TagsTable,
			Columns: thread.TagsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tag.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tu.mutation.RemovedTagsIDs(); len(nodes) > 0 && !tu.mutation.TagsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   thread.TagsTable,
			Columns: thread.TagsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tag.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tu.mutation.TagsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   thread.TagsTable,
			Columns: thread.TagsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tag.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tu.mutation.LikedUsersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   thread.LikedUsersTable,
			Columns: thread.LikedUsersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		createE := &UserThreadLikeCreate{config: tu.config, mutation: newUserThreadLikeMutation(tu.config, OpCreate)}
		createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tu.mutation.RemovedLikedUsersIDs(); len(nodes) > 0 && !tu.mutation.LikedUsersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   thread.LikedUsersTable,
			Columns: thread.LikedUsersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		createE := &UserThreadLikeCreate{config: tu.config, mutation: newUserThreadLikeMutation(tu.config, OpCreate)}
		createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tu.mutation.LikedUsersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   thread.LikedUsersTable,
			Columns: thread.LikedUsersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		createE := &UserThreadLikeCreate{config: tu.config, mutation: newUserThreadLikeMutation(tu.config, OpCreate)}
		createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, tu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{thread.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	tu.mutation.done = true
	return n, nil
}

// ThreadUpdateOne is the builder for updating a single Thread entity.
type ThreadUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ThreadMutation
}

// SetBoardID sets the "board_id" field.
func (tuo *ThreadUpdateOne) SetBoardID(i int) *ThreadUpdateOne {
	tuo.mutation.SetBoardID(i)
	return tuo
}

// SetNillableBoardID sets the "board_id" field if the given value is not nil.
func (tuo *ThreadUpdateOne) SetNillableBoardID(i *int) *ThreadUpdateOne {
	if i != nil {
		tuo.SetBoardID(*i)
	}
	return tuo
}

// SetUserID sets the "user_id" field.
func (tuo *ThreadUpdateOne) SetUserID(i int) *ThreadUpdateOne {
	tuo.mutation.SetUserID(i)
	return tuo
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (tuo *ThreadUpdateOne) SetNillableUserID(i *int) *ThreadUpdateOne {
	if i != nil {
		tuo.SetUserID(*i)
	}
	return tuo
}

// SetTitle sets the "title" field.
func (tuo *ThreadUpdateOne) SetTitle(s string) *ThreadUpdateOne {
	tuo.mutation.SetTitle(s)
	return tuo
}

// SetNillableTitle sets the "title" field if the given value is not nil.
func (tuo *ThreadUpdateOne) SetNillableTitle(s *string) *ThreadUpdateOne {
	if s != nil {
		tuo.SetTitle(*s)
	}
	return tuo
}

// SetDescription sets the "description" field.
func (tuo *ThreadUpdateOne) SetDescription(s string) *ThreadUpdateOne {
	tuo.mutation.SetDescription(s)
	return tuo
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (tuo *ThreadUpdateOne) SetNillableDescription(s *string) *ThreadUpdateOne {
	if s != nil {
		tuo.SetDescription(*s)
	}
	return tuo
}

// ClearDescription clears the value of the "description" field.
func (tuo *ThreadUpdateOne) ClearDescription() *ThreadUpdateOne {
	tuo.mutation.ClearDescription()
	return tuo
}

// SetThumbnailURL sets the "thumbnail_url" field.
func (tuo *ThreadUpdateOne) SetThumbnailURL(s string) *ThreadUpdateOne {
	tuo.mutation.SetThumbnailURL(s)
	return tuo
}

// SetNillableThumbnailURL sets the "thumbnail_url" field if the given value is not nil.
func (tuo *ThreadUpdateOne) SetNillableThumbnailURL(s *string) *ThreadUpdateOne {
	if s != nil {
		tuo.SetThumbnailURL(*s)
	}
	return tuo
}

// ClearThumbnailURL clears the value of the "thumbnail_url" field.
func (tuo *ThreadUpdateOne) ClearThumbnailURL() *ThreadUpdateOne {
	tuo.mutation.ClearThumbnailURL()
	return tuo
}

// SetIPAddress sets the "ip_address" field.
func (tuo *ThreadUpdateOne) SetIPAddress(s string) *ThreadUpdateOne {
	tuo.mutation.SetIPAddress(s)
	return tuo
}

// SetNillableIPAddress sets the "ip_address" field if the given value is not nil.
func (tuo *ThreadUpdateOne) SetNillableIPAddress(s *string) *ThreadUpdateOne {
	if s != nil {
		tuo.SetIPAddress(*s)
	}
	return tuo
}

// SetStatus sets the "status" field.
func (tuo *ThreadUpdateOne) SetStatus(i int) *ThreadUpdateOne {
	tuo.mutation.ResetStatus()
	tuo.mutation.SetStatus(i)
	return tuo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (tuo *ThreadUpdateOne) SetNillableStatus(i *int) *ThreadUpdateOne {
	if i != nil {
		tuo.SetStatus(*i)
	}
	return tuo
}

// AddStatus adds i to the "status" field.
func (tuo *ThreadUpdateOne) AddStatus(i int) *ThreadUpdateOne {
	tuo.mutation.AddStatus(i)
	return tuo
}

// SetCreatedAt sets the "created_at" field.
func (tuo *ThreadUpdateOne) SetCreatedAt(t time.Time) *ThreadUpdateOne {
	tuo.mutation.SetCreatedAt(t)
	return tuo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (tuo *ThreadUpdateOne) SetNillableCreatedAt(t *time.Time) *ThreadUpdateOne {
	if t != nil {
		tuo.SetCreatedAt(*t)
	}
	return tuo
}

// SetUpdatedAt sets the "updated_at" field.
func (tuo *ThreadUpdateOne) SetUpdatedAt(t time.Time) *ThreadUpdateOne {
	tuo.mutation.SetUpdatedAt(t)
	return tuo
}

// SetBoard sets the "board" edge to the Board entity.
func (tuo *ThreadUpdateOne) SetBoard(b *Board) *ThreadUpdateOne {
	return tuo.SetBoardID(b.ID)
}

// SetOwnerID sets the "owner" edge to the User entity by ID.
func (tuo *ThreadUpdateOne) SetOwnerID(id int) *ThreadUpdateOne {
	tuo.mutation.SetOwnerID(id)
	return tuo
}

// SetOwner sets the "owner" edge to the User entity.
func (tuo *ThreadUpdateOne) SetOwner(u *User) *ThreadUpdateOne {
	return tuo.SetOwnerID(u.ID)
}

// AddCommentIDs adds the "comments" edge to the ThreadComment entity by IDs.
func (tuo *ThreadUpdateOne) AddCommentIDs(ids ...int) *ThreadUpdateOne {
	tuo.mutation.AddCommentIDs(ids...)
	return tuo
}

// AddComments adds the "comments" edges to the ThreadComment entity.
func (tuo *ThreadUpdateOne) AddComments(t ...*ThreadComment) *ThreadUpdateOne {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return tuo.AddCommentIDs(ids...)
}

// AddTagIDs adds the "tags" edge to the Tag entity by IDs.
func (tuo *ThreadUpdateOne) AddTagIDs(ids ...int) *ThreadUpdateOne {
	tuo.mutation.AddTagIDs(ids...)
	return tuo
}

// AddTags adds the "tags" edges to the Tag entity.
func (tuo *ThreadUpdateOne) AddTags(t ...*Tag) *ThreadUpdateOne {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return tuo.AddTagIDs(ids...)
}

// AddLikedUserIDs adds the "liked_users" edge to the User entity by IDs.
func (tuo *ThreadUpdateOne) AddLikedUserIDs(ids ...int) *ThreadUpdateOne {
	tuo.mutation.AddLikedUserIDs(ids...)
	return tuo
}

// AddLikedUsers adds the "liked_users" edges to the User entity.
func (tuo *ThreadUpdateOne) AddLikedUsers(u ...*User) *ThreadUpdateOne {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return tuo.AddLikedUserIDs(ids...)
}

// Mutation returns the ThreadMutation object of the builder.
func (tuo *ThreadUpdateOne) Mutation() *ThreadMutation {
	return tuo.mutation
}

// ClearBoard clears the "board" edge to the Board entity.
func (tuo *ThreadUpdateOne) ClearBoard() *ThreadUpdateOne {
	tuo.mutation.ClearBoard()
	return tuo
}

// ClearOwner clears the "owner" edge to the User entity.
func (tuo *ThreadUpdateOne) ClearOwner() *ThreadUpdateOne {
	tuo.mutation.ClearOwner()
	return tuo
}

// ClearComments clears all "comments" edges to the ThreadComment entity.
func (tuo *ThreadUpdateOne) ClearComments() *ThreadUpdateOne {
	tuo.mutation.ClearComments()
	return tuo
}

// RemoveCommentIDs removes the "comments" edge to ThreadComment entities by IDs.
func (tuo *ThreadUpdateOne) RemoveCommentIDs(ids ...int) *ThreadUpdateOne {
	tuo.mutation.RemoveCommentIDs(ids...)
	return tuo
}

// RemoveComments removes "comments" edges to ThreadComment entities.
func (tuo *ThreadUpdateOne) RemoveComments(t ...*ThreadComment) *ThreadUpdateOne {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return tuo.RemoveCommentIDs(ids...)
}

// ClearTags clears all "tags" edges to the Tag entity.
func (tuo *ThreadUpdateOne) ClearTags() *ThreadUpdateOne {
	tuo.mutation.ClearTags()
	return tuo
}

// RemoveTagIDs removes the "tags" edge to Tag entities by IDs.
func (tuo *ThreadUpdateOne) RemoveTagIDs(ids ...int) *ThreadUpdateOne {
	tuo.mutation.RemoveTagIDs(ids...)
	return tuo
}

// RemoveTags removes "tags" edges to Tag entities.
func (tuo *ThreadUpdateOne) RemoveTags(t ...*Tag) *ThreadUpdateOne {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return tuo.RemoveTagIDs(ids...)
}

// ClearLikedUsers clears all "liked_users" edges to the User entity.
func (tuo *ThreadUpdateOne) ClearLikedUsers() *ThreadUpdateOne {
	tuo.mutation.ClearLikedUsers()
	return tuo
}

// RemoveLikedUserIDs removes the "liked_users" edge to User entities by IDs.
func (tuo *ThreadUpdateOne) RemoveLikedUserIDs(ids ...int) *ThreadUpdateOne {
	tuo.mutation.RemoveLikedUserIDs(ids...)
	return tuo
}

// RemoveLikedUsers removes "liked_users" edges to User entities.
func (tuo *ThreadUpdateOne) RemoveLikedUsers(u ...*User) *ThreadUpdateOne {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return tuo.RemoveLikedUserIDs(ids...)
}

// Where appends a list predicates to the ThreadUpdate builder.
func (tuo *ThreadUpdateOne) Where(ps ...predicate.Thread) *ThreadUpdateOne {
	tuo.mutation.Where(ps...)
	return tuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (tuo *ThreadUpdateOne) Select(field string, fields ...string) *ThreadUpdateOne {
	tuo.fields = append([]string{field}, fields...)
	return tuo
}

// Save executes the query and returns the updated Thread entity.
func (tuo *ThreadUpdateOne) Save(ctx context.Context) (*Thread, error) {
	tuo.defaults()
	return withHooks(ctx, tuo.sqlSave, tuo.mutation, tuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (tuo *ThreadUpdateOne) SaveX(ctx context.Context) *Thread {
	node, err := tuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (tuo *ThreadUpdateOne) Exec(ctx context.Context) error {
	_, err := tuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tuo *ThreadUpdateOne) ExecX(ctx context.Context) {
	if err := tuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (tuo *ThreadUpdateOne) defaults() {
	if _, ok := tuo.mutation.UpdatedAt(); !ok {
		v := thread.UpdateDefaultUpdatedAt()
		tuo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (tuo *ThreadUpdateOne) check() error {
	if v, ok := tuo.mutation.Title(); ok {
		if err := thread.TitleValidator(v); err != nil {
			return &ValidationError{Name: "title", err: fmt.Errorf(`ent: validator failed for field "Thread.title": %w`, err)}
		}
	}
	if v, ok := tuo.mutation.IPAddress(); ok {
		if err := thread.IPAddressValidator(v); err != nil {
			return &ValidationError{Name: "ip_address", err: fmt.Errorf(`ent: validator failed for field "Thread.ip_address": %w`, err)}
		}
	}
	if _, ok := tuo.mutation.BoardID(); tuo.mutation.BoardCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Thread.board"`)
	}
	if _, ok := tuo.mutation.OwnerID(); tuo.mutation.OwnerCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Thread.owner"`)
	}
	return nil
}

func (tuo *ThreadUpdateOne) sqlSave(ctx context.Context) (_node *Thread, err error) {
	if err := tuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(thread.Table, thread.Columns, sqlgraph.NewFieldSpec(thread.FieldID, field.TypeInt))
	id, ok := tuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Thread.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := tuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, thread.FieldID)
		for _, f := range fields {
			if !thread.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != thread.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := tuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tuo.mutation.Title(); ok {
		_spec.SetField(thread.FieldTitle, field.TypeString, value)
	}
	if value, ok := tuo.mutation.Description(); ok {
		_spec.SetField(thread.FieldDescription, field.TypeString, value)
	}
	if tuo.mutation.DescriptionCleared() {
		_spec.ClearField(thread.FieldDescription, field.TypeString)
	}
	if value, ok := tuo.mutation.ThumbnailURL(); ok {
		_spec.SetField(thread.FieldThumbnailURL, field.TypeString, value)
	}
	if tuo.mutation.ThumbnailURLCleared() {
		_spec.ClearField(thread.FieldThumbnailURL, field.TypeString)
	}
	if value, ok := tuo.mutation.IPAddress(); ok {
		_spec.SetField(thread.FieldIPAddress, field.TypeString, value)
	}
	if value, ok := tuo.mutation.Status(); ok {
		_spec.SetField(thread.FieldStatus, field.TypeInt, value)
	}
	if value, ok := tuo.mutation.AddedStatus(); ok {
		_spec.AddField(thread.FieldStatus, field.TypeInt, value)
	}
	if value, ok := tuo.mutation.CreatedAt(); ok {
		_spec.SetField(thread.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := tuo.mutation.UpdatedAt(); ok {
		_spec.SetField(thread.FieldUpdatedAt, field.TypeTime, value)
	}
	if tuo.mutation.BoardCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   thread.BoardTable,
			Columns: []string{thread.BoardColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(board.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tuo.mutation.BoardIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   thread.BoardTable,
			Columns: []string{thread.BoardColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(board.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tuo.mutation.OwnerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   thread.OwnerTable,
			Columns: []string{thread.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tuo.mutation.OwnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   thread.OwnerTable,
			Columns: []string{thread.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tuo.mutation.CommentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   thread.CommentsTable,
			Columns: []string{thread.CommentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(threadcomment.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tuo.mutation.RemovedCommentsIDs(); len(nodes) > 0 && !tuo.mutation.CommentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   thread.CommentsTable,
			Columns: []string{thread.CommentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(threadcomment.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tuo.mutation.CommentsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   thread.CommentsTable,
			Columns: []string{thread.CommentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(threadcomment.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tuo.mutation.TagsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   thread.TagsTable,
			Columns: thread.TagsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tag.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tuo.mutation.RemovedTagsIDs(); len(nodes) > 0 && !tuo.mutation.TagsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   thread.TagsTable,
			Columns: thread.TagsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tag.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tuo.mutation.TagsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   thread.TagsTable,
			Columns: thread.TagsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tag.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tuo.mutation.LikedUsersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   thread.LikedUsersTable,
			Columns: thread.LikedUsersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		createE := &UserThreadLikeCreate{config: tuo.config, mutation: newUserThreadLikeMutation(tuo.config, OpCreate)}
		createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tuo.mutation.RemovedLikedUsersIDs(); len(nodes) > 0 && !tuo.mutation.LikedUsersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   thread.LikedUsersTable,
			Columns: thread.LikedUsersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		createE := &UserThreadLikeCreate{config: tuo.config, mutation: newUserThreadLikeMutation(tuo.config, OpCreate)}
		createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tuo.mutation.LikedUsersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   thread.LikedUsersTable,
			Columns: thread.LikedUsersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		createE := &UserThreadLikeCreate{config: tuo.config, mutation: newUserThreadLikeMutation(tuo.config, OpCreate)}
		createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Thread{config: tuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, tuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{thread.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	tuo.mutation.done = true
	return _node, nil
}
