// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"server/infrastructure/ent/predicate"
	"server/infrastructure/ent/thread"
	"server/infrastructure/ent/user"
	"server/infrastructure/ent/userthreadsubscription"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// UserThreadSubscriptionUpdate is the builder for updating UserThreadSubscription entities.
type UserThreadSubscriptionUpdate struct {
	config
	hooks    []Hook
	mutation *UserThreadSubscriptionMutation
}

// Where appends a list predicates to the UserThreadSubscriptionUpdate builder.
func (utsu *UserThreadSubscriptionUpdate) Where(ps ...predicate.UserThreadSubscription) *UserThreadSubscriptionUpdate {
	utsu.mutation.Where(ps...)
	return utsu
}

// SetUserID sets the "user_id" field.
func (utsu *UserThreadSubscriptionUpdate) SetUserID(i int) *UserThreadSubscriptionUpdate {
	utsu.mutation.SetUserID(i)
	return utsu
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (utsu *UserThreadSubscriptionUpdate) SetNillableUserID(i *int) *UserThreadSubscriptionUpdate {
	if i != nil {
		utsu.SetUserID(*i)
	}
	return utsu
}

// SetThreadID sets the "thread_id" field.
func (utsu *UserThreadSubscriptionUpdate) SetThreadID(i int) *UserThreadSubscriptionUpdate {
	utsu.mutation.SetThreadID(i)
	return utsu
}

// SetNillableThreadID sets the "thread_id" field if the given value is not nil.
func (utsu *UserThreadSubscriptionUpdate) SetNillableThreadID(i *int) *UserThreadSubscriptionUpdate {
	if i != nil {
		utsu.SetThreadID(*i)
	}
	return utsu
}

// SetIsNotified sets the "is_notified" field.
func (utsu *UserThreadSubscriptionUpdate) SetIsNotified(b bool) *UserThreadSubscriptionUpdate {
	utsu.mutation.SetIsNotified(b)
	return utsu
}

// SetNillableIsNotified sets the "is_notified" field if the given value is not nil.
func (utsu *UserThreadSubscriptionUpdate) SetNillableIsNotified(b *bool) *UserThreadSubscriptionUpdate {
	if b != nil {
		utsu.SetIsNotified(*b)
	}
	return utsu
}

// SetIsChecked sets the "is_checked" field.
func (utsu *UserThreadSubscriptionUpdate) SetIsChecked(b bool) *UserThreadSubscriptionUpdate {
	utsu.mutation.SetIsChecked(b)
	return utsu
}

// SetNillableIsChecked sets the "is_checked" field if the given value is not nil.
func (utsu *UserThreadSubscriptionUpdate) SetNillableIsChecked(b *bool) *UserThreadSubscriptionUpdate {
	if b != nil {
		utsu.SetIsChecked(*b)
	}
	return utsu
}

// SetSubscribedAt sets the "subscribed_at" field.
func (utsu *UserThreadSubscriptionUpdate) SetSubscribedAt(t time.Time) *UserThreadSubscriptionUpdate {
	utsu.mutation.SetSubscribedAt(t)
	return utsu
}

// SetNillableSubscribedAt sets the "subscribed_at" field if the given value is not nil.
func (utsu *UserThreadSubscriptionUpdate) SetNillableSubscribedAt(t *time.Time) *UserThreadSubscriptionUpdate {
	if t != nil {
		utsu.SetSubscribedAt(*t)
	}
	return utsu
}

// SetUser sets the "user" edge to the User entity.
func (utsu *UserThreadSubscriptionUpdate) SetUser(u *User) *UserThreadSubscriptionUpdate {
	return utsu.SetUserID(u.ID)
}

// SetThread sets the "thread" edge to the Thread entity.
func (utsu *UserThreadSubscriptionUpdate) SetThread(t *Thread) *UserThreadSubscriptionUpdate {
	return utsu.SetThreadID(t.ID)
}

// Mutation returns the UserThreadSubscriptionMutation object of the builder.
func (utsu *UserThreadSubscriptionUpdate) Mutation() *UserThreadSubscriptionMutation {
	return utsu.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (utsu *UserThreadSubscriptionUpdate) ClearUser() *UserThreadSubscriptionUpdate {
	utsu.mutation.ClearUser()
	return utsu
}

// ClearThread clears the "thread" edge to the Thread entity.
func (utsu *UserThreadSubscriptionUpdate) ClearThread() *UserThreadSubscriptionUpdate {
	utsu.mutation.ClearThread()
	return utsu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (utsu *UserThreadSubscriptionUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, utsu.sqlSave, utsu.mutation, utsu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (utsu *UserThreadSubscriptionUpdate) SaveX(ctx context.Context) int {
	affected, err := utsu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (utsu *UserThreadSubscriptionUpdate) Exec(ctx context.Context) error {
	_, err := utsu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (utsu *UserThreadSubscriptionUpdate) ExecX(ctx context.Context) {
	if err := utsu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (utsu *UserThreadSubscriptionUpdate) check() error {
	if _, ok := utsu.mutation.UserID(); utsu.mutation.UserCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "UserThreadSubscription.user"`)
	}
	if _, ok := utsu.mutation.ThreadID(); utsu.mutation.ThreadCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "UserThreadSubscription.thread"`)
	}
	return nil
}

func (utsu *UserThreadSubscriptionUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := utsu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(userthreadsubscription.Table, userthreadsubscription.Columns, sqlgraph.NewFieldSpec(userthreadsubscription.FieldUserID, field.TypeInt), sqlgraph.NewFieldSpec(userthreadsubscription.FieldThreadID, field.TypeInt))
	if ps := utsu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := utsu.mutation.IsNotified(); ok {
		_spec.SetField(userthreadsubscription.FieldIsNotified, field.TypeBool, value)
	}
	if value, ok := utsu.mutation.IsChecked(); ok {
		_spec.SetField(userthreadsubscription.FieldIsChecked, field.TypeBool, value)
	}
	if value, ok := utsu.mutation.SubscribedAt(); ok {
		_spec.SetField(userthreadsubscription.FieldSubscribedAt, field.TypeTime, value)
	}
	if utsu.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   userthreadsubscription.UserTable,
			Columns: []string{userthreadsubscription.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := utsu.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   userthreadsubscription.UserTable,
			Columns: []string{userthreadsubscription.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if utsu.mutation.ThreadCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   userthreadsubscription.ThreadTable,
			Columns: []string{userthreadsubscription.ThreadColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(thread.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := utsu.mutation.ThreadIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   userthreadsubscription.ThreadTable,
			Columns: []string{userthreadsubscription.ThreadColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(thread.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, utsu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{userthreadsubscription.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	utsu.mutation.done = true
	return n, nil
}

// UserThreadSubscriptionUpdateOne is the builder for updating a single UserThreadSubscription entity.
type UserThreadSubscriptionUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *UserThreadSubscriptionMutation
}

// SetUserID sets the "user_id" field.
func (utsuo *UserThreadSubscriptionUpdateOne) SetUserID(i int) *UserThreadSubscriptionUpdateOne {
	utsuo.mutation.SetUserID(i)
	return utsuo
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (utsuo *UserThreadSubscriptionUpdateOne) SetNillableUserID(i *int) *UserThreadSubscriptionUpdateOne {
	if i != nil {
		utsuo.SetUserID(*i)
	}
	return utsuo
}

// SetThreadID sets the "thread_id" field.
func (utsuo *UserThreadSubscriptionUpdateOne) SetThreadID(i int) *UserThreadSubscriptionUpdateOne {
	utsuo.mutation.SetThreadID(i)
	return utsuo
}

// SetNillableThreadID sets the "thread_id" field if the given value is not nil.
func (utsuo *UserThreadSubscriptionUpdateOne) SetNillableThreadID(i *int) *UserThreadSubscriptionUpdateOne {
	if i != nil {
		utsuo.SetThreadID(*i)
	}
	return utsuo
}

// SetIsNotified sets the "is_notified" field.
func (utsuo *UserThreadSubscriptionUpdateOne) SetIsNotified(b bool) *UserThreadSubscriptionUpdateOne {
	utsuo.mutation.SetIsNotified(b)
	return utsuo
}

// SetNillableIsNotified sets the "is_notified" field if the given value is not nil.
func (utsuo *UserThreadSubscriptionUpdateOne) SetNillableIsNotified(b *bool) *UserThreadSubscriptionUpdateOne {
	if b != nil {
		utsuo.SetIsNotified(*b)
	}
	return utsuo
}

// SetIsChecked sets the "is_checked" field.
func (utsuo *UserThreadSubscriptionUpdateOne) SetIsChecked(b bool) *UserThreadSubscriptionUpdateOne {
	utsuo.mutation.SetIsChecked(b)
	return utsuo
}

// SetNillableIsChecked sets the "is_checked" field if the given value is not nil.
func (utsuo *UserThreadSubscriptionUpdateOne) SetNillableIsChecked(b *bool) *UserThreadSubscriptionUpdateOne {
	if b != nil {
		utsuo.SetIsChecked(*b)
	}
	return utsuo
}

// SetSubscribedAt sets the "subscribed_at" field.
func (utsuo *UserThreadSubscriptionUpdateOne) SetSubscribedAt(t time.Time) *UserThreadSubscriptionUpdateOne {
	utsuo.mutation.SetSubscribedAt(t)
	return utsuo
}

// SetNillableSubscribedAt sets the "subscribed_at" field if the given value is not nil.
func (utsuo *UserThreadSubscriptionUpdateOne) SetNillableSubscribedAt(t *time.Time) *UserThreadSubscriptionUpdateOne {
	if t != nil {
		utsuo.SetSubscribedAt(*t)
	}
	return utsuo
}

// SetUser sets the "user" edge to the User entity.
func (utsuo *UserThreadSubscriptionUpdateOne) SetUser(u *User) *UserThreadSubscriptionUpdateOne {
	return utsuo.SetUserID(u.ID)
}

// SetThread sets the "thread" edge to the Thread entity.
func (utsuo *UserThreadSubscriptionUpdateOne) SetThread(t *Thread) *UserThreadSubscriptionUpdateOne {
	return utsuo.SetThreadID(t.ID)
}

// Mutation returns the UserThreadSubscriptionMutation object of the builder.
func (utsuo *UserThreadSubscriptionUpdateOne) Mutation() *UserThreadSubscriptionMutation {
	return utsuo.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (utsuo *UserThreadSubscriptionUpdateOne) ClearUser() *UserThreadSubscriptionUpdateOne {
	utsuo.mutation.ClearUser()
	return utsuo
}

// ClearThread clears the "thread" edge to the Thread entity.
func (utsuo *UserThreadSubscriptionUpdateOne) ClearThread() *UserThreadSubscriptionUpdateOne {
	utsuo.mutation.ClearThread()
	return utsuo
}

// Where appends a list predicates to the UserThreadSubscriptionUpdate builder.
func (utsuo *UserThreadSubscriptionUpdateOne) Where(ps ...predicate.UserThreadSubscription) *UserThreadSubscriptionUpdateOne {
	utsuo.mutation.Where(ps...)
	return utsuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (utsuo *UserThreadSubscriptionUpdateOne) Select(field string, fields ...string) *UserThreadSubscriptionUpdateOne {
	utsuo.fields = append([]string{field}, fields...)
	return utsuo
}

// Save executes the query and returns the updated UserThreadSubscription entity.
func (utsuo *UserThreadSubscriptionUpdateOne) Save(ctx context.Context) (*UserThreadSubscription, error) {
	return withHooks(ctx, utsuo.sqlSave, utsuo.mutation, utsuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (utsuo *UserThreadSubscriptionUpdateOne) SaveX(ctx context.Context) *UserThreadSubscription {
	node, err := utsuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (utsuo *UserThreadSubscriptionUpdateOne) Exec(ctx context.Context) error {
	_, err := utsuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (utsuo *UserThreadSubscriptionUpdateOne) ExecX(ctx context.Context) {
	if err := utsuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (utsuo *UserThreadSubscriptionUpdateOne) check() error {
	if _, ok := utsuo.mutation.UserID(); utsuo.mutation.UserCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "UserThreadSubscription.user"`)
	}
	if _, ok := utsuo.mutation.ThreadID(); utsuo.mutation.ThreadCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "UserThreadSubscription.thread"`)
	}
	return nil
}

func (utsuo *UserThreadSubscriptionUpdateOne) sqlSave(ctx context.Context) (_node *UserThreadSubscription, err error) {
	if err := utsuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(userthreadsubscription.Table, userthreadsubscription.Columns, sqlgraph.NewFieldSpec(userthreadsubscription.FieldUserID, field.TypeInt), sqlgraph.NewFieldSpec(userthreadsubscription.FieldThreadID, field.TypeInt))
	if id, ok := utsuo.mutation.UserID(); !ok {
		return nil, &ValidationError{Name: "user_id", err: errors.New(`ent: missing "UserThreadSubscription.user_id" for update`)}
	} else {
		_spec.Node.CompositeID[0].Value = id
	}
	if id, ok := utsuo.mutation.ThreadID(); !ok {
		return nil, &ValidationError{Name: "thread_id", err: errors.New(`ent: missing "UserThreadSubscription.thread_id" for update`)}
	} else {
		_spec.Node.CompositeID[1].Value = id
	}
	if fields := utsuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, len(fields))
		for i, f := range fields {
			if !userthreadsubscription.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			_spec.Node.Columns[i] = f
		}
	}
	if ps := utsuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := utsuo.mutation.IsNotified(); ok {
		_spec.SetField(userthreadsubscription.FieldIsNotified, field.TypeBool, value)
	}
	if value, ok := utsuo.mutation.IsChecked(); ok {
		_spec.SetField(userthreadsubscription.FieldIsChecked, field.TypeBool, value)
	}
	if value, ok := utsuo.mutation.SubscribedAt(); ok {
		_spec.SetField(userthreadsubscription.FieldSubscribedAt, field.TypeTime, value)
	}
	if utsuo.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   userthreadsubscription.UserTable,
			Columns: []string{userthreadsubscription.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := utsuo.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   userthreadsubscription.UserTable,
			Columns: []string{userthreadsubscription.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if utsuo.mutation.ThreadCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   userthreadsubscription.ThreadTable,
			Columns: []string{userthreadsubscription.ThreadColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(thread.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := utsuo.mutation.ThreadIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   userthreadsubscription.ThreadTable,
			Columns: []string{userthreadsubscription.ThreadColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(thread.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &UserThreadSubscription{config: utsuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, utsuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{userthreadsubscription.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	utsuo.mutation.done = true
	return _node, nil
}
