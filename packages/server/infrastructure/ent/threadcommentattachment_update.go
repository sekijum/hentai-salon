// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"server/infrastructure/ent/predicate"
	"server/infrastructure/ent/threadcomment"
	"server/infrastructure/ent/threadcommentattachment"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ThreadCommentAttachmentUpdate is the builder for updating ThreadCommentAttachment entities.
type ThreadCommentAttachmentUpdate struct {
	config
	hooks    []Hook
	mutation *ThreadCommentAttachmentMutation
}

// Where appends a list predicates to the ThreadCommentAttachmentUpdate builder.
func (tcau *ThreadCommentAttachmentUpdate) Where(ps ...predicate.ThreadCommentAttachment) *ThreadCommentAttachmentUpdate {
	tcau.mutation.Where(ps...)
	return tcau
}

// SetCommentID sets the "comment_id" field.
func (tcau *ThreadCommentAttachmentUpdate) SetCommentID(u uint64) *ThreadCommentAttachmentUpdate {
	tcau.mutation.SetCommentID(u)
	return tcau
}

// SetNillableCommentID sets the "comment_id" field if the given value is not nil.
func (tcau *ThreadCommentAttachmentUpdate) SetNillableCommentID(u *uint64) *ThreadCommentAttachmentUpdate {
	if u != nil {
		tcau.SetCommentID(*u)
	}
	return tcau
}

// SetURL sets the "url" field.
func (tcau *ThreadCommentAttachmentUpdate) SetURL(s string) *ThreadCommentAttachmentUpdate {
	tcau.mutation.SetURL(s)
	return tcau
}

// SetNillableURL sets the "url" field if the given value is not nil.
func (tcau *ThreadCommentAttachmentUpdate) SetNillableURL(s *string) *ThreadCommentAttachmentUpdate {
	if s != nil {
		tcau.SetURL(*s)
	}
	return tcau
}

// SetDisplayOrder sets the "display_order" field.
func (tcau *ThreadCommentAttachmentUpdate) SetDisplayOrder(i int) *ThreadCommentAttachmentUpdate {
	tcau.mutation.ResetDisplayOrder()
	tcau.mutation.SetDisplayOrder(i)
	return tcau
}

// SetNillableDisplayOrder sets the "display_order" field if the given value is not nil.
func (tcau *ThreadCommentAttachmentUpdate) SetNillableDisplayOrder(i *int) *ThreadCommentAttachmentUpdate {
	if i != nil {
		tcau.SetDisplayOrder(*i)
	}
	return tcau
}

// AddDisplayOrder adds i to the "display_order" field.
func (tcau *ThreadCommentAttachmentUpdate) AddDisplayOrder(i int) *ThreadCommentAttachmentUpdate {
	tcau.mutation.AddDisplayOrder(i)
	return tcau
}

// SetType sets the "type" field.
func (tcau *ThreadCommentAttachmentUpdate) SetType(i int) *ThreadCommentAttachmentUpdate {
	tcau.mutation.ResetType()
	tcau.mutation.SetType(i)
	return tcau
}

// SetNillableType sets the "type" field if the given value is not nil.
func (tcau *ThreadCommentAttachmentUpdate) SetNillableType(i *int) *ThreadCommentAttachmentUpdate {
	if i != nil {
		tcau.SetType(*i)
	}
	return tcau
}

// AddType adds i to the "type" field.
func (tcau *ThreadCommentAttachmentUpdate) AddType(i int) *ThreadCommentAttachmentUpdate {
	tcau.mutation.AddType(i)
	return tcau
}

// SetCreatedAt sets the "created_at" field.
func (tcau *ThreadCommentAttachmentUpdate) SetCreatedAt(t time.Time) *ThreadCommentAttachmentUpdate {
	tcau.mutation.SetCreatedAt(t)
	return tcau
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (tcau *ThreadCommentAttachmentUpdate) SetNillableCreatedAt(t *time.Time) *ThreadCommentAttachmentUpdate {
	if t != nil {
		tcau.SetCreatedAt(*t)
	}
	return tcau
}

// SetComment sets the "comment" edge to the ThreadComment entity.
func (tcau *ThreadCommentAttachmentUpdate) SetComment(t *ThreadComment) *ThreadCommentAttachmentUpdate {
	return tcau.SetCommentID(t.ID)
}

// Mutation returns the ThreadCommentAttachmentMutation object of the builder.
func (tcau *ThreadCommentAttachmentUpdate) Mutation() *ThreadCommentAttachmentMutation {
	return tcau.mutation
}

// ClearComment clears the "comment" edge to the ThreadComment entity.
func (tcau *ThreadCommentAttachmentUpdate) ClearComment() *ThreadCommentAttachmentUpdate {
	tcau.mutation.ClearComment()
	return tcau
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (tcau *ThreadCommentAttachmentUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, tcau.sqlSave, tcau.mutation, tcau.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (tcau *ThreadCommentAttachmentUpdate) SaveX(ctx context.Context) int {
	affected, err := tcau.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (tcau *ThreadCommentAttachmentUpdate) Exec(ctx context.Context) error {
	_, err := tcau.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tcau *ThreadCommentAttachmentUpdate) ExecX(ctx context.Context) {
	if err := tcau.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (tcau *ThreadCommentAttachmentUpdate) check() error {
	if tcau.mutation.CommentCleared() && len(tcau.mutation.CommentIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "ThreadCommentAttachment.comment"`)
	}
	return nil
}

func (tcau *ThreadCommentAttachmentUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := tcau.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(threadcommentattachment.Table, threadcommentattachment.Columns, sqlgraph.NewFieldSpec(threadcommentattachment.FieldID, field.TypeInt))
	if ps := tcau.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tcau.mutation.URL(); ok {
		_spec.SetField(threadcommentattachment.FieldURL, field.TypeString, value)
	}
	if value, ok := tcau.mutation.DisplayOrder(); ok {
		_spec.SetField(threadcommentattachment.FieldDisplayOrder, field.TypeInt, value)
	}
	if value, ok := tcau.mutation.AddedDisplayOrder(); ok {
		_spec.AddField(threadcommentattachment.FieldDisplayOrder, field.TypeInt, value)
	}
	if value, ok := tcau.mutation.GetType(); ok {
		_spec.SetField(threadcommentattachment.FieldType, field.TypeInt, value)
	}
	if value, ok := tcau.mutation.AddedType(); ok {
		_spec.AddField(threadcommentattachment.FieldType, field.TypeInt, value)
	}
	if value, ok := tcau.mutation.CreatedAt(); ok {
		_spec.SetField(threadcommentattachment.FieldCreatedAt, field.TypeTime, value)
	}
	if tcau.mutation.CommentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   threadcommentattachment.CommentTable,
			Columns: []string{threadcommentattachment.CommentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(threadcomment.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tcau.mutation.CommentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   threadcommentattachment.CommentTable,
			Columns: []string{threadcommentattachment.CommentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(threadcomment.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, tcau.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{threadcommentattachment.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	tcau.mutation.done = true
	return n, nil
}

// ThreadCommentAttachmentUpdateOne is the builder for updating a single ThreadCommentAttachment entity.
type ThreadCommentAttachmentUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ThreadCommentAttachmentMutation
}

// SetCommentID sets the "comment_id" field.
func (tcauo *ThreadCommentAttachmentUpdateOne) SetCommentID(u uint64) *ThreadCommentAttachmentUpdateOne {
	tcauo.mutation.SetCommentID(u)
	return tcauo
}

// SetNillableCommentID sets the "comment_id" field if the given value is not nil.
func (tcauo *ThreadCommentAttachmentUpdateOne) SetNillableCommentID(u *uint64) *ThreadCommentAttachmentUpdateOne {
	if u != nil {
		tcauo.SetCommentID(*u)
	}
	return tcauo
}

// SetURL sets the "url" field.
func (tcauo *ThreadCommentAttachmentUpdateOne) SetURL(s string) *ThreadCommentAttachmentUpdateOne {
	tcauo.mutation.SetURL(s)
	return tcauo
}

// SetNillableURL sets the "url" field if the given value is not nil.
func (tcauo *ThreadCommentAttachmentUpdateOne) SetNillableURL(s *string) *ThreadCommentAttachmentUpdateOne {
	if s != nil {
		tcauo.SetURL(*s)
	}
	return tcauo
}

// SetDisplayOrder sets the "display_order" field.
func (tcauo *ThreadCommentAttachmentUpdateOne) SetDisplayOrder(i int) *ThreadCommentAttachmentUpdateOne {
	tcauo.mutation.ResetDisplayOrder()
	tcauo.mutation.SetDisplayOrder(i)
	return tcauo
}

// SetNillableDisplayOrder sets the "display_order" field if the given value is not nil.
func (tcauo *ThreadCommentAttachmentUpdateOne) SetNillableDisplayOrder(i *int) *ThreadCommentAttachmentUpdateOne {
	if i != nil {
		tcauo.SetDisplayOrder(*i)
	}
	return tcauo
}

// AddDisplayOrder adds i to the "display_order" field.
func (tcauo *ThreadCommentAttachmentUpdateOne) AddDisplayOrder(i int) *ThreadCommentAttachmentUpdateOne {
	tcauo.mutation.AddDisplayOrder(i)
	return tcauo
}

// SetType sets the "type" field.
func (tcauo *ThreadCommentAttachmentUpdateOne) SetType(i int) *ThreadCommentAttachmentUpdateOne {
	tcauo.mutation.ResetType()
	tcauo.mutation.SetType(i)
	return tcauo
}

// SetNillableType sets the "type" field if the given value is not nil.
func (tcauo *ThreadCommentAttachmentUpdateOne) SetNillableType(i *int) *ThreadCommentAttachmentUpdateOne {
	if i != nil {
		tcauo.SetType(*i)
	}
	return tcauo
}

// AddType adds i to the "type" field.
func (tcauo *ThreadCommentAttachmentUpdateOne) AddType(i int) *ThreadCommentAttachmentUpdateOne {
	tcauo.mutation.AddType(i)
	return tcauo
}

// SetCreatedAt sets the "created_at" field.
func (tcauo *ThreadCommentAttachmentUpdateOne) SetCreatedAt(t time.Time) *ThreadCommentAttachmentUpdateOne {
	tcauo.mutation.SetCreatedAt(t)
	return tcauo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (tcauo *ThreadCommentAttachmentUpdateOne) SetNillableCreatedAt(t *time.Time) *ThreadCommentAttachmentUpdateOne {
	if t != nil {
		tcauo.SetCreatedAt(*t)
	}
	return tcauo
}

// SetComment sets the "comment" edge to the ThreadComment entity.
func (tcauo *ThreadCommentAttachmentUpdateOne) SetComment(t *ThreadComment) *ThreadCommentAttachmentUpdateOne {
	return tcauo.SetCommentID(t.ID)
}

// Mutation returns the ThreadCommentAttachmentMutation object of the builder.
func (tcauo *ThreadCommentAttachmentUpdateOne) Mutation() *ThreadCommentAttachmentMutation {
	return tcauo.mutation
}

// ClearComment clears the "comment" edge to the ThreadComment entity.
func (tcauo *ThreadCommentAttachmentUpdateOne) ClearComment() *ThreadCommentAttachmentUpdateOne {
	tcauo.mutation.ClearComment()
	return tcauo
}

// Where appends a list predicates to the ThreadCommentAttachmentUpdate builder.
func (tcauo *ThreadCommentAttachmentUpdateOne) Where(ps ...predicate.ThreadCommentAttachment) *ThreadCommentAttachmentUpdateOne {
	tcauo.mutation.Where(ps...)
	return tcauo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (tcauo *ThreadCommentAttachmentUpdateOne) Select(field string, fields ...string) *ThreadCommentAttachmentUpdateOne {
	tcauo.fields = append([]string{field}, fields...)
	return tcauo
}

// Save executes the query and returns the updated ThreadCommentAttachment entity.
func (tcauo *ThreadCommentAttachmentUpdateOne) Save(ctx context.Context) (*ThreadCommentAttachment, error) {
	return withHooks(ctx, tcauo.sqlSave, tcauo.mutation, tcauo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (tcauo *ThreadCommentAttachmentUpdateOne) SaveX(ctx context.Context) *ThreadCommentAttachment {
	node, err := tcauo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (tcauo *ThreadCommentAttachmentUpdateOne) Exec(ctx context.Context) error {
	_, err := tcauo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tcauo *ThreadCommentAttachmentUpdateOne) ExecX(ctx context.Context) {
	if err := tcauo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (tcauo *ThreadCommentAttachmentUpdateOne) check() error {
	if tcauo.mutation.CommentCleared() && len(tcauo.mutation.CommentIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "ThreadCommentAttachment.comment"`)
	}
	return nil
}

func (tcauo *ThreadCommentAttachmentUpdateOne) sqlSave(ctx context.Context) (_node *ThreadCommentAttachment, err error) {
	if err := tcauo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(threadcommentattachment.Table, threadcommentattachment.Columns, sqlgraph.NewFieldSpec(threadcommentattachment.FieldID, field.TypeInt))
	id, ok := tcauo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "ThreadCommentAttachment.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := tcauo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, threadcommentattachment.FieldID)
		for _, f := range fields {
			if !threadcommentattachment.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != threadcommentattachment.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := tcauo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tcauo.mutation.URL(); ok {
		_spec.SetField(threadcommentattachment.FieldURL, field.TypeString, value)
	}
	if value, ok := tcauo.mutation.DisplayOrder(); ok {
		_spec.SetField(threadcommentattachment.FieldDisplayOrder, field.TypeInt, value)
	}
	if value, ok := tcauo.mutation.AddedDisplayOrder(); ok {
		_spec.AddField(threadcommentattachment.FieldDisplayOrder, field.TypeInt, value)
	}
	if value, ok := tcauo.mutation.GetType(); ok {
		_spec.SetField(threadcommentattachment.FieldType, field.TypeInt, value)
	}
	if value, ok := tcauo.mutation.AddedType(); ok {
		_spec.AddField(threadcommentattachment.FieldType, field.TypeInt, value)
	}
	if value, ok := tcauo.mutation.CreatedAt(); ok {
		_spec.SetField(threadcommentattachment.FieldCreatedAt, field.TypeTime, value)
	}
	if tcauo.mutation.CommentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   threadcommentattachment.CommentTable,
			Columns: []string{threadcommentattachment.CommentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(threadcomment.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tcauo.mutation.CommentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   threadcommentattachment.CommentTable,
			Columns: []string{threadcommentattachment.CommentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(threadcomment.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &ThreadCommentAttachment{config: tcauo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, tcauo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{threadcommentattachment.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	tcauo.mutation.done = true
	return _node, nil
}
