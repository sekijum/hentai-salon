// Code generated by ent, DO NOT EDIT.

package usercommentsubscription

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the usercommentsubscription type in the database.
	Label = "user_comment_subscription"
	// FieldUserID holds the string denoting the user_id field in the database.
	FieldUserID = "user_id"
	// FieldCommentID holds the string denoting the comment_id field in the database.
	FieldCommentID = "comment_id"
	// FieldIsNotified holds the string denoting the is_notified field in the database.
	FieldIsNotified = "is_notified"
	// FieldIsChecked holds the string denoting the is_checked field in the database.
	FieldIsChecked = "is_checked"
	// FieldSubscribedAt holds the string denoting the subscribed_at field in the database.
	FieldSubscribedAt = "subscribed_at"
	// EdgeUser holds the string denoting the user edge name in mutations.
	EdgeUser = "user"
	// EdgeComment holds the string denoting the comment edge name in mutations.
	EdgeComment = "comment"
	// UserFieldID holds the string denoting the ID field of the User.
	UserFieldID = "id"
	// ThreadCommentFieldID holds the string denoting the ID field of the ThreadComment.
	ThreadCommentFieldID = "id"
	// Table holds the table name of the usercommentsubscription in the database.
	Table = "user_comment_subscriptions"
	// UserTable is the table that holds the user relation/edge.
	UserTable = "user_comment_subscriptions"
	// UserInverseTable is the table name for the User entity.
	// It exists in this package in order to avoid circular dependency with the "user" package.
	UserInverseTable = "users"
	// UserColumn is the table column denoting the user relation/edge.
	UserColumn = "user_id"
	// CommentTable is the table that holds the comment relation/edge.
	CommentTable = "user_comment_subscriptions"
	// CommentInverseTable is the table name for the ThreadComment entity.
	// It exists in this package in order to avoid circular dependency with the "threadcomment" package.
	CommentInverseTable = "thread_comments"
	// CommentColumn is the table column denoting the comment relation/edge.
	CommentColumn = "comment_id"
)

// Columns holds all SQL columns for usercommentsubscription fields.
var Columns = []string{
	FieldUserID,
	FieldCommentID,
	FieldIsNotified,
	FieldIsChecked,
	FieldSubscribedAt,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultIsNotified holds the default value on creation for the "is_notified" field.
	DefaultIsNotified bool
	// DefaultIsChecked holds the default value on creation for the "is_checked" field.
	DefaultIsChecked bool
	// DefaultSubscribedAt holds the default value on creation for the "subscribed_at" field.
	DefaultSubscribedAt func() time.Time
)

// OrderOption defines the ordering options for the UserCommentSubscription queries.
type OrderOption func(*sql.Selector)

// ByUserID orders the results by the user_id field.
func ByUserID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUserID, opts...).ToFunc()
}

// ByCommentID orders the results by the comment_id field.
func ByCommentID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCommentID, opts...).ToFunc()
}

// ByIsNotified orders the results by the is_notified field.
func ByIsNotified(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldIsNotified, opts...).ToFunc()
}

// ByIsChecked orders the results by the is_checked field.
func ByIsChecked(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldIsChecked, opts...).ToFunc()
}

// BySubscribedAt orders the results by the subscribed_at field.
func BySubscribedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSubscribedAt, opts...).ToFunc()
}

// ByUserField orders the results by user field.
func ByUserField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newUserStep(), sql.OrderByField(field, opts...))
	}
}

// ByCommentField orders the results by comment field.
func ByCommentField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newCommentStep(), sql.OrderByField(field, opts...))
	}
}
func newUserStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, UserColumn),
		sqlgraph.To(UserInverseTable, UserFieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, UserTable, UserColumn),
	)
}
func newCommentStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, CommentColumn),
		sqlgraph.To(CommentInverseTable, ThreadCommentFieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, CommentTable, CommentColumn),
	)
}
