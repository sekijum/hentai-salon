// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"server/infrastructure/ent/predicate"
	"server/infrastructure/ent/tag"
	"server/infrastructure/ent/thread"
	"server/infrastructure/ent/threadtag"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ThreadTagUpdate is the builder for updating ThreadTag entities.
type ThreadTagUpdate struct {
	config
	hooks    []Hook
	mutation *ThreadTagMutation
}

// Where appends a list predicates to the ThreadTagUpdate builder.
func (ttu *ThreadTagUpdate) Where(ps ...predicate.ThreadTag) *ThreadTagUpdate {
	ttu.mutation.Where(ps...)
	return ttu
}

// SetThreadID sets the "thread_id" field.
func (ttu *ThreadTagUpdate) SetThreadID(i int) *ThreadTagUpdate {
	ttu.mutation.SetThreadID(i)
	return ttu
}

// SetNillableThreadID sets the "thread_id" field if the given value is not nil.
func (ttu *ThreadTagUpdate) SetNillableThreadID(i *int) *ThreadTagUpdate {
	if i != nil {
		ttu.SetThreadID(*i)
	}
	return ttu
}

// SetTagID sets the "tag_id" field.
func (ttu *ThreadTagUpdate) SetTagID(i int) *ThreadTagUpdate {
	ttu.mutation.SetTagID(i)
	return ttu
}

// SetNillableTagID sets the "tag_id" field if the given value is not nil.
func (ttu *ThreadTagUpdate) SetNillableTagID(i *int) *ThreadTagUpdate {
	if i != nil {
		ttu.SetTagID(*i)
	}
	return ttu
}

// SetThread sets the "thread" edge to the Thread entity.
func (ttu *ThreadTagUpdate) SetThread(t *Thread) *ThreadTagUpdate {
	return ttu.SetThreadID(t.ID)
}

// SetTag sets the "tag" edge to the Tag entity.
func (ttu *ThreadTagUpdate) SetTag(t *Tag) *ThreadTagUpdate {
	return ttu.SetTagID(t.ID)
}

// Mutation returns the ThreadTagMutation object of the builder.
func (ttu *ThreadTagUpdate) Mutation() *ThreadTagMutation {
	return ttu.mutation
}

// ClearThread clears the "thread" edge to the Thread entity.
func (ttu *ThreadTagUpdate) ClearThread() *ThreadTagUpdate {
	ttu.mutation.ClearThread()
	return ttu
}

// ClearTag clears the "tag" edge to the Tag entity.
func (ttu *ThreadTagUpdate) ClearTag() *ThreadTagUpdate {
	ttu.mutation.ClearTag()
	return ttu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (ttu *ThreadTagUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, ttu.sqlSave, ttu.mutation, ttu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ttu *ThreadTagUpdate) SaveX(ctx context.Context) int {
	affected, err := ttu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ttu *ThreadTagUpdate) Exec(ctx context.Context) error {
	_, err := ttu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ttu *ThreadTagUpdate) ExecX(ctx context.Context) {
	if err := ttu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ttu *ThreadTagUpdate) check() error {
	if _, ok := ttu.mutation.ThreadID(); ttu.mutation.ThreadCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "ThreadTag.thread"`)
	}
	if _, ok := ttu.mutation.TagID(); ttu.mutation.TagCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "ThreadTag.tag"`)
	}
	return nil
}

func (ttu *ThreadTagUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := ttu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(threadtag.Table, threadtag.Columns, sqlgraph.NewFieldSpec(threadtag.FieldThreadID, field.TypeInt), sqlgraph.NewFieldSpec(threadtag.FieldTagID, field.TypeInt))
	if ps := ttu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if ttu.mutation.ThreadCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   threadtag.ThreadTable,
			Columns: []string{threadtag.ThreadColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(thread.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ttu.mutation.ThreadIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   threadtag.ThreadTable,
			Columns: []string{threadtag.ThreadColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(thread.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ttu.mutation.TagCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   threadtag.TagTable,
			Columns: []string{threadtag.TagColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tag.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ttu.mutation.TagIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   threadtag.TagTable,
			Columns: []string{threadtag.TagColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tag.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, ttu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{threadtag.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	ttu.mutation.done = true
	return n, nil
}

// ThreadTagUpdateOne is the builder for updating a single ThreadTag entity.
type ThreadTagUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ThreadTagMutation
}

// SetThreadID sets the "thread_id" field.
func (ttuo *ThreadTagUpdateOne) SetThreadID(i int) *ThreadTagUpdateOne {
	ttuo.mutation.SetThreadID(i)
	return ttuo
}

// SetNillableThreadID sets the "thread_id" field if the given value is not nil.
func (ttuo *ThreadTagUpdateOne) SetNillableThreadID(i *int) *ThreadTagUpdateOne {
	if i != nil {
		ttuo.SetThreadID(*i)
	}
	return ttuo
}

// SetTagID sets the "tag_id" field.
func (ttuo *ThreadTagUpdateOne) SetTagID(i int) *ThreadTagUpdateOne {
	ttuo.mutation.SetTagID(i)
	return ttuo
}

// SetNillableTagID sets the "tag_id" field if the given value is not nil.
func (ttuo *ThreadTagUpdateOne) SetNillableTagID(i *int) *ThreadTagUpdateOne {
	if i != nil {
		ttuo.SetTagID(*i)
	}
	return ttuo
}

// SetThread sets the "thread" edge to the Thread entity.
func (ttuo *ThreadTagUpdateOne) SetThread(t *Thread) *ThreadTagUpdateOne {
	return ttuo.SetThreadID(t.ID)
}

// SetTag sets the "tag" edge to the Tag entity.
func (ttuo *ThreadTagUpdateOne) SetTag(t *Tag) *ThreadTagUpdateOne {
	return ttuo.SetTagID(t.ID)
}

// Mutation returns the ThreadTagMutation object of the builder.
func (ttuo *ThreadTagUpdateOne) Mutation() *ThreadTagMutation {
	return ttuo.mutation
}

// ClearThread clears the "thread" edge to the Thread entity.
func (ttuo *ThreadTagUpdateOne) ClearThread() *ThreadTagUpdateOne {
	ttuo.mutation.ClearThread()
	return ttuo
}

// ClearTag clears the "tag" edge to the Tag entity.
func (ttuo *ThreadTagUpdateOne) ClearTag() *ThreadTagUpdateOne {
	ttuo.mutation.ClearTag()
	return ttuo
}

// Where appends a list predicates to the ThreadTagUpdate builder.
func (ttuo *ThreadTagUpdateOne) Where(ps ...predicate.ThreadTag) *ThreadTagUpdateOne {
	ttuo.mutation.Where(ps...)
	return ttuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (ttuo *ThreadTagUpdateOne) Select(field string, fields ...string) *ThreadTagUpdateOne {
	ttuo.fields = append([]string{field}, fields...)
	return ttuo
}

// Save executes the query and returns the updated ThreadTag entity.
func (ttuo *ThreadTagUpdateOne) Save(ctx context.Context) (*ThreadTag, error) {
	return withHooks(ctx, ttuo.sqlSave, ttuo.mutation, ttuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ttuo *ThreadTagUpdateOne) SaveX(ctx context.Context) *ThreadTag {
	node, err := ttuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (ttuo *ThreadTagUpdateOne) Exec(ctx context.Context) error {
	_, err := ttuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ttuo *ThreadTagUpdateOne) ExecX(ctx context.Context) {
	if err := ttuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ttuo *ThreadTagUpdateOne) check() error {
	if _, ok := ttuo.mutation.ThreadID(); ttuo.mutation.ThreadCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "ThreadTag.thread"`)
	}
	if _, ok := ttuo.mutation.TagID(); ttuo.mutation.TagCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "ThreadTag.tag"`)
	}
	return nil
}

func (ttuo *ThreadTagUpdateOne) sqlSave(ctx context.Context) (_node *ThreadTag, err error) {
	if err := ttuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(threadtag.Table, threadtag.Columns, sqlgraph.NewFieldSpec(threadtag.FieldThreadID, field.TypeInt), sqlgraph.NewFieldSpec(threadtag.FieldTagID, field.TypeInt))
	if id, ok := ttuo.mutation.ThreadID(); !ok {
		return nil, &ValidationError{Name: "thread_id", err: errors.New(`ent: missing "ThreadTag.thread_id" for update`)}
	} else {
		_spec.Node.CompositeID[0].Value = id
	}
	if id, ok := ttuo.mutation.TagID(); !ok {
		return nil, &ValidationError{Name: "tag_id", err: errors.New(`ent: missing "ThreadTag.tag_id" for update`)}
	} else {
		_spec.Node.CompositeID[1].Value = id
	}
	if fields := ttuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, len(fields))
		for i, f := range fields {
			if !threadtag.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			_spec.Node.Columns[i] = f
		}
	}
	if ps := ttuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if ttuo.mutation.ThreadCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   threadtag.ThreadTable,
			Columns: []string{threadtag.ThreadColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(thread.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ttuo.mutation.ThreadIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   threadtag.ThreadTable,
			Columns: []string{threadtag.ThreadColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(thread.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ttuo.mutation.TagCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   threadtag.TagTable,
			Columns: []string{threadtag.TagColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tag.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ttuo.mutation.TagIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   threadtag.TagTable,
			Columns: []string{threadtag.TagColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tag.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &ThreadTag{config: ttuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, ttuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{threadtag.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	ttuo.mutation.done = true
	return _node, nil
}
