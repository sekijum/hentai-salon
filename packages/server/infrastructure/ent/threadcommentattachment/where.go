// Code generated by ent, DO NOT EDIT.

package threadcommentattachment

import (
	"server/infrastructure/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.ThreadCommentAttachment {
	return predicate.ThreadCommentAttachment(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.ThreadCommentAttachment {
	return predicate.ThreadCommentAttachment(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.ThreadCommentAttachment {
	return predicate.ThreadCommentAttachment(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.ThreadCommentAttachment {
	return predicate.ThreadCommentAttachment(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.ThreadCommentAttachment {
	return predicate.ThreadCommentAttachment(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.ThreadCommentAttachment {
	return predicate.ThreadCommentAttachment(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.ThreadCommentAttachment {
	return predicate.ThreadCommentAttachment(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.ThreadCommentAttachment {
	return predicate.ThreadCommentAttachment(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.ThreadCommentAttachment {
	return predicate.ThreadCommentAttachment(sql.FieldLTE(FieldID, id))
}

// CommentID applies equality check predicate on the "comment_id" field. It's identical to CommentIDEQ.
func CommentID(v uint64) predicate.ThreadCommentAttachment {
	return predicate.ThreadCommentAttachment(sql.FieldEQ(FieldCommentID, v))
}

// URL applies equality check predicate on the "url" field. It's identical to URLEQ.
func URL(v string) predicate.ThreadCommentAttachment {
	return predicate.ThreadCommentAttachment(sql.FieldEQ(FieldURL, v))
}

// DisplayOrder applies equality check predicate on the "display_order" field. It's identical to DisplayOrderEQ.
func DisplayOrder(v int) predicate.ThreadCommentAttachment {
	return predicate.ThreadCommentAttachment(sql.FieldEQ(FieldDisplayOrder, v))
}

// Type applies equality check predicate on the "type" field. It's identical to TypeEQ.
func Type(v int) predicate.ThreadCommentAttachment {
	return predicate.ThreadCommentAttachment(sql.FieldEQ(FieldType, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.ThreadCommentAttachment {
	return predicate.ThreadCommentAttachment(sql.FieldEQ(FieldCreatedAt, v))
}

// CommentIDEQ applies the EQ predicate on the "comment_id" field.
func CommentIDEQ(v uint64) predicate.ThreadCommentAttachment {
	return predicate.ThreadCommentAttachment(sql.FieldEQ(FieldCommentID, v))
}

// CommentIDNEQ applies the NEQ predicate on the "comment_id" field.
func CommentIDNEQ(v uint64) predicate.ThreadCommentAttachment {
	return predicate.ThreadCommentAttachment(sql.FieldNEQ(FieldCommentID, v))
}

// CommentIDIn applies the In predicate on the "comment_id" field.
func CommentIDIn(vs ...uint64) predicate.ThreadCommentAttachment {
	return predicate.ThreadCommentAttachment(sql.FieldIn(FieldCommentID, vs...))
}

// CommentIDNotIn applies the NotIn predicate on the "comment_id" field.
func CommentIDNotIn(vs ...uint64) predicate.ThreadCommentAttachment {
	return predicate.ThreadCommentAttachment(sql.FieldNotIn(FieldCommentID, vs...))
}

// URLEQ applies the EQ predicate on the "url" field.
func URLEQ(v string) predicate.ThreadCommentAttachment {
	return predicate.ThreadCommentAttachment(sql.FieldEQ(FieldURL, v))
}

// URLNEQ applies the NEQ predicate on the "url" field.
func URLNEQ(v string) predicate.ThreadCommentAttachment {
	return predicate.ThreadCommentAttachment(sql.FieldNEQ(FieldURL, v))
}

// URLIn applies the In predicate on the "url" field.
func URLIn(vs ...string) predicate.ThreadCommentAttachment {
	return predicate.ThreadCommentAttachment(sql.FieldIn(FieldURL, vs...))
}

// URLNotIn applies the NotIn predicate on the "url" field.
func URLNotIn(vs ...string) predicate.ThreadCommentAttachment {
	return predicate.ThreadCommentAttachment(sql.FieldNotIn(FieldURL, vs...))
}

// URLGT applies the GT predicate on the "url" field.
func URLGT(v string) predicate.ThreadCommentAttachment {
	return predicate.ThreadCommentAttachment(sql.FieldGT(FieldURL, v))
}

// URLGTE applies the GTE predicate on the "url" field.
func URLGTE(v string) predicate.ThreadCommentAttachment {
	return predicate.ThreadCommentAttachment(sql.FieldGTE(FieldURL, v))
}

// URLLT applies the LT predicate on the "url" field.
func URLLT(v string) predicate.ThreadCommentAttachment {
	return predicate.ThreadCommentAttachment(sql.FieldLT(FieldURL, v))
}

// URLLTE applies the LTE predicate on the "url" field.
func URLLTE(v string) predicate.ThreadCommentAttachment {
	return predicate.ThreadCommentAttachment(sql.FieldLTE(FieldURL, v))
}

// URLContains applies the Contains predicate on the "url" field.
func URLContains(v string) predicate.ThreadCommentAttachment {
	return predicate.ThreadCommentAttachment(sql.FieldContains(FieldURL, v))
}

// URLHasPrefix applies the HasPrefix predicate on the "url" field.
func URLHasPrefix(v string) predicate.ThreadCommentAttachment {
	return predicate.ThreadCommentAttachment(sql.FieldHasPrefix(FieldURL, v))
}

// URLHasSuffix applies the HasSuffix predicate on the "url" field.
func URLHasSuffix(v string) predicate.ThreadCommentAttachment {
	return predicate.ThreadCommentAttachment(sql.FieldHasSuffix(FieldURL, v))
}

// URLEqualFold applies the EqualFold predicate on the "url" field.
func URLEqualFold(v string) predicate.ThreadCommentAttachment {
	return predicate.ThreadCommentAttachment(sql.FieldEqualFold(FieldURL, v))
}

// URLContainsFold applies the ContainsFold predicate on the "url" field.
func URLContainsFold(v string) predicate.ThreadCommentAttachment {
	return predicate.ThreadCommentAttachment(sql.FieldContainsFold(FieldURL, v))
}

// DisplayOrderEQ applies the EQ predicate on the "display_order" field.
func DisplayOrderEQ(v int) predicate.ThreadCommentAttachment {
	return predicate.ThreadCommentAttachment(sql.FieldEQ(FieldDisplayOrder, v))
}

// DisplayOrderNEQ applies the NEQ predicate on the "display_order" field.
func DisplayOrderNEQ(v int) predicate.ThreadCommentAttachment {
	return predicate.ThreadCommentAttachment(sql.FieldNEQ(FieldDisplayOrder, v))
}

// DisplayOrderIn applies the In predicate on the "display_order" field.
func DisplayOrderIn(vs ...int) predicate.ThreadCommentAttachment {
	return predicate.ThreadCommentAttachment(sql.FieldIn(FieldDisplayOrder, vs...))
}

// DisplayOrderNotIn applies the NotIn predicate on the "display_order" field.
func DisplayOrderNotIn(vs ...int) predicate.ThreadCommentAttachment {
	return predicate.ThreadCommentAttachment(sql.FieldNotIn(FieldDisplayOrder, vs...))
}

// DisplayOrderGT applies the GT predicate on the "display_order" field.
func DisplayOrderGT(v int) predicate.ThreadCommentAttachment {
	return predicate.ThreadCommentAttachment(sql.FieldGT(FieldDisplayOrder, v))
}

// DisplayOrderGTE applies the GTE predicate on the "display_order" field.
func DisplayOrderGTE(v int) predicate.ThreadCommentAttachment {
	return predicate.ThreadCommentAttachment(sql.FieldGTE(FieldDisplayOrder, v))
}

// DisplayOrderLT applies the LT predicate on the "display_order" field.
func DisplayOrderLT(v int) predicate.ThreadCommentAttachment {
	return predicate.ThreadCommentAttachment(sql.FieldLT(FieldDisplayOrder, v))
}

// DisplayOrderLTE applies the LTE predicate on the "display_order" field.
func DisplayOrderLTE(v int) predicate.ThreadCommentAttachment {
	return predicate.ThreadCommentAttachment(sql.FieldLTE(FieldDisplayOrder, v))
}

// TypeEQ applies the EQ predicate on the "type" field.
func TypeEQ(v int) predicate.ThreadCommentAttachment {
	return predicate.ThreadCommentAttachment(sql.FieldEQ(FieldType, v))
}

// TypeNEQ applies the NEQ predicate on the "type" field.
func TypeNEQ(v int) predicate.ThreadCommentAttachment {
	return predicate.ThreadCommentAttachment(sql.FieldNEQ(FieldType, v))
}

// TypeIn applies the In predicate on the "type" field.
func TypeIn(vs ...int) predicate.ThreadCommentAttachment {
	return predicate.ThreadCommentAttachment(sql.FieldIn(FieldType, vs...))
}

// TypeNotIn applies the NotIn predicate on the "type" field.
func TypeNotIn(vs ...int) predicate.ThreadCommentAttachment {
	return predicate.ThreadCommentAttachment(sql.FieldNotIn(FieldType, vs...))
}

// TypeGT applies the GT predicate on the "type" field.
func TypeGT(v int) predicate.ThreadCommentAttachment {
	return predicate.ThreadCommentAttachment(sql.FieldGT(FieldType, v))
}

// TypeGTE applies the GTE predicate on the "type" field.
func TypeGTE(v int) predicate.ThreadCommentAttachment {
	return predicate.ThreadCommentAttachment(sql.FieldGTE(FieldType, v))
}

// TypeLT applies the LT predicate on the "type" field.
func TypeLT(v int) predicate.ThreadCommentAttachment {
	return predicate.ThreadCommentAttachment(sql.FieldLT(FieldType, v))
}

// TypeLTE applies the LTE predicate on the "type" field.
func TypeLTE(v int) predicate.ThreadCommentAttachment {
	return predicate.ThreadCommentAttachment(sql.FieldLTE(FieldType, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.ThreadCommentAttachment {
	return predicate.ThreadCommentAttachment(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.ThreadCommentAttachment {
	return predicate.ThreadCommentAttachment(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.ThreadCommentAttachment {
	return predicate.ThreadCommentAttachment(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.ThreadCommentAttachment {
	return predicate.ThreadCommentAttachment(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.ThreadCommentAttachment {
	return predicate.ThreadCommentAttachment(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.ThreadCommentAttachment {
	return predicate.ThreadCommentAttachment(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.ThreadCommentAttachment {
	return predicate.ThreadCommentAttachment(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.ThreadCommentAttachment {
	return predicate.ThreadCommentAttachment(sql.FieldLTE(FieldCreatedAt, v))
}

// HasComment applies the HasEdge predicate on the "comment" edge.
func HasComment() predicate.ThreadCommentAttachment {
	return predicate.ThreadCommentAttachment(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, CommentTable, CommentColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasCommentWith applies the HasEdge predicate on the "comment" edge with a given conditions (other predicates).
func HasCommentWith(preds ...predicate.ThreadComment) predicate.ThreadCommentAttachment {
	return predicate.ThreadCommentAttachment(func(s *sql.Selector) {
		step := newCommentStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.ThreadCommentAttachment) predicate.ThreadCommentAttachment {
	return predicate.ThreadCommentAttachment(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.ThreadCommentAttachment) predicate.ThreadCommentAttachment {
	return predicate.ThreadCommentAttachment(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.ThreadCommentAttachment) predicate.ThreadCommentAttachment {
	return predicate.ThreadCommentAttachment(sql.NotPredicates(p))
}
