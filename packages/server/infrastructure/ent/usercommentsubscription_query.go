// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"math"
	"server/infrastructure/ent/predicate"
	"server/infrastructure/ent/threadcomment"
	"server/infrastructure/ent/user"
	"server/infrastructure/ent/usercommentsubscription"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// UserCommentSubscriptionQuery is the builder for querying UserCommentSubscription entities.
type UserCommentSubscriptionQuery struct {
	config
	ctx         *QueryContext
	order       []usercommentsubscription.OrderOption
	inters      []Interceptor
	predicates  []predicate.UserCommentSubscription
	withUser    *UserQuery
	withComment *ThreadCommentQuery
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the UserCommentSubscriptionQuery builder.
func (ucsq *UserCommentSubscriptionQuery) Where(ps ...predicate.UserCommentSubscription) *UserCommentSubscriptionQuery {
	ucsq.predicates = append(ucsq.predicates, ps...)
	return ucsq
}

// Limit the number of records to be returned by this query.
func (ucsq *UserCommentSubscriptionQuery) Limit(limit int) *UserCommentSubscriptionQuery {
	ucsq.ctx.Limit = &limit
	return ucsq
}

// Offset to start from.
func (ucsq *UserCommentSubscriptionQuery) Offset(offset int) *UserCommentSubscriptionQuery {
	ucsq.ctx.Offset = &offset
	return ucsq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (ucsq *UserCommentSubscriptionQuery) Unique(unique bool) *UserCommentSubscriptionQuery {
	ucsq.ctx.Unique = &unique
	return ucsq
}

// Order specifies how the records should be ordered.
func (ucsq *UserCommentSubscriptionQuery) Order(o ...usercommentsubscription.OrderOption) *UserCommentSubscriptionQuery {
	ucsq.order = append(ucsq.order, o...)
	return ucsq
}

// QueryUser chains the current query on the "user" edge.
func (ucsq *UserCommentSubscriptionQuery) QueryUser() *UserQuery {
	query := (&UserClient{config: ucsq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := ucsq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := ucsq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(usercommentsubscription.Table, usercommentsubscription.UserColumn, selector),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, usercommentsubscription.UserTable, usercommentsubscription.UserColumn),
		)
		fromU = sqlgraph.SetNeighbors(ucsq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryComment chains the current query on the "comment" edge.
func (ucsq *UserCommentSubscriptionQuery) QueryComment() *ThreadCommentQuery {
	query := (&ThreadCommentClient{config: ucsq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := ucsq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := ucsq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(usercommentsubscription.Table, usercommentsubscription.CommentColumn, selector),
			sqlgraph.To(threadcomment.Table, threadcomment.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, usercommentsubscription.CommentTable, usercommentsubscription.CommentColumn),
		)
		fromU = sqlgraph.SetNeighbors(ucsq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first UserCommentSubscription entity from the query.
// Returns a *NotFoundError when no UserCommentSubscription was found.
func (ucsq *UserCommentSubscriptionQuery) First(ctx context.Context) (*UserCommentSubscription, error) {
	nodes, err := ucsq.Limit(1).All(setContextOp(ctx, ucsq.ctx, "First"))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{usercommentsubscription.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (ucsq *UserCommentSubscriptionQuery) FirstX(ctx context.Context) *UserCommentSubscription {
	node, err := ucsq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// Only returns a single UserCommentSubscription entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one UserCommentSubscription entity is found.
// Returns a *NotFoundError when no UserCommentSubscription entities are found.
func (ucsq *UserCommentSubscriptionQuery) Only(ctx context.Context) (*UserCommentSubscription, error) {
	nodes, err := ucsq.Limit(2).All(setContextOp(ctx, ucsq.ctx, "Only"))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{usercommentsubscription.Label}
	default:
		return nil, &NotSingularError{usercommentsubscription.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (ucsq *UserCommentSubscriptionQuery) OnlyX(ctx context.Context) *UserCommentSubscription {
	node, err := ucsq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// All executes the query and returns a list of UserCommentSubscriptions.
func (ucsq *UserCommentSubscriptionQuery) All(ctx context.Context) ([]*UserCommentSubscription, error) {
	ctx = setContextOp(ctx, ucsq.ctx, "All")
	if err := ucsq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*UserCommentSubscription, *UserCommentSubscriptionQuery]()
	return withInterceptors[[]*UserCommentSubscription](ctx, ucsq, qr, ucsq.inters)
}

// AllX is like All, but panics if an error occurs.
func (ucsq *UserCommentSubscriptionQuery) AllX(ctx context.Context) []*UserCommentSubscription {
	nodes, err := ucsq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// Count returns the count of the given query.
func (ucsq *UserCommentSubscriptionQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, ucsq.ctx, "Count")
	if err := ucsq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, ucsq, querierCount[*UserCommentSubscriptionQuery](), ucsq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (ucsq *UserCommentSubscriptionQuery) CountX(ctx context.Context) int {
	count, err := ucsq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (ucsq *UserCommentSubscriptionQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, ucsq.ctx, "Exist")
	switch _, err := ucsq.First(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (ucsq *UserCommentSubscriptionQuery) ExistX(ctx context.Context) bool {
	exist, err := ucsq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the UserCommentSubscriptionQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (ucsq *UserCommentSubscriptionQuery) Clone() *UserCommentSubscriptionQuery {
	if ucsq == nil {
		return nil
	}
	return &UserCommentSubscriptionQuery{
		config:      ucsq.config,
		ctx:         ucsq.ctx.Clone(),
		order:       append([]usercommentsubscription.OrderOption{}, ucsq.order...),
		inters:      append([]Interceptor{}, ucsq.inters...),
		predicates:  append([]predicate.UserCommentSubscription{}, ucsq.predicates...),
		withUser:    ucsq.withUser.Clone(),
		withComment: ucsq.withComment.Clone(),
		// clone intermediate query.
		sql:  ucsq.sql.Clone(),
		path: ucsq.path,
	}
}

// WithUser tells the query-builder to eager-load the nodes that are connected to
// the "user" edge. The optional arguments are used to configure the query builder of the edge.
func (ucsq *UserCommentSubscriptionQuery) WithUser(opts ...func(*UserQuery)) *UserCommentSubscriptionQuery {
	query := (&UserClient{config: ucsq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	ucsq.withUser = query
	return ucsq
}

// WithComment tells the query-builder to eager-load the nodes that are connected to
// the "comment" edge. The optional arguments are used to configure the query builder of the edge.
func (ucsq *UserCommentSubscriptionQuery) WithComment(opts ...func(*ThreadCommentQuery)) *UserCommentSubscriptionQuery {
	query := (&ThreadCommentClient{config: ucsq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	ucsq.withComment = query
	return ucsq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		UserID int `json:"user_id,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.UserCommentSubscription.Query().
//		GroupBy(usercommentsubscription.FieldUserID).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (ucsq *UserCommentSubscriptionQuery) GroupBy(field string, fields ...string) *UserCommentSubscriptionGroupBy {
	ucsq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &UserCommentSubscriptionGroupBy{build: ucsq}
	grbuild.flds = &ucsq.ctx.Fields
	grbuild.label = usercommentsubscription.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		UserID int `json:"user_id,omitempty"`
//	}
//
//	client.UserCommentSubscription.Query().
//		Select(usercommentsubscription.FieldUserID).
//		Scan(ctx, &v)
func (ucsq *UserCommentSubscriptionQuery) Select(fields ...string) *UserCommentSubscriptionSelect {
	ucsq.ctx.Fields = append(ucsq.ctx.Fields, fields...)
	sbuild := &UserCommentSubscriptionSelect{UserCommentSubscriptionQuery: ucsq}
	sbuild.label = usercommentsubscription.Label
	sbuild.flds, sbuild.scan = &ucsq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a UserCommentSubscriptionSelect configured with the given aggregations.
func (ucsq *UserCommentSubscriptionQuery) Aggregate(fns ...AggregateFunc) *UserCommentSubscriptionSelect {
	return ucsq.Select().Aggregate(fns...)
}

func (ucsq *UserCommentSubscriptionQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range ucsq.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, ucsq); err != nil {
				return err
			}
		}
	}
	for _, f := range ucsq.ctx.Fields {
		if !usercommentsubscription.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if ucsq.path != nil {
		prev, err := ucsq.path(ctx)
		if err != nil {
			return err
		}
		ucsq.sql = prev
	}
	return nil
}

func (ucsq *UserCommentSubscriptionQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*UserCommentSubscription, error) {
	var (
		nodes       = []*UserCommentSubscription{}
		_spec       = ucsq.querySpec()
		loadedTypes = [2]bool{
			ucsq.withUser != nil,
			ucsq.withComment != nil,
		}
	)
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*UserCommentSubscription).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &UserCommentSubscription{config: ucsq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, ucsq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := ucsq.withUser; query != nil {
		if err := ucsq.loadUser(ctx, query, nodes, nil,
			func(n *UserCommentSubscription, e *User) { n.Edges.User = e }); err != nil {
			return nil, err
		}
	}
	if query := ucsq.withComment; query != nil {
		if err := ucsq.loadComment(ctx, query, nodes, nil,
			func(n *UserCommentSubscription, e *ThreadComment) { n.Edges.Comment = e }); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (ucsq *UserCommentSubscriptionQuery) loadUser(ctx context.Context, query *UserQuery, nodes []*UserCommentSubscription, init func(*UserCommentSubscription), assign func(*UserCommentSubscription, *User)) error {
	ids := make([]int, 0, len(nodes))
	nodeids := make(map[int][]*UserCommentSubscription)
	for i := range nodes {
		fk := nodes[i].UserID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(user.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "user_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (ucsq *UserCommentSubscriptionQuery) loadComment(ctx context.Context, query *ThreadCommentQuery, nodes []*UserCommentSubscription, init func(*UserCommentSubscription), assign func(*UserCommentSubscription, *ThreadComment)) error {
	ids := make([]int, 0, len(nodes))
	nodeids := make(map[int][]*UserCommentSubscription)
	for i := range nodes {
		fk := nodes[i].CommentID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(threadcomment.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "comment_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}

func (ucsq *UserCommentSubscriptionQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := ucsq.querySpec()
	_spec.Unique = false
	_spec.Node.Columns = nil
	return sqlgraph.CountNodes(ctx, ucsq.driver, _spec)
}

func (ucsq *UserCommentSubscriptionQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(usercommentsubscription.Table, usercommentsubscription.Columns, nil)
	_spec.From = ucsq.sql
	if unique := ucsq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if ucsq.path != nil {
		_spec.Unique = true
	}
	if fields := ucsq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		for i := range fields {
			_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
		}
		if ucsq.withUser != nil {
			_spec.Node.AddColumnOnce(usercommentsubscription.FieldUserID)
		}
		if ucsq.withComment != nil {
			_spec.Node.AddColumnOnce(usercommentsubscription.FieldCommentID)
		}
	}
	if ps := ucsq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := ucsq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := ucsq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := ucsq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (ucsq *UserCommentSubscriptionQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(ucsq.driver.Dialect())
	t1 := builder.Table(usercommentsubscription.Table)
	columns := ucsq.ctx.Fields
	if len(columns) == 0 {
		columns = usercommentsubscription.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if ucsq.sql != nil {
		selector = ucsq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if ucsq.ctx.Unique != nil && *ucsq.ctx.Unique {
		selector.Distinct()
	}
	for _, p := range ucsq.predicates {
		p(selector)
	}
	for _, p := range ucsq.order {
		p(selector)
	}
	if offset := ucsq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := ucsq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// UserCommentSubscriptionGroupBy is the group-by builder for UserCommentSubscription entities.
type UserCommentSubscriptionGroupBy struct {
	selector
	build *UserCommentSubscriptionQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (ucsgb *UserCommentSubscriptionGroupBy) Aggregate(fns ...AggregateFunc) *UserCommentSubscriptionGroupBy {
	ucsgb.fns = append(ucsgb.fns, fns...)
	return ucsgb
}

// Scan applies the selector query and scans the result into the given value.
func (ucsgb *UserCommentSubscriptionGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, ucsgb.build.ctx, "GroupBy")
	if err := ucsgb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*UserCommentSubscriptionQuery, *UserCommentSubscriptionGroupBy](ctx, ucsgb.build, ucsgb, ucsgb.build.inters, v)
}

func (ucsgb *UserCommentSubscriptionGroupBy) sqlScan(ctx context.Context, root *UserCommentSubscriptionQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(ucsgb.fns))
	for _, fn := range ucsgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*ucsgb.flds)+len(ucsgb.fns))
		for _, f := range *ucsgb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*ucsgb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := ucsgb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// UserCommentSubscriptionSelect is the builder for selecting fields of UserCommentSubscription entities.
type UserCommentSubscriptionSelect struct {
	*UserCommentSubscriptionQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (ucss *UserCommentSubscriptionSelect) Aggregate(fns ...AggregateFunc) *UserCommentSubscriptionSelect {
	ucss.fns = append(ucss.fns, fns...)
	return ucss
}

// Scan applies the selector query and scans the result into the given value.
func (ucss *UserCommentSubscriptionSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, ucss.ctx, "Select")
	if err := ucss.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*UserCommentSubscriptionQuery, *UserCommentSubscriptionSelect](ctx, ucss.UserCommentSubscriptionQuery, ucss, ucss.inters, v)
}

func (ucss *UserCommentSubscriptionSelect) sqlScan(ctx context.Context, root *UserCommentSubscriptionQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(ucss.fns))
	for _, fn := range ucss.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*ucss.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := ucss.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
