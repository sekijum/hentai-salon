// Code generated by ent, DO NOT EDIT.

package threadtag

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the threadtag type in the database.
	Label = "thread_tag"
	// FieldThreadID holds the string denoting the thread_id field in the database.
	FieldThreadID = "thread_id"
	// FieldTagID holds the string denoting the tag_id field in the database.
	FieldTagID = "tag_id"
	// EdgeThread holds the string denoting the thread edge name in mutations.
	EdgeThread = "thread"
	// EdgeTag holds the string denoting the tag edge name in mutations.
	EdgeTag = "tag"
	// ThreadFieldID holds the string denoting the ID field of the Thread.
	ThreadFieldID = "id"
	// TagFieldID holds the string denoting the ID field of the Tag.
	TagFieldID = "id"
	// Table holds the table name of the threadtag in the database.
	Table = "thread_tags"
	// ThreadTable is the table that holds the thread relation/edge.
	ThreadTable = "thread_tags"
	// ThreadInverseTable is the table name for the Thread entity.
	// It exists in this package in order to avoid circular dependency with the "thread" package.
	ThreadInverseTable = "threads"
	// ThreadColumn is the table column denoting the thread relation/edge.
	ThreadColumn = "thread_id"
	// TagTable is the table that holds the tag relation/edge.
	TagTable = "thread_tags"
	// TagInverseTable is the table name for the Tag entity.
	// It exists in this package in order to avoid circular dependency with the "tag" package.
	TagInverseTable = "tags"
	// TagColumn is the table column denoting the tag relation/edge.
	TagColumn = "tag_id"
)

// Columns holds all SQL columns for threadtag fields.
var Columns = []string{
	FieldThreadID,
	FieldTagID,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

// OrderOption defines the ordering options for the ThreadTag queries.
type OrderOption func(*sql.Selector)

// ByThreadID orders the results by the thread_id field.
func ByThreadID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldThreadID, opts...).ToFunc()
}

// ByTagID orders the results by the tag_id field.
func ByTagID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTagID, opts...).ToFunc()
}

// ByThreadField orders the results by thread field.
func ByThreadField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newThreadStep(), sql.OrderByField(field, opts...))
	}
}

// ByTagField orders the results by tag field.
func ByTagField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newTagStep(), sql.OrderByField(field, opts...))
	}
}
func newThreadStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, ThreadColumn),
		sqlgraph.To(ThreadInverseTable, ThreadFieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, ThreadTable, ThreadColumn),
	)
}
func newTagStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, TagColumn),
		sqlgraph.To(TagInverseTable, TagFieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, TagTable, TagColumn),
	)
}
