// Code generated by ent, DO NOT EDIT.

package threadtag

import (
	"server/infrastructure/ent/predicate"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ThreadID applies equality check predicate on the "thread_id" field. It's identical to ThreadIDEQ.
func ThreadID(v int) predicate.ThreadTag {
	return predicate.ThreadTag(sql.FieldEQ(FieldThreadID, v))
}

// TagID applies equality check predicate on the "tag_id" field. It's identical to TagIDEQ.
func TagID(v int) predicate.ThreadTag {
	return predicate.ThreadTag(sql.FieldEQ(FieldTagID, v))
}

// ThreadIDEQ applies the EQ predicate on the "thread_id" field.
func ThreadIDEQ(v int) predicate.ThreadTag {
	return predicate.ThreadTag(sql.FieldEQ(FieldThreadID, v))
}

// ThreadIDNEQ applies the NEQ predicate on the "thread_id" field.
func ThreadIDNEQ(v int) predicate.ThreadTag {
	return predicate.ThreadTag(sql.FieldNEQ(FieldThreadID, v))
}

// ThreadIDIn applies the In predicate on the "thread_id" field.
func ThreadIDIn(vs ...int) predicate.ThreadTag {
	return predicate.ThreadTag(sql.FieldIn(FieldThreadID, vs...))
}

// ThreadIDNotIn applies the NotIn predicate on the "thread_id" field.
func ThreadIDNotIn(vs ...int) predicate.ThreadTag {
	return predicate.ThreadTag(sql.FieldNotIn(FieldThreadID, vs...))
}

// TagIDEQ applies the EQ predicate on the "tag_id" field.
func TagIDEQ(v int) predicate.ThreadTag {
	return predicate.ThreadTag(sql.FieldEQ(FieldTagID, v))
}

// TagIDNEQ applies the NEQ predicate on the "tag_id" field.
func TagIDNEQ(v int) predicate.ThreadTag {
	return predicate.ThreadTag(sql.FieldNEQ(FieldTagID, v))
}

// TagIDIn applies the In predicate on the "tag_id" field.
func TagIDIn(vs ...int) predicate.ThreadTag {
	return predicate.ThreadTag(sql.FieldIn(FieldTagID, vs...))
}

// TagIDNotIn applies the NotIn predicate on the "tag_id" field.
func TagIDNotIn(vs ...int) predicate.ThreadTag {
	return predicate.ThreadTag(sql.FieldNotIn(FieldTagID, vs...))
}

// HasThread applies the HasEdge predicate on the "thread" edge.
func HasThread() predicate.ThreadTag {
	return predicate.ThreadTag(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, ThreadColumn),
			sqlgraph.Edge(sqlgraph.M2O, false, ThreadTable, ThreadColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasThreadWith applies the HasEdge predicate on the "thread" edge with a given conditions (other predicates).
func HasThreadWith(preds ...predicate.Thread) predicate.ThreadTag {
	return predicate.ThreadTag(func(s *sql.Selector) {
		step := newThreadStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasTag applies the HasEdge predicate on the "tag" edge.
func HasTag() predicate.ThreadTag {
	return predicate.ThreadTag(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, TagColumn),
			sqlgraph.Edge(sqlgraph.M2O, false, TagTable, TagColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasTagWith applies the HasEdge predicate on the "tag" edge with a given conditions (other predicates).
func HasTagWith(preds ...predicate.Tag) predicate.ThreadTag {
	return predicate.ThreadTag(func(s *sql.Selector) {
		step := newTagStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.ThreadTag) predicate.ThreadTag {
	return predicate.ThreadTag(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.ThreadTag) predicate.ThreadTag {
	return predicate.ThreadTag(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.ThreadTag) predicate.ThreadTag {
	return predicate.ThreadTag(sql.NotPredicates(p))
}
