// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"server/infrastructure/ent/predicate"
	"server/infrastructure/ent/thread"
	"server/infrastructure/ent/threadcomment"
	"server/infrastructure/ent/threadcommentattachment"
	"server/infrastructure/ent/user"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ThreadCommentUpdate is the builder for updating ThreadComment entities.
type ThreadCommentUpdate struct {
	config
	hooks    []Hook
	mutation *ThreadCommentMutation
}

// Where appends a list predicates to the ThreadCommentUpdate builder.
func (tcu *ThreadCommentUpdate) Where(ps ...predicate.ThreadComment) *ThreadCommentUpdate {
	tcu.mutation.Where(ps...)
	return tcu
}

// SetThreadID sets the "thread_id" field.
func (tcu *ThreadCommentUpdate) SetThreadID(i int) *ThreadCommentUpdate {
	tcu.mutation.SetThreadID(i)
	return tcu
}

// SetNillableThreadID sets the "thread_id" field if the given value is not nil.
func (tcu *ThreadCommentUpdate) SetNillableThreadID(i *int) *ThreadCommentUpdate {
	if i != nil {
		tcu.SetThreadID(*i)
	}
	return tcu
}

// SetParentCommentID sets the "parent_comment_id" field.
func (tcu *ThreadCommentUpdate) SetParentCommentID(u uint64) *ThreadCommentUpdate {
	tcu.mutation.SetParentCommentID(u)
	return tcu
}

// SetNillableParentCommentID sets the "parent_comment_id" field if the given value is not nil.
func (tcu *ThreadCommentUpdate) SetNillableParentCommentID(u *uint64) *ThreadCommentUpdate {
	if u != nil {
		tcu.SetParentCommentID(*u)
	}
	return tcu
}

// ClearParentCommentID clears the value of the "parent_comment_id" field.
func (tcu *ThreadCommentUpdate) ClearParentCommentID() *ThreadCommentUpdate {
	tcu.mutation.ClearParentCommentID()
	return tcu
}

// SetUserID sets the "user_id" field.
func (tcu *ThreadCommentUpdate) SetUserID(i int) *ThreadCommentUpdate {
	tcu.mutation.SetUserID(i)
	return tcu
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (tcu *ThreadCommentUpdate) SetNillableUserID(i *int) *ThreadCommentUpdate {
	if i != nil {
		tcu.SetUserID(*i)
	}
	return tcu
}

// ClearUserID clears the value of the "user_id" field.
func (tcu *ThreadCommentUpdate) ClearUserID() *ThreadCommentUpdate {
	tcu.mutation.ClearUserID()
	return tcu
}

// SetGuestName sets the "guest_name" field.
func (tcu *ThreadCommentUpdate) SetGuestName(s string) *ThreadCommentUpdate {
	tcu.mutation.SetGuestName(s)
	return tcu
}

// SetNillableGuestName sets the "guest_name" field if the given value is not nil.
func (tcu *ThreadCommentUpdate) SetNillableGuestName(s *string) *ThreadCommentUpdate {
	if s != nil {
		tcu.SetGuestName(*s)
	}
	return tcu
}

// ClearGuestName clears the value of the "guest_name" field.
func (tcu *ThreadCommentUpdate) ClearGuestName() *ThreadCommentUpdate {
	tcu.mutation.ClearGuestName()
	return tcu
}

// SetContent sets the "content" field.
func (tcu *ThreadCommentUpdate) SetContent(s string) *ThreadCommentUpdate {
	tcu.mutation.SetContent(s)
	return tcu
}

// SetNillableContent sets the "content" field if the given value is not nil.
func (tcu *ThreadCommentUpdate) SetNillableContent(s *string) *ThreadCommentUpdate {
	if s != nil {
		tcu.SetContent(*s)
	}
	return tcu
}

// SetIPAddress sets the "ip_address" field.
func (tcu *ThreadCommentUpdate) SetIPAddress(s string) *ThreadCommentUpdate {
	tcu.mutation.SetIPAddress(s)
	return tcu
}

// SetNillableIPAddress sets the "ip_address" field if the given value is not nil.
func (tcu *ThreadCommentUpdate) SetNillableIPAddress(s *string) *ThreadCommentUpdate {
	if s != nil {
		tcu.SetIPAddress(*s)
	}
	return tcu
}

// SetCreatedAt sets the "created_at" field.
func (tcu *ThreadCommentUpdate) SetCreatedAt(t time.Time) *ThreadCommentUpdate {
	tcu.mutation.SetCreatedAt(t)
	return tcu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (tcu *ThreadCommentUpdate) SetNillableCreatedAt(t *time.Time) *ThreadCommentUpdate {
	if t != nil {
		tcu.SetCreatedAt(*t)
	}
	return tcu
}

// SetUpdatedAt sets the "updated_at" field.
func (tcu *ThreadCommentUpdate) SetUpdatedAt(t time.Time) *ThreadCommentUpdate {
	tcu.mutation.SetUpdatedAt(t)
	return tcu
}

// SetThread sets the "thread" edge to the Thread entity.
func (tcu *ThreadCommentUpdate) SetThread(t *Thread) *ThreadCommentUpdate {
	return tcu.SetThreadID(t.ID)
}

// SetAuthorID sets the "author" edge to the User entity by ID.
func (tcu *ThreadCommentUpdate) SetAuthorID(id int) *ThreadCommentUpdate {
	tcu.mutation.SetAuthorID(id)
	return tcu
}

// SetNillableAuthorID sets the "author" edge to the User entity by ID if the given value is not nil.
func (tcu *ThreadCommentUpdate) SetNillableAuthorID(id *int) *ThreadCommentUpdate {
	if id != nil {
		tcu = tcu.SetAuthorID(*id)
	}
	return tcu
}

// SetAuthor sets the "author" edge to the User entity.
func (tcu *ThreadCommentUpdate) SetAuthor(u *User) *ThreadCommentUpdate {
	return tcu.SetAuthorID(u.ID)
}

// SetParentComment sets the "parent_comment" edge to the ThreadComment entity.
func (tcu *ThreadCommentUpdate) SetParentComment(t *ThreadComment) *ThreadCommentUpdate {
	return tcu.SetParentCommentID(t.ID)
}

// AddReplyIDs adds the "replies" edge to the ThreadComment entity by IDs.
func (tcu *ThreadCommentUpdate) AddReplyIDs(ids ...uint64) *ThreadCommentUpdate {
	tcu.mutation.AddReplyIDs(ids...)
	return tcu
}

// AddReplies adds the "replies" edges to the ThreadComment entity.
func (tcu *ThreadCommentUpdate) AddReplies(t ...*ThreadComment) *ThreadCommentUpdate {
	ids := make([]uint64, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return tcu.AddReplyIDs(ids...)
}

// AddAttachmentIDs adds the "attachments" edge to the ThreadCommentAttachment entity by IDs.
func (tcu *ThreadCommentUpdate) AddAttachmentIDs(ids ...int) *ThreadCommentUpdate {
	tcu.mutation.AddAttachmentIDs(ids...)
	return tcu
}

// AddAttachments adds the "attachments" edges to the ThreadCommentAttachment entity.
func (tcu *ThreadCommentUpdate) AddAttachments(t ...*ThreadCommentAttachment) *ThreadCommentUpdate {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return tcu.AddAttachmentIDs(ids...)
}

// AddLikedUserIDs adds the "liked_users" edge to the User entity by IDs.
func (tcu *ThreadCommentUpdate) AddLikedUserIDs(ids ...int) *ThreadCommentUpdate {
	tcu.mutation.AddLikedUserIDs(ids...)
	return tcu
}

// AddLikedUsers adds the "liked_users" edges to the User entity.
func (tcu *ThreadCommentUpdate) AddLikedUsers(u ...*User) *ThreadCommentUpdate {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return tcu.AddLikedUserIDs(ids...)
}

// Mutation returns the ThreadCommentMutation object of the builder.
func (tcu *ThreadCommentUpdate) Mutation() *ThreadCommentMutation {
	return tcu.mutation
}

// ClearThread clears the "thread" edge to the Thread entity.
func (tcu *ThreadCommentUpdate) ClearThread() *ThreadCommentUpdate {
	tcu.mutation.ClearThread()
	return tcu
}

// ClearAuthor clears the "author" edge to the User entity.
func (tcu *ThreadCommentUpdate) ClearAuthor() *ThreadCommentUpdate {
	tcu.mutation.ClearAuthor()
	return tcu
}

// ClearParentComment clears the "parent_comment" edge to the ThreadComment entity.
func (tcu *ThreadCommentUpdate) ClearParentComment() *ThreadCommentUpdate {
	tcu.mutation.ClearParentComment()
	return tcu
}

// ClearReplies clears all "replies" edges to the ThreadComment entity.
func (tcu *ThreadCommentUpdate) ClearReplies() *ThreadCommentUpdate {
	tcu.mutation.ClearReplies()
	return tcu
}

// RemoveReplyIDs removes the "replies" edge to ThreadComment entities by IDs.
func (tcu *ThreadCommentUpdate) RemoveReplyIDs(ids ...uint64) *ThreadCommentUpdate {
	tcu.mutation.RemoveReplyIDs(ids...)
	return tcu
}

// RemoveReplies removes "replies" edges to ThreadComment entities.
func (tcu *ThreadCommentUpdate) RemoveReplies(t ...*ThreadComment) *ThreadCommentUpdate {
	ids := make([]uint64, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return tcu.RemoveReplyIDs(ids...)
}

// ClearAttachments clears all "attachments" edges to the ThreadCommentAttachment entity.
func (tcu *ThreadCommentUpdate) ClearAttachments() *ThreadCommentUpdate {
	tcu.mutation.ClearAttachments()
	return tcu
}

// RemoveAttachmentIDs removes the "attachments" edge to ThreadCommentAttachment entities by IDs.
func (tcu *ThreadCommentUpdate) RemoveAttachmentIDs(ids ...int) *ThreadCommentUpdate {
	tcu.mutation.RemoveAttachmentIDs(ids...)
	return tcu
}

// RemoveAttachments removes "attachments" edges to ThreadCommentAttachment entities.
func (tcu *ThreadCommentUpdate) RemoveAttachments(t ...*ThreadCommentAttachment) *ThreadCommentUpdate {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return tcu.RemoveAttachmentIDs(ids...)
}

// ClearLikedUsers clears all "liked_users" edges to the User entity.
func (tcu *ThreadCommentUpdate) ClearLikedUsers() *ThreadCommentUpdate {
	tcu.mutation.ClearLikedUsers()
	return tcu
}

// RemoveLikedUserIDs removes the "liked_users" edge to User entities by IDs.
func (tcu *ThreadCommentUpdate) RemoveLikedUserIDs(ids ...int) *ThreadCommentUpdate {
	tcu.mutation.RemoveLikedUserIDs(ids...)
	return tcu
}

// RemoveLikedUsers removes "liked_users" edges to User entities.
func (tcu *ThreadCommentUpdate) RemoveLikedUsers(u ...*User) *ThreadCommentUpdate {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return tcu.RemoveLikedUserIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (tcu *ThreadCommentUpdate) Save(ctx context.Context) (int, error) {
	tcu.defaults()
	return withHooks(ctx, tcu.sqlSave, tcu.mutation, tcu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (tcu *ThreadCommentUpdate) SaveX(ctx context.Context) int {
	affected, err := tcu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (tcu *ThreadCommentUpdate) Exec(ctx context.Context) error {
	_, err := tcu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tcu *ThreadCommentUpdate) ExecX(ctx context.Context) {
	if err := tcu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (tcu *ThreadCommentUpdate) defaults() {
	if _, ok := tcu.mutation.UpdatedAt(); !ok {
		v := threadcomment.UpdateDefaultUpdatedAt()
		tcu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (tcu *ThreadCommentUpdate) check() error {
	if v, ok := tcu.mutation.GuestName(); ok {
		if err := threadcomment.GuestNameValidator(v); err != nil {
			return &ValidationError{Name: "guest_name", err: fmt.Errorf(`ent: validator failed for field "ThreadComment.guest_name": %w`, err)}
		}
	}
	if v, ok := tcu.mutation.IPAddress(); ok {
		if err := threadcomment.IPAddressValidator(v); err != nil {
			return &ValidationError{Name: "ip_address", err: fmt.Errorf(`ent: validator failed for field "ThreadComment.ip_address": %w`, err)}
		}
	}
	if tcu.mutation.ThreadCleared() && len(tcu.mutation.ThreadIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "ThreadComment.thread"`)
	}
	return nil
}

func (tcu *ThreadCommentUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := tcu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(threadcomment.Table, threadcomment.Columns, sqlgraph.NewFieldSpec(threadcomment.FieldID, field.TypeUint64))
	if ps := tcu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tcu.mutation.GuestName(); ok {
		_spec.SetField(threadcomment.FieldGuestName, field.TypeString, value)
	}
	if tcu.mutation.GuestNameCleared() {
		_spec.ClearField(threadcomment.FieldGuestName, field.TypeString)
	}
	if value, ok := tcu.mutation.Content(); ok {
		_spec.SetField(threadcomment.FieldContent, field.TypeString, value)
	}
	if value, ok := tcu.mutation.IPAddress(); ok {
		_spec.SetField(threadcomment.FieldIPAddress, field.TypeString, value)
	}
	if value, ok := tcu.mutation.CreatedAt(); ok {
		_spec.SetField(threadcomment.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := tcu.mutation.UpdatedAt(); ok {
		_spec.SetField(threadcomment.FieldUpdatedAt, field.TypeTime, value)
	}
	if tcu.mutation.ThreadCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   threadcomment.ThreadTable,
			Columns: []string{threadcomment.ThreadColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(thread.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tcu.mutation.ThreadIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   threadcomment.ThreadTable,
			Columns: []string{threadcomment.ThreadColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(thread.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tcu.mutation.AuthorCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   threadcomment.AuthorTable,
			Columns: []string{threadcomment.AuthorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tcu.mutation.AuthorIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   threadcomment.AuthorTable,
			Columns: []string{threadcomment.AuthorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tcu.mutation.ParentCommentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   threadcomment.ParentCommentTable,
			Columns: []string{threadcomment.ParentCommentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(threadcomment.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tcu.mutation.ParentCommentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   threadcomment.ParentCommentTable,
			Columns: []string{threadcomment.ParentCommentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(threadcomment.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tcu.mutation.RepliesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   threadcomment.RepliesTable,
			Columns: []string{threadcomment.RepliesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(threadcomment.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tcu.mutation.RemovedRepliesIDs(); len(nodes) > 0 && !tcu.mutation.RepliesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   threadcomment.RepliesTable,
			Columns: []string{threadcomment.RepliesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(threadcomment.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tcu.mutation.RepliesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   threadcomment.RepliesTable,
			Columns: []string{threadcomment.RepliesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(threadcomment.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tcu.mutation.AttachmentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   threadcomment.AttachmentsTable,
			Columns: []string{threadcomment.AttachmentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(threadcommentattachment.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tcu.mutation.RemovedAttachmentsIDs(); len(nodes) > 0 && !tcu.mutation.AttachmentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   threadcomment.AttachmentsTable,
			Columns: []string{threadcomment.AttachmentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(threadcommentattachment.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tcu.mutation.AttachmentsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   threadcomment.AttachmentsTable,
			Columns: []string{threadcomment.AttachmentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(threadcommentattachment.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tcu.mutation.LikedUsersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   threadcomment.LikedUsersTable,
			Columns: threadcomment.LikedUsersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		createE := &UserCommentLikeCreate{config: tcu.config, mutation: newUserCommentLikeMutation(tcu.config, OpCreate)}
		createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tcu.mutation.RemovedLikedUsersIDs(); len(nodes) > 0 && !tcu.mutation.LikedUsersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   threadcomment.LikedUsersTable,
			Columns: threadcomment.LikedUsersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		createE := &UserCommentLikeCreate{config: tcu.config, mutation: newUserCommentLikeMutation(tcu.config, OpCreate)}
		createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tcu.mutation.LikedUsersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   threadcomment.LikedUsersTable,
			Columns: threadcomment.LikedUsersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		createE := &UserCommentLikeCreate{config: tcu.config, mutation: newUserCommentLikeMutation(tcu.config, OpCreate)}
		createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, tcu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{threadcomment.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	tcu.mutation.done = true
	return n, nil
}

// ThreadCommentUpdateOne is the builder for updating a single ThreadComment entity.
type ThreadCommentUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ThreadCommentMutation
}

// SetThreadID sets the "thread_id" field.
func (tcuo *ThreadCommentUpdateOne) SetThreadID(i int) *ThreadCommentUpdateOne {
	tcuo.mutation.SetThreadID(i)
	return tcuo
}

// SetNillableThreadID sets the "thread_id" field if the given value is not nil.
func (tcuo *ThreadCommentUpdateOne) SetNillableThreadID(i *int) *ThreadCommentUpdateOne {
	if i != nil {
		tcuo.SetThreadID(*i)
	}
	return tcuo
}

// SetParentCommentID sets the "parent_comment_id" field.
func (tcuo *ThreadCommentUpdateOne) SetParentCommentID(u uint64) *ThreadCommentUpdateOne {
	tcuo.mutation.SetParentCommentID(u)
	return tcuo
}

// SetNillableParentCommentID sets the "parent_comment_id" field if the given value is not nil.
func (tcuo *ThreadCommentUpdateOne) SetNillableParentCommentID(u *uint64) *ThreadCommentUpdateOne {
	if u != nil {
		tcuo.SetParentCommentID(*u)
	}
	return tcuo
}

// ClearParentCommentID clears the value of the "parent_comment_id" field.
func (tcuo *ThreadCommentUpdateOne) ClearParentCommentID() *ThreadCommentUpdateOne {
	tcuo.mutation.ClearParentCommentID()
	return tcuo
}

// SetUserID sets the "user_id" field.
func (tcuo *ThreadCommentUpdateOne) SetUserID(i int) *ThreadCommentUpdateOne {
	tcuo.mutation.SetUserID(i)
	return tcuo
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (tcuo *ThreadCommentUpdateOne) SetNillableUserID(i *int) *ThreadCommentUpdateOne {
	if i != nil {
		tcuo.SetUserID(*i)
	}
	return tcuo
}

// ClearUserID clears the value of the "user_id" field.
func (tcuo *ThreadCommentUpdateOne) ClearUserID() *ThreadCommentUpdateOne {
	tcuo.mutation.ClearUserID()
	return tcuo
}

// SetGuestName sets the "guest_name" field.
func (tcuo *ThreadCommentUpdateOne) SetGuestName(s string) *ThreadCommentUpdateOne {
	tcuo.mutation.SetGuestName(s)
	return tcuo
}

// SetNillableGuestName sets the "guest_name" field if the given value is not nil.
func (tcuo *ThreadCommentUpdateOne) SetNillableGuestName(s *string) *ThreadCommentUpdateOne {
	if s != nil {
		tcuo.SetGuestName(*s)
	}
	return tcuo
}

// ClearGuestName clears the value of the "guest_name" field.
func (tcuo *ThreadCommentUpdateOne) ClearGuestName() *ThreadCommentUpdateOne {
	tcuo.mutation.ClearGuestName()
	return tcuo
}

// SetContent sets the "content" field.
func (tcuo *ThreadCommentUpdateOne) SetContent(s string) *ThreadCommentUpdateOne {
	tcuo.mutation.SetContent(s)
	return tcuo
}

// SetNillableContent sets the "content" field if the given value is not nil.
func (tcuo *ThreadCommentUpdateOne) SetNillableContent(s *string) *ThreadCommentUpdateOne {
	if s != nil {
		tcuo.SetContent(*s)
	}
	return tcuo
}

// SetIPAddress sets the "ip_address" field.
func (tcuo *ThreadCommentUpdateOne) SetIPAddress(s string) *ThreadCommentUpdateOne {
	tcuo.mutation.SetIPAddress(s)
	return tcuo
}

// SetNillableIPAddress sets the "ip_address" field if the given value is not nil.
func (tcuo *ThreadCommentUpdateOne) SetNillableIPAddress(s *string) *ThreadCommentUpdateOne {
	if s != nil {
		tcuo.SetIPAddress(*s)
	}
	return tcuo
}

// SetCreatedAt sets the "created_at" field.
func (tcuo *ThreadCommentUpdateOne) SetCreatedAt(t time.Time) *ThreadCommentUpdateOne {
	tcuo.mutation.SetCreatedAt(t)
	return tcuo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (tcuo *ThreadCommentUpdateOne) SetNillableCreatedAt(t *time.Time) *ThreadCommentUpdateOne {
	if t != nil {
		tcuo.SetCreatedAt(*t)
	}
	return tcuo
}

// SetUpdatedAt sets the "updated_at" field.
func (tcuo *ThreadCommentUpdateOne) SetUpdatedAt(t time.Time) *ThreadCommentUpdateOne {
	tcuo.mutation.SetUpdatedAt(t)
	return tcuo
}

// SetThread sets the "thread" edge to the Thread entity.
func (tcuo *ThreadCommentUpdateOne) SetThread(t *Thread) *ThreadCommentUpdateOne {
	return tcuo.SetThreadID(t.ID)
}

// SetAuthorID sets the "author" edge to the User entity by ID.
func (tcuo *ThreadCommentUpdateOne) SetAuthorID(id int) *ThreadCommentUpdateOne {
	tcuo.mutation.SetAuthorID(id)
	return tcuo
}

// SetNillableAuthorID sets the "author" edge to the User entity by ID if the given value is not nil.
func (tcuo *ThreadCommentUpdateOne) SetNillableAuthorID(id *int) *ThreadCommentUpdateOne {
	if id != nil {
		tcuo = tcuo.SetAuthorID(*id)
	}
	return tcuo
}

// SetAuthor sets the "author" edge to the User entity.
func (tcuo *ThreadCommentUpdateOne) SetAuthor(u *User) *ThreadCommentUpdateOne {
	return tcuo.SetAuthorID(u.ID)
}

// SetParentComment sets the "parent_comment" edge to the ThreadComment entity.
func (tcuo *ThreadCommentUpdateOne) SetParentComment(t *ThreadComment) *ThreadCommentUpdateOne {
	return tcuo.SetParentCommentID(t.ID)
}

// AddReplyIDs adds the "replies" edge to the ThreadComment entity by IDs.
func (tcuo *ThreadCommentUpdateOne) AddReplyIDs(ids ...uint64) *ThreadCommentUpdateOne {
	tcuo.mutation.AddReplyIDs(ids...)
	return tcuo
}

// AddReplies adds the "replies" edges to the ThreadComment entity.
func (tcuo *ThreadCommentUpdateOne) AddReplies(t ...*ThreadComment) *ThreadCommentUpdateOne {
	ids := make([]uint64, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return tcuo.AddReplyIDs(ids...)
}

// AddAttachmentIDs adds the "attachments" edge to the ThreadCommentAttachment entity by IDs.
func (tcuo *ThreadCommentUpdateOne) AddAttachmentIDs(ids ...int) *ThreadCommentUpdateOne {
	tcuo.mutation.AddAttachmentIDs(ids...)
	return tcuo
}

// AddAttachments adds the "attachments" edges to the ThreadCommentAttachment entity.
func (tcuo *ThreadCommentUpdateOne) AddAttachments(t ...*ThreadCommentAttachment) *ThreadCommentUpdateOne {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return tcuo.AddAttachmentIDs(ids...)
}

// AddLikedUserIDs adds the "liked_users" edge to the User entity by IDs.
func (tcuo *ThreadCommentUpdateOne) AddLikedUserIDs(ids ...int) *ThreadCommentUpdateOne {
	tcuo.mutation.AddLikedUserIDs(ids...)
	return tcuo
}

// AddLikedUsers adds the "liked_users" edges to the User entity.
func (tcuo *ThreadCommentUpdateOne) AddLikedUsers(u ...*User) *ThreadCommentUpdateOne {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return tcuo.AddLikedUserIDs(ids...)
}

// Mutation returns the ThreadCommentMutation object of the builder.
func (tcuo *ThreadCommentUpdateOne) Mutation() *ThreadCommentMutation {
	return tcuo.mutation
}

// ClearThread clears the "thread" edge to the Thread entity.
func (tcuo *ThreadCommentUpdateOne) ClearThread() *ThreadCommentUpdateOne {
	tcuo.mutation.ClearThread()
	return tcuo
}

// ClearAuthor clears the "author" edge to the User entity.
func (tcuo *ThreadCommentUpdateOne) ClearAuthor() *ThreadCommentUpdateOne {
	tcuo.mutation.ClearAuthor()
	return tcuo
}

// ClearParentComment clears the "parent_comment" edge to the ThreadComment entity.
func (tcuo *ThreadCommentUpdateOne) ClearParentComment() *ThreadCommentUpdateOne {
	tcuo.mutation.ClearParentComment()
	return tcuo
}

// ClearReplies clears all "replies" edges to the ThreadComment entity.
func (tcuo *ThreadCommentUpdateOne) ClearReplies() *ThreadCommentUpdateOne {
	tcuo.mutation.ClearReplies()
	return tcuo
}

// RemoveReplyIDs removes the "replies" edge to ThreadComment entities by IDs.
func (tcuo *ThreadCommentUpdateOne) RemoveReplyIDs(ids ...uint64) *ThreadCommentUpdateOne {
	tcuo.mutation.RemoveReplyIDs(ids...)
	return tcuo
}

// RemoveReplies removes "replies" edges to ThreadComment entities.
func (tcuo *ThreadCommentUpdateOne) RemoveReplies(t ...*ThreadComment) *ThreadCommentUpdateOne {
	ids := make([]uint64, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return tcuo.RemoveReplyIDs(ids...)
}

// ClearAttachments clears all "attachments" edges to the ThreadCommentAttachment entity.
func (tcuo *ThreadCommentUpdateOne) ClearAttachments() *ThreadCommentUpdateOne {
	tcuo.mutation.ClearAttachments()
	return tcuo
}

// RemoveAttachmentIDs removes the "attachments" edge to ThreadCommentAttachment entities by IDs.
func (tcuo *ThreadCommentUpdateOne) RemoveAttachmentIDs(ids ...int) *ThreadCommentUpdateOne {
	tcuo.mutation.RemoveAttachmentIDs(ids...)
	return tcuo
}

// RemoveAttachments removes "attachments" edges to ThreadCommentAttachment entities.
func (tcuo *ThreadCommentUpdateOne) RemoveAttachments(t ...*ThreadCommentAttachment) *ThreadCommentUpdateOne {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return tcuo.RemoveAttachmentIDs(ids...)
}

// ClearLikedUsers clears all "liked_users" edges to the User entity.
func (tcuo *ThreadCommentUpdateOne) ClearLikedUsers() *ThreadCommentUpdateOne {
	tcuo.mutation.ClearLikedUsers()
	return tcuo
}

// RemoveLikedUserIDs removes the "liked_users" edge to User entities by IDs.
func (tcuo *ThreadCommentUpdateOne) RemoveLikedUserIDs(ids ...int) *ThreadCommentUpdateOne {
	tcuo.mutation.RemoveLikedUserIDs(ids...)
	return tcuo
}

// RemoveLikedUsers removes "liked_users" edges to User entities.
func (tcuo *ThreadCommentUpdateOne) RemoveLikedUsers(u ...*User) *ThreadCommentUpdateOne {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return tcuo.RemoveLikedUserIDs(ids...)
}

// Where appends a list predicates to the ThreadCommentUpdate builder.
func (tcuo *ThreadCommentUpdateOne) Where(ps ...predicate.ThreadComment) *ThreadCommentUpdateOne {
	tcuo.mutation.Where(ps...)
	return tcuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (tcuo *ThreadCommentUpdateOne) Select(field string, fields ...string) *ThreadCommentUpdateOne {
	tcuo.fields = append([]string{field}, fields...)
	return tcuo
}

// Save executes the query and returns the updated ThreadComment entity.
func (tcuo *ThreadCommentUpdateOne) Save(ctx context.Context) (*ThreadComment, error) {
	tcuo.defaults()
	return withHooks(ctx, tcuo.sqlSave, tcuo.mutation, tcuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (tcuo *ThreadCommentUpdateOne) SaveX(ctx context.Context) *ThreadComment {
	node, err := tcuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (tcuo *ThreadCommentUpdateOne) Exec(ctx context.Context) error {
	_, err := tcuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tcuo *ThreadCommentUpdateOne) ExecX(ctx context.Context) {
	if err := tcuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (tcuo *ThreadCommentUpdateOne) defaults() {
	if _, ok := tcuo.mutation.UpdatedAt(); !ok {
		v := threadcomment.UpdateDefaultUpdatedAt()
		tcuo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (tcuo *ThreadCommentUpdateOne) check() error {
	if v, ok := tcuo.mutation.GuestName(); ok {
		if err := threadcomment.GuestNameValidator(v); err != nil {
			return &ValidationError{Name: "guest_name", err: fmt.Errorf(`ent: validator failed for field "ThreadComment.guest_name": %w`, err)}
		}
	}
	if v, ok := tcuo.mutation.IPAddress(); ok {
		if err := threadcomment.IPAddressValidator(v); err != nil {
			return &ValidationError{Name: "ip_address", err: fmt.Errorf(`ent: validator failed for field "ThreadComment.ip_address": %w`, err)}
		}
	}
	if tcuo.mutation.ThreadCleared() && len(tcuo.mutation.ThreadIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "ThreadComment.thread"`)
	}
	return nil
}

func (tcuo *ThreadCommentUpdateOne) sqlSave(ctx context.Context) (_node *ThreadComment, err error) {
	if err := tcuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(threadcomment.Table, threadcomment.Columns, sqlgraph.NewFieldSpec(threadcomment.FieldID, field.TypeUint64))
	id, ok := tcuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "ThreadComment.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := tcuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, threadcomment.FieldID)
		for _, f := range fields {
			if !threadcomment.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != threadcomment.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := tcuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tcuo.mutation.GuestName(); ok {
		_spec.SetField(threadcomment.FieldGuestName, field.TypeString, value)
	}
	if tcuo.mutation.GuestNameCleared() {
		_spec.ClearField(threadcomment.FieldGuestName, field.TypeString)
	}
	if value, ok := tcuo.mutation.Content(); ok {
		_spec.SetField(threadcomment.FieldContent, field.TypeString, value)
	}
	if value, ok := tcuo.mutation.IPAddress(); ok {
		_spec.SetField(threadcomment.FieldIPAddress, field.TypeString, value)
	}
	if value, ok := tcuo.mutation.CreatedAt(); ok {
		_spec.SetField(threadcomment.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := tcuo.mutation.UpdatedAt(); ok {
		_spec.SetField(threadcomment.FieldUpdatedAt, field.TypeTime, value)
	}
	if tcuo.mutation.ThreadCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   threadcomment.ThreadTable,
			Columns: []string{threadcomment.ThreadColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(thread.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tcuo.mutation.ThreadIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   threadcomment.ThreadTable,
			Columns: []string{threadcomment.ThreadColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(thread.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tcuo.mutation.AuthorCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   threadcomment.AuthorTable,
			Columns: []string{threadcomment.AuthorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tcuo.mutation.AuthorIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   threadcomment.AuthorTable,
			Columns: []string{threadcomment.AuthorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tcuo.mutation.ParentCommentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   threadcomment.ParentCommentTable,
			Columns: []string{threadcomment.ParentCommentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(threadcomment.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tcuo.mutation.ParentCommentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   threadcomment.ParentCommentTable,
			Columns: []string{threadcomment.ParentCommentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(threadcomment.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tcuo.mutation.RepliesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   threadcomment.RepliesTable,
			Columns: []string{threadcomment.RepliesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(threadcomment.FieldID, field.TypeUint64),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tcuo.mutation.RemovedRepliesIDs(); len(nodes) > 0 && !tcuo.mutation.RepliesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   threadcomment.RepliesTable,
			Columns: []string{threadcomment.RepliesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(threadcomment.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tcuo.mutation.RepliesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   threadcomment.RepliesTable,
			Columns: []string{threadcomment.RepliesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(threadcomment.FieldID, field.TypeUint64),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tcuo.mutation.AttachmentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   threadcomment.AttachmentsTable,
			Columns: []string{threadcomment.AttachmentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(threadcommentattachment.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tcuo.mutation.RemovedAttachmentsIDs(); len(nodes) > 0 && !tcuo.mutation.AttachmentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   threadcomment.AttachmentsTable,
			Columns: []string{threadcomment.AttachmentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(threadcommentattachment.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tcuo.mutation.AttachmentsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   threadcomment.AttachmentsTable,
			Columns: []string{threadcomment.AttachmentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(threadcommentattachment.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tcuo.mutation.LikedUsersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   threadcomment.LikedUsersTable,
			Columns: threadcomment.LikedUsersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		createE := &UserCommentLikeCreate{config: tcuo.config, mutation: newUserCommentLikeMutation(tcuo.config, OpCreate)}
		createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tcuo.mutation.RemovedLikedUsersIDs(); len(nodes) > 0 && !tcuo.mutation.LikedUsersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   threadcomment.LikedUsersTable,
			Columns: threadcomment.LikedUsersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		createE := &UserCommentLikeCreate{config: tcuo.config, mutation: newUserCommentLikeMutation(tcuo.config, OpCreate)}
		createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tcuo.mutation.LikedUsersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   threadcomment.LikedUsersTable,
			Columns: threadcomment.LikedUsersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		createE := &UserCommentLikeCreate{config: tcuo.config, mutation: newUserCommentLikeMutation(tcuo.config, OpCreate)}
		createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &ThreadComment{config: tcuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, tcuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{threadcomment.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	tcuo.mutation.done = true
	return _node, nil
}
