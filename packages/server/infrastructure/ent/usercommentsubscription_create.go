// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"server/infrastructure/ent/threadcomment"
	"server/infrastructure/ent/user"
	"server/infrastructure/ent/usercommentsubscription"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// UserCommentSubscriptionCreate is the builder for creating a UserCommentSubscription entity.
type UserCommentSubscriptionCreate struct {
	config
	mutation *UserCommentSubscriptionMutation
	hooks    []Hook
}

// SetUserID sets the "user_id" field.
func (ucsc *UserCommentSubscriptionCreate) SetUserID(i int) *UserCommentSubscriptionCreate {
	ucsc.mutation.SetUserID(i)
	return ucsc
}

// SetCommentID sets the "comment_id" field.
func (ucsc *UserCommentSubscriptionCreate) SetCommentID(i int) *UserCommentSubscriptionCreate {
	ucsc.mutation.SetCommentID(i)
	return ucsc
}

// SetIsNotified sets the "is_notified" field.
func (ucsc *UserCommentSubscriptionCreate) SetIsNotified(b bool) *UserCommentSubscriptionCreate {
	ucsc.mutation.SetIsNotified(b)
	return ucsc
}

// SetNillableIsNotified sets the "is_notified" field if the given value is not nil.
func (ucsc *UserCommentSubscriptionCreate) SetNillableIsNotified(b *bool) *UserCommentSubscriptionCreate {
	if b != nil {
		ucsc.SetIsNotified(*b)
	}
	return ucsc
}

// SetIsChecked sets the "is_checked" field.
func (ucsc *UserCommentSubscriptionCreate) SetIsChecked(b bool) *UserCommentSubscriptionCreate {
	ucsc.mutation.SetIsChecked(b)
	return ucsc
}

// SetNillableIsChecked sets the "is_checked" field if the given value is not nil.
func (ucsc *UserCommentSubscriptionCreate) SetNillableIsChecked(b *bool) *UserCommentSubscriptionCreate {
	if b != nil {
		ucsc.SetIsChecked(*b)
	}
	return ucsc
}

// SetSubscribedAt sets the "subscribed_at" field.
func (ucsc *UserCommentSubscriptionCreate) SetSubscribedAt(t time.Time) *UserCommentSubscriptionCreate {
	ucsc.mutation.SetSubscribedAt(t)
	return ucsc
}

// SetNillableSubscribedAt sets the "subscribed_at" field if the given value is not nil.
func (ucsc *UserCommentSubscriptionCreate) SetNillableSubscribedAt(t *time.Time) *UserCommentSubscriptionCreate {
	if t != nil {
		ucsc.SetSubscribedAt(*t)
	}
	return ucsc
}

// SetUser sets the "user" edge to the User entity.
func (ucsc *UserCommentSubscriptionCreate) SetUser(u *User) *UserCommentSubscriptionCreate {
	return ucsc.SetUserID(u.ID)
}

// SetComment sets the "comment" edge to the ThreadComment entity.
func (ucsc *UserCommentSubscriptionCreate) SetComment(t *ThreadComment) *UserCommentSubscriptionCreate {
	return ucsc.SetCommentID(t.ID)
}

// Mutation returns the UserCommentSubscriptionMutation object of the builder.
func (ucsc *UserCommentSubscriptionCreate) Mutation() *UserCommentSubscriptionMutation {
	return ucsc.mutation
}

// Save creates the UserCommentSubscription in the database.
func (ucsc *UserCommentSubscriptionCreate) Save(ctx context.Context) (*UserCommentSubscription, error) {
	ucsc.defaults()
	return withHooks(ctx, ucsc.sqlSave, ucsc.mutation, ucsc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (ucsc *UserCommentSubscriptionCreate) SaveX(ctx context.Context) *UserCommentSubscription {
	v, err := ucsc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ucsc *UserCommentSubscriptionCreate) Exec(ctx context.Context) error {
	_, err := ucsc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ucsc *UserCommentSubscriptionCreate) ExecX(ctx context.Context) {
	if err := ucsc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ucsc *UserCommentSubscriptionCreate) defaults() {
	if _, ok := ucsc.mutation.IsNotified(); !ok {
		v := usercommentsubscription.DefaultIsNotified
		ucsc.mutation.SetIsNotified(v)
	}
	if _, ok := ucsc.mutation.IsChecked(); !ok {
		v := usercommentsubscription.DefaultIsChecked
		ucsc.mutation.SetIsChecked(v)
	}
	if _, ok := ucsc.mutation.SubscribedAt(); !ok {
		v := usercommentsubscription.DefaultSubscribedAt()
		ucsc.mutation.SetSubscribedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ucsc *UserCommentSubscriptionCreate) check() error {
	if _, ok := ucsc.mutation.UserID(); !ok {
		return &ValidationError{Name: "user_id", err: errors.New(`ent: missing required field "UserCommentSubscription.user_id"`)}
	}
	if _, ok := ucsc.mutation.CommentID(); !ok {
		return &ValidationError{Name: "comment_id", err: errors.New(`ent: missing required field "UserCommentSubscription.comment_id"`)}
	}
	if _, ok := ucsc.mutation.IsNotified(); !ok {
		return &ValidationError{Name: "is_notified", err: errors.New(`ent: missing required field "UserCommentSubscription.is_notified"`)}
	}
	if _, ok := ucsc.mutation.IsChecked(); !ok {
		return &ValidationError{Name: "is_checked", err: errors.New(`ent: missing required field "UserCommentSubscription.is_checked"`)}
	}
	if _, ok := ucsc.mutation.SubscribedAt(); !ok {
		return &ValidationError{Name: "subscribed_at", err: errors.New(`ent: missing required field "UserCommentSubscription.subscribed_at"`)}
	}
	if _, ok := ucsc.mutation.UserID(); !ok {
		return &ValidationError{Name: "user", err: errors.New(`ent: missing required edge "UserCommentSubscription.user"`)}
	}
	if _, ok := ucsc.mutation.CommentID(); !ok {
		return &ValidationError{Name: "comment", err: errors.New(`ent: missing required edge "UserCommentSubscription.comment"`)}
	}
	return nil
}

func (ucsc *UserCommentSubscriptionCreate) sqlSave(ctx context.Context) (*UserCommentSubscription, error) {
	if err := ucsc.check(); err != nil {
		return nil, err
	}
	_node, _spec := ucsc.createSpec()
	if err := sqlgraph.CreateNode(ctx, ucsc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	return _node, nil
}

func (ucsc *UserCommentSubscriptionCreate) createSpec() (*UserCommentSubscription, *sqlgraph.CreateSpec) {
	var (
		_node = &UserCommentSubscription{config: ucsc.config}
		_spec = sqlgraph.NewCreateSpec(usercommentsubscription.Table, nil)
	)
	if value, ok := ucsc.mutation.IsNotified(); ok {
		_spec.SetField(usercommentsubscription.FieldIsNotified, field.TypeBool, value)
		_node.IsNotified = value
	}
	if value, ok := ucsc.mutation.IsChecked(); ok {
		_spec.SetField(usercommentsubscription.FieldIsChecked, field.TypeBool, value)
		_node.IsChecked = value
	}
	if value, ok := ucsc.mutation.SubscribedAt(); ok {
		_spec.SetField(usercommentsubscription.FieldSubscribedAt, field.TypeTime, value)
		_node.SubscribedAt = value
	}
	if nodes := ucsc.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   usercommentsubscription.UserTable,
			Columns: []string{usercommentsubscription.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.UserID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ucsc.mutation.CommentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   usercommentsubscription.CommentTable,
			Columns: []string{usercommentsubscription.CommentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(threadcomment.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.CommentID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// UserCommentSubscriptionCreateBulk is the builder for creating many UserCommentSubscription entities in bulk.
type UserCommentSubscriptionCreateBulk struct {
	config
	err      error
	builders []*UserCommentSubscriptionCreate
}

// Save creates the UserCommentSubscription entities in the database.
func (ucscb *UserCommentSubscriptionCreateBulk) Save(ctx context.Context) ([]*UserCommentSubscription, error) {
	if ucscb.err != nil {
		return nil, ucscb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(ucscb.builders))
	nodes := make([]*UserCommentSubscription, len(ucscb.builders))
	mutators := make([]Mutator, len(ucscb.builders))
	for i := range ucscb.builders {
		func(i int, root context.Context) {
			builder := ucscb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*UserCommentSubscriptionMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ucscb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ucscb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ucscb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ucscb *UserCommentSubscriptionCreateBulk) SaveX(ctx context.Context) []*UserCommentSubscription {
	v, err := ucscb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ucscb *UserCommentSubscriptionCreateBulk) Exec(ctx context.Context) error {
	_, err := ucscb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ucscb *UserCommentSubscriptionCreateBulk) ExecX(ctx context.Context) {
	if err := ucscb.Exec(ctx); err != nil {
		panic(err)
	}
}
