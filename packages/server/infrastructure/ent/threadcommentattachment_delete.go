// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"server/infrastructure/ent/predicate"
	"server/infrastructure/ent/threadcommentattachment"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ThreadCommentAttachmentDelete is the builder for deleting a ThreadCommentAttachment entity.
type ThreadCommentAttachmentDelete struct {
	config
	hooks    []Hook
	mutation *ThreadCommentAttachmentMutation
}

// Where appends a list predicates to the ThreadCommentAttachmentDelete builder.
func (tcad *ThreadCommentAttachmentDelete) Where(ps ...predicate.ThreadCommentAttachment) *ThreadCommentAttachmentDelete {
	tcad.mutation.Where(ps...)
	return tcad
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (tcad *ThreadCommentAttachmentDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, tcad.sqlExec, tcad.mutation, tcad.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (tcad *ThreadCommentAttachmentDelete) ExecX(ctx context.Context) int {
	n, err := tcad.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (tcad *ThreadCommentAttachmentDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(threadcommentattachment.Table, sqlgraph.NewFieldSpec(threadcommentattachment.FieldID, field.TypeInt))
	if ps := tcad.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, tcad.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	tcad.mutation.done = true
	return affected, err
}

// ThreadCommentAttachmentDeleteOne is the builder for deleting a single ThreadCommentAttachment entity.
type ThreadCommentAttachmentDeleteOne struct {
	tcad *ThreadCommentAttachmentDelete
}

// Where appends a list predicates to the ThreadCommentAttachmentDelete builder.
func (tcado *ThreadCommentAttachmentDeleteOne) Where(ps ...predicate.ThreadCommentAttachment) *ThreadCommentAttachmentDeleteOne {
	tcado.tcad.mutation.Where(ps...)
	return tcado
}

// Exec executes the deletion query.
func (tcado *ThreadCommentAttachmentDeleteOne) Exec(ctx context.Context) error {
	n, err := tcado.tcad.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{threadcommentattachment.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (tcado *ThreadCommentAttachmentDeleteOne) ExecX(ctx context.Context) {
	if err := tcado.Exec(ctx); err != nil {
		panic(err)
	}
}
