// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"server/infrastructure/ent/tag"
	"server/infrastructure/ent/thread"
	"server/infrastructure/ent/threadtag"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ThreadTagCreate is the builder for creating a ThreadTag entity.
type ThreadTagCreate struct {
	config
	mutation *ThreadTagMutation
	hooks    []Hook
}

// SetThreadID sets the "thread_id" field.
func (ttc *ThreadTagCreate) SetThreadID(i int) *ThreadTagCreate {
	ttc.mutation.SetThreadID(i)
	return ttc
}

// SetTagID sets the "tag_id" field.
func (ttc *ThreadTagCreate) SetTagID(i int) *ThreadTagCreate {
	ttc.mutation.SetTagID(i)
	return ttc
}

// SetThread sets the "thread" edge to the Thread entity.
func (ttc *ThreadTagCreate) SetThread(t *Thread) *ThreadTagCreate {
	return ttc.SetThreadID(t.ID)
}

// SetTag sets the "tag" edge to the Tag entity.
func (ttc *ThreadTagCreate) SetTag(t *Tag) *ThreadTagCreate {
	return ttc.SetTagID(t.ID)
}

// Mutation returns the ThreadTagMutation object of the builder.
func (ttc *ThreadTagCreate) Mutation() *ThreadTagMutation {
	return ttc.mutation
}

// Save creates the ThreadTag in the database.
func (ttc *ThreadTagCreate) Save(ctx context.Context) (*ThreadTag, error) {
	return withHooks(ctx, ttc.sqlSave, ttc.mutation, ttc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (ttc *ThreadTagCreate) SaveX(ctx context.Context) *ThreadTag {
	v, err := ttc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ttc *ThreadTagCreate) Exec(ctx context.Context) error {
	_, err := ttc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ttc *ThreadTagCreate) ExecX(ctx context.Context) {
	if err := ttc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ttc *ThreadTagCreate) check() error {
	if _, ok := ttc.mutation.ThreadID(); !ok {
		return &ValidationError{Name: "thread_id", err: errors.New(`ent: missing required field "ThreadTag.thread_id"`)}
	}
	if _, ok := ttc.mutation.TagID(); !ok {
		return &ValidationError{Name: "tag_id", err: errors.New(`ent: missing required field "ThreadTag.tag_id"`)}
	}
	if len(ttc.mutation.ThreadIDs()) == 0 {
		return &ValidationError{Name: "thread", err: errors.New(`ent: missing required edge "ThreadTag.thread"`)}
	}
	if len(ttc.mutation.TagIDs()) == 0 {
		return &ValidationError{Name: "tag", err: errors.New(`ent: missing required edge "ThreadTag.tag"`)}
	}
	return nil
}

func (ttc *ThreadTagCreate) sqlSave(ctx context.Context) (*ThreadTag, error) {
	if err := ttc.check(); err != nil {
		return nil, err
	}
	_node, _spec := ttc.createSpec()
	if err := sqlgraph.CreateNode(ctx, ttc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	return _node, nil
}

func (ttc *ThreadTagCreate) createSpec() (*ThreadTag, *sqlgraph.CreateSpec) {
	var (
		_node = &ThreadTag{config: ttc.config}
		_spec = sqlgraph.NewCreateSpec(threadtag.Table, nil)
	)
	if nodes := ttc.mutation.ThreadIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   threadtag.ThreadTable,
			Columns: []string{threadtag.ThreadColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(thread.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.ThreadID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ttc.mutation.TagIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   threadtag.TagTable,
			Columns: []string{threadtag.TagColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tag.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.TagID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// ThreadTagCreateBulk is the builder for creating many ThreadTag entities in bulk.
type ThreadTagCreateBulk struct {
	config
	err      error
	builders []*ThreadTagCreate
}

// Save creates the ThreadTag entities in the database.
func (ttcb *ThreadTagCreateBulk) Save(ctx context.Context) ([]*ThreadTag, error) {
	if ttcb.err != nil {
		return nil, ttcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(ttcb.builders))
	nodes := make([]*ThreadTag, len(ttcb.builders))
	mutators := make([]Mutator, len(ttcb.builders))
	for i := range ttcb.builders {
		func(i int, root context.Context) {
			builder := ttcb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ThreadTagMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ttcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ttcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ttcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ttcb *ThreadTagCreateBulk) SaveX(ctx context.Context) []*ThreadTag {
	v, err := ttcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ttcb *ThreadTagCreateBulk) Exec(ctx context.Context) error {
	_, err := ttcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ttcb *ThreadTagCreateBulk) ExecX(ctx context.Context) {
	if err := ttcb.Exec(ctx); err != nil {
		panic(err)
	}
}
