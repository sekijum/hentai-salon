// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"server/infrastructure/ent/user"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// User is the model entity for the User schema.
type User struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// Email holds the value of the "email" field.
	Email string `json:"email,omitempty"`
	// Password holds the value of the "password" field.
	Password string `json:"password,omitempty"`
	// ProfileLink holds the value of the "profile_link" field.
	ProfileLink *string `json:"profile_link,omitempty"`
	// AvatarURL holds the value of the "avatar_url" field.
	AvatarURL *string `json:"avatar_url,omitempty"`
	// 0: Active, 1: Withdrawn, 2: Suspended, 2: Inactive
	Status int `json:"status,omitempty"`
	// 0: Member, 1: Admin
	Role int `json:"role,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the UserQuery when eager-loading is set.
	Edges        UserEdges `json:"edges"`
	selectValues sql.SelectValues
}

// UserEdges holds the relations/edges for other nodes in the graph.
type UserEdges struct {
	// Boards holds the value of the boards edge.
	Boards []*Board `json:"boards,omitempty"`
	// Threads holds the value of the threads edge.
	Threads []*Thread `json:"threads,omitempty"`
	// Comments holds the value of the comments edge.
	Comments []*ThreadComment `json:"comments,omitempty"`
	// LikedThreads holds the value of the liked_threads edge.
	LikedThreads []*Thread `json:"liked_threads,omitempty"`
	// LikedComments holds the value of the liked_comments edge.
	LikedComments []*ThreadComment `json:"liked_comments,omitempty"`
	// SubscribedThreads holds the value of the subscribed_threads edge.
	SubscribedThreads []*Thread `json:"subscribed_threads,omitempty"`
	// SubscribedComments holds the value of the subscribed_comments edge.
	SubscribedComments []*ThreadComment `json:"subscribed_comments,omitempty"`
	// UserThreadLike holds the value of the user_thread_like edge.
	UserThreadLike []*UserThreadLike `json:"user_thread_like,omitempty"`
	// UserCommentLike holds the value of the user_comment_like edge.
	UserCommentLike []*UserCommentLike `json:"user_comment_like,omitempty"`
	// UserThreadSubscription holds the value of the user_thread_subscription edge.
	UserThreadSubscription []*UserThreadSubscription `json:"user_thread_subscription,omitempty"`
	// UserCommentSubscription holds the value of the user_comment_subscription edge.
	UserCommentSubscription []*UserCommentSubscription `json:"user_comment_subscription,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [11]bool
}

// BoardsOrErr returns the Boards value or an error if the edge
// was not loaded in eager-loading.
func (e UserEdges) BoardsOrErr() ([]*Board, error) {
	if e.loadedTypes[0] {
		return e.Boards, nil
	}
	return nil, &NotLoadedError{edge: "boards"}
}

// ThreadsOrErr returns the Threads value or an error if the edge
// was not loaded in eager-loading.
func (e UserEdges) ThreadsOrErr() ([]*Thread, error) {
	if e.loadedTypes[1] {
		return e.Threads, nil
	}
	return nil, &NotLoadedError{edge: "threads"}
}

// CommentsOrErr returns the Comments value or an error if the edge
// was not loaded in eager-loading.
func (e UserEdges) CommentsOrErr() ([]*ThreadComment, error) {
	if e.loadedTypes[2] {
		return e.Comments, nil
	}
	return nil, &NotLoadedError{edge: "comments"}
}

// LikedThreadsOrErr returns the LikedThreads value or an error if the edge
// was not loaded in eager-loading.
func (e UserEdges) LikedThreadsOrErr() ([]*Thread, error) {
	if e.loadedTypes[3] {
		return e.LikedThreads, nil
	}
	return nil, &NotLoadedError{edge: "liked_threads"}
}

// LikedCommentsOrErr returns the LikedComments value or an error if the edge
// was not loaded in eager-loading.
func (e UserEdges) LikedCommentsOrErr() ([]*ThreadComment, error) {
	if e.loadedTypes[4] {
		return e.LikedComments, nil
	}
	return nil, &NotLoadedError{edge: "liked_comments"}
}

// SubscribedThreadsOrErr returns the SubscribedThreads value or an error if the edge
// was not loaded in eager-loading.
func (e UserEdges) SubscribedThreadsOrErr() ([]*Thread, error) {
	if e.loadedTypes[5] {
		return e.SubscribedThreads, nil
	}
	return nil, &NotLoadedError{edge: "subscribed_threads"}
}

// SubscribedCommentsOrErr returns the SubscribedComments value or an error if the edge
// was not loaded in eager-loading.
func (e UserEdges) SubscribedCommentsOrErr() ([]*ThreadComment, error) {
	if e.loadedTypes[6] {
		return e.SubscribedComments, nil
	}
	return nil, &NotLoadedError{edge: "subscribed_comments"}
}

// UserThreadLikeOrErr returns the UserThreadLike value or an error if the edge
// was not loaded in eager-loading.
func (e UserEdges) UserThreadLikeOrErr() ([]*UserThreadLike, error) {
	if e.loadedTypes[7] {
		return e.UserThreadLike, nil
	}
	return nil, &NotLoadedError{edge: "user_thread_like"}
}

// UserCommentLikeOrErr returns the UserCommentLike value or an error if the edge
// was not loaded in eager-loading.
func (e UserEdges) UserCommentLikeOrErr() ([]*UserCommentLike, error) {
	if e.loadedTypes[8] {
		return e.UserCommentLike, nil
	}
	return nil, &NotLoadedError{edge: "user_comment_like"}
}

// UserThreadSubscriptionOrErr returns the UserThreadSubscription value or an error if the edge
// was not loaded in eager-loading.
func (e UserEdges) UserThreadSubscriptionOrErr() ([]*UserThreadSubscription, error) {
	if e.loadedTypes[9] {
		return e.UserThreadSubscription, nil
	}
	return nil, &NotLoadedError{edge: "user_thread_subscription"}
}

// UserCommentSubscriptionOrErr returns the UserCommentSubscription value or an error if the edge
// was not loaded in eager-loading.
func (e UserEdges) UserCommentSubscriptionOrErr() ([]*UserCommentSubscription, error) {
	if e.loadedTypes[10] {
		return e.UserCommentSubscription, nil
	}
	return nil, &NotLoadedError{edge: "user_comment_subscription"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*User) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case user.FieldID, user.FieldStatus, user.FieldRole:
			values[i] = new(sql.NullInt64)
		case user.FieldName, user.FieldEmail, user.FieldPassword, user.FieldProfileLink, user.FieldAvatarURL:
			values[i] = new(sql.NullString)
		case user.FieldCreatedAt, user.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the User fields.
func (u *User) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case user.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			u.ID = int(value.Int64)
		case user.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				u.Name = value.String
			}
		case user.FieldEmail:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field email", values[i])
			} else if value.Valid {
				u.Email = value.String
			}
		case user.FieldPassword:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field password", values[i])
			} else if value.Valid {
				u.Password = value.String
			}
		case user.FieldProfileLink:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field profile_link", values[i])
			} else if value.Valid {
				u.ProfileLink = new(string)
				*u.ProfileLink = value.String
			}
		case user.FieldAvatarURL:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field avatar_url", values[i])
			} else if value.Valid {
				u.AvatarURL = new(string)
				*u.AvatarURL = value.String
			}
		case user.FieldStatus:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				u.Status = int(value.Int64)
			}
		case user.FieldRole:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field role", values[i])
			} else if value.Valid {
				u.Role = int(value.Int64)
			}
		case user.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				u.CreatedAt = value.Time
			}
		case user.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				u.UpdatedAt = value.Time
			}
		default:
			u.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the User.
// This includes values selected through modifiers, order, etc.
func (u *User) Value(name string) (ent.Value, error) {
	return u.selectValues.Get(name)
}

// QueryBoards queries the "boards" edge of the User entity.
func (u *User) QueryBoards() *BoardQuery {
	return NewUserClient(u.config).QueryBoards(u)
}

// QueryThreads queries the "threads" edge of the User entity.
func (u *User) QueryThreads() *ThreadQuery {
	return NewUserClient(u.config).QueryThreads(u)
}

// QueryComments queries the "comments" edge of the User entity.
func (u *User) QueryComments() *ThreadCommentQuery {
	return NewUserClient(u.config).QueryComments(u)
}

// QueryLikedThreads queries the "liked_threads" edge of the User entity.
func (u *User) QueryLikedThreads() *ThreadQuery {
	return NewUserClient(u.config).QueryLikedThreads(u)
}

// QueryLikedComments queries the "liked_comments" edge of the User entity.
func (u *User) QueryLikedComments() *ThreadCommentQuery {
	return NewUserClient(u.config).QueryLikedComments(u)
}

// QuerySubscribedThreads queries the "subscribed_threads" edge of the User entity.
func (u *User) QuerySubscribedThreads() *ThreadQuery {
	return NewUserClient(u.config).QuerySubscribedThreads(u)
}

// QuerySubscribedComments queries the "subscribed_comments" edge of the User entity.
func (u *User) QuerySubscribedComments() *ThreadCommentQuery {
	return NewUserClient(u.config).QuerySubscribedComments(u)
}

// QueryUserThreadLike queries the "user_thread_like" edge of the User entity.
func (u *User) QueryUserThreadLike() *UserThreadLikeQuery {
	return NewUserClient(u.config).QueryUserThreadLike(u)
}

// QueryUserCommentLike queries the "user_comment_like" edge of the User entity.
func (u *User) QueryUserCommentLike() *UserCommentLikeQuery {
	return NewUserClient(u.config).QueryUserCommentLike(u)
}

// QueryUserThreadSubscription queries the "user_thread_subscription" edge of the User entity.
func (u *User) QueryUserThreadSubscription() *UserThreadSubscriptionQuery {
	return NewUserClient(u.config).QueryUserThreadSubscription(u)
}

// QueryUserCommentSubscription queries the "user_comment_subscription" edge of the User entity.
func (u *User) QueryUserCommentSubscription() *UserCommentSubscriptionQuery {
	return NewUserClient(u.config).QueryUserCommentSubscription(u)
}

// Update returns a builder for updating this User.
// Note that you need to call User.Unwrap() before calling this method if this User
// was returned from a transaction, and the transaction was committed or rolled back.
func (u *User) Update() *UserUpdateOne {
	return NewUserClient(u.config).UpdateOne(u)
}

// Unwrap unwraps the User entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (u *User) Unwrap() *User {
	_tx, ok := u.config.driver.(*txDriver)
	if !ok {
		panic("ent: User is not a transactional entity")
	}
	u.config.driver = _tx.drv
	return u
}

// String implements the fmt.Stringer.
func (u *User) String() string {
	var builder strings.Builder
	builder.WriteString("User(")
	builder.WriteString(fmt.Sprintf("id=%v, ", u.ID))
	builder.WriteString("name=")
	builder.WriteString(u.Name)
	builder.WriteString(", ")
	builder.WriteString("email=")
	builder.WriteString(u.Email)
	builder.WriteString(", ")
	builder.WriteString("password=")
	builder.WriteString(u.Password)
	builder.WriteString(", ")
	if v := u.ProfileLink; v != nil {
		builder.WriteString("profile_link=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	if v := u.AvatarURL; v != nil {
		builder.WriteString("avatar_url=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	builder.WriteString("status=")
	builder.WriteString(fmt.Sprintf("%v", u.Status))
	builder.WriteString(", ")
	builder.WriteString("role=")
	builder.WriteString(fmt.Sprintf("%v", u.Role))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(u.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(u.UpdatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// Users is a parsable slice of User.
type Users []*User
