// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"server/infrastructure/ent/threadcomment"
	"server/infrastructure/ent/threadcommentattachment"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// ThreadCommentAttachment is the model entity for the ThreadCommentAttachment schema.
type ThreadCommentAttachment struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// CommentID holds the value of the "comment_id" field.
	CommentID int `json:"comment_id,omitempty"`
	// URL holds the value of the "url" field.
	URL string `json:"url,omitempty"`
	// DisplayOrder holds the value of the "display_order" field.
	DisplayOrder int `json:"display_order,omitempty"`
	// 0: image, 1: video
	Type int `json:"type,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ThreadCommentAttachmentQuery when eager-loading is set.
	Edges        ThreadCommentAttachmentEdges `json:"edges"`
	selectValues sql.SelectValues
}

// ThreadCommentAttachmentEdges holds the relations/edges for other nodes in the graph.
type ThreadCommentAttachmentEdges struct {
	// Comment holds the value of the comment edge.
	Comment *ThreadComment `json:"comment,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// CommentOrErr returns the Comment value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ThreadCommentAttachmentEdges) CommentOrErr() (*ThreadComment, error) {
	if e.Comment != nil {
		return e.Comment, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: threadcomment.Label}
	}
	return nil, &NotLoadedError{edge: "comment"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*ThreadCommentAttachment) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case threadcommentattachment.FieldID, threadcommentattachment.FieldCommentID, threadcommentattachment.FieldDisplayOrder, threadcommentattachment.FieldType:
			values[i] = new(sql.NullInt64)
		case threadcommentattachment.FieldURL:
			values[i] = new(sql.NullString)
		case threadcommentattachment.FieldCreatedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the ThreadCommentAttachment fields.
func (tca *ThreadCommentAttachment) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case threadcommentattachment.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			tca.ID = int(value.Int64)
		case threadcommentattachment.FieldCommentID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field comment_id", values[i])
			} else if value.Valid {
				tca.CommentID = int(value.Int64)
			}
		case threadcommentattachment.FieldURL:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field url", values[i])
			} else if value.Valid {
				tca.URL = value.String
			}
		case threadcommentattachment.FieldDisplayOrder:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field display_order", values[i])
			} else if value.Valid {
				tca.DisplayOrder = int(value.Int64)
			}
		case threadcommentattachment.FieldType:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field type", values[i])
			} else if value.Valid {
				tca.Type = int(value.Int64)
			}
		case threadcommentattachment.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				tca.CreatedAt = value.Time
			}
		default:
			tca.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the ThreadCommentAttachment.
// This includes values selected through modifiers, order, etc.
func (tca *ThreadCommentAttachment) Value(name string) (ent.Value, error) {
	return tca.selectValues.Get(name)
}

// QueryComment queries the "comment" edge of the ThreadCommentAttachment entity.
func (tca *ThreadCommentAttachment) QueryComment() *ThreadCommentQuery {
	return NewThreadCommentAttachmentClient(tca.config).QueryComment(tca)
}

// Update returns a builder for updating this ThreadCommentAttachment.
// Note that you need to call ThreadCommentAttachment.Unwrap() before calling this method if this ThreadCommentAttachment
// was returned from a transaction, and the transaction was committed or rolled back.
func (tca *ThreadCommentAttachment) Update() *ThreadCommentAttachmentUpdateOne {
	return NewThreadCommentAttachmentClient(tca.config).UpdateOne(tca)
}

// Unwrap unwraps the ThreadCommentAttachment entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (tca *ThreadCommentAttachment) Unwrap() *ThreadCommentAttachment {
	_tx, ok := tca.config.driver.(*txDriver)
	if !ok {
		panic("ent: ThreadCommentAttachment is not a transactional entity")
	}
	tca.config.driver = _tx.drv
	return tca
}

// String implements the fmt.Stringer.
func (tca *ThreadCommentAttachment) String() string {
	var builder strings.Builder
	builder.WriteString("ThreadCommentAttachment(")
	builder.WriteString(fmt.Sprintf("id=%v, ", tca.ID))
	builder.WriteString("comment_id=")
	builder.WriteString(fmt.Sprintf("%v", tca.CommentID))
	builder.WriteString(", ")
	builder.WriteString("url=")
	builder.WriteString(tca.URL)
	builder.WriteString(", ")
	builder.WriteString("display_order=")
	builder.WriteString(fmt.Sprintf("%v", tca.DisplayOrder))
	builder.WriteString(", ")
	builder.WriteString("type=")
	builder.WriteString(fmt.Sprintf("%v", tca.Type))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(tca.CreatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// ThreadCommentAttachments is a parsable slice of ThreadCommentAttachment.
type ThreadCommentAttachments []*ThreadCommentAttachment
