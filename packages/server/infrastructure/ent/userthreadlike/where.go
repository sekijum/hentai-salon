// Code generated by ent, DO NOT EDIT.

package userthreadlike

import (
	"server/infrastructure/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// UserID applies equality check predicate on the "user_id" field. It's identical to UserIDEQ.
func UserID(v int) predicate.UserThreadLike {
	return predicate.UserThreadLike(sql.FieldEQ(FieldUserID, v))
}

// ThreadID applies equality check predicate on the "thread_id" field. It's identical to ThreadIDEQ.
func ThreadID(v int) predicate.UserThreadLike {
	return predicate.UserThreadLike(sql.FieldEQ(FieldThreadID, v))
}

// LikedAt applies equality check predicate on the "liked_at" field. It's identical to LikedAtEQ.
func LikedAt(v time.Time) predicate.UserThreadLike {
	return predicate.UserThreadLike(sql.FieldEQ(FieldLikedAt, v))
}

// UserIDEQ applies the EQ predicate on the "user_id" field.
func UserIDEQ(v int) predicate.UserThreadLike {
	return predicate.UserThreadLike(sql.FieldEQ(FieldUserID, v))
}

// UserIDNEQ applies the NEQ predicate on the "user_id" field.
func UserIDNEQ(v int) predicate.UserThreadLike {
	return predicate.UserThreadLike(sql.FieldNEQ(FieldUserID, v))
}

// UserIDIn applies the In predicate on the "user_id" field.
func UserIDIn(vs ...int) predicate.UserThreadLike {
	return predicate.UserThreadLike(sql.FieldIn(FieldUserID, vs...))
}

// UserIDNotIn applies the NotIn predicate on the "user_id" field.
func UserIDNotIn(vs ...int) predicate.UserThreadLike {
	return predicate.UserThreadLike(sql.FieldNotIn(FieldUserID, vs...))
}

// ThreadIDEQ applies the EQ predicate on the "thread_id" field.
func ThreadIDEQ(v int) predicate.UserThreadLike {
	return predicate.UserThreadLike(sql.FieldEQ(FieldThreadID, v))
}

// ThreadIDNEQ applies the NEQ predicate on the "thread_id" field.
func ThreadIDNEQ(v int) predicate.UserThreadLike {
	return predicate.UserThreadLike(sql.FieldNEQ(FieldThreadID, v))
}

// ThreadIDIn applies the In predicate on the "thread_id" field.
func ThreadIDIn(vs ...int) predicate.UserThreadLike {
	return predicate.UserThreadLike(sql.FieldIn(FieldThreadID, vs...))
}

// ThreadIDNotIn applies the NotIn predicate on the "thread_id" field.
func ThreadIDNotIn(vs ...int) predicate.UserThreadLike {
	return predicate.UserThreadLike(sql.FieldNotIn(FieldThreadID, vs...))
}

// LikedAtEQ applies the EQ predicate on the "liked_at" field.
func LikedAtEQ(v time.Time) predicate.UserThreadLike {
	return predicate.UserThreadLike(sql.FieldEQ(FieldLikedAt, v))
}

// LikedAtNEQ applies the NEQ predicate on the "liked_at" field.
func LikedAtNEQ(v time.Time) predicate.UserThreadLike {
	return predicate.UserThreadLike(sql.FieldNEQ(FieldLikedAt, v))
}

// LikedAtIn applies the In predicate on the "liked_at" field.
func LikedAtIn(vs ...time.Time) predicate.UserThreadLike {
	return predicate.UserThreadLike(sql.FieldIn(FieldLikedAt, vs...))
}

// LikedAtNotIn applies the NotIn predicate on the "liked_at" field.
func LikedAtNotIn(vs ...time.Time) predicate.UserThreadLike {
	return predicate.UserThreadLike(sql.FieldNotIn(FieldLikedAt, vs...))
}

// LikedAtGT applies the GT predicate on the "liked_at" field.
func LikedAtGT(v time.Time) predicate.UserThreadLike {
	return predicate.UserThreadLike(sql.FieldGT(FieldLikedAt, v))
}

// LikedAtGTE applies the GTE predicate on the "liked_at" field.
func LikedAtGTE(v time.Time) predicate.UserThreadLike {
	return predicate.UserThreadLike(sql.FieldGTE(FieldLikedAt, v))
}

// LikedAtLT applies the LT predicate on the "liked_at" field.
func LikedAtLT(v time.Time) predicate.UserThreadLike {
	return predicate.UserThreadLike(sql.FieldLT(FieldLikedAt, v))
}

// LikedAtLTE applies the LTE predicate on the "liked_at" field.
func LikedAtLTE(v time.Time) predicate.UserThreadLike {
	return predicate.UserThreadLike(sql.FieldLTE(FieldLikedAt, v))
}

// HasUser applies the HasEdge predicate on the "user" edge.
func HasUser() predicate.UserThreadLike {
	return predicate.UserThreadLike(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, UserColumn),
			sqlgraph.Edge(sqlgraph.M2O, false, UserTable, UserColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasUserWith applies the HasEdge predicate on the "user" edge with a given conditions (other predicates).
func HasUserWith(preds ...predicate.User) predicate.UserThreadLike {
	return predicate.UserThreadLike(func(s *sql.Selector) {
		step := newUserStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasThread applies the HasEdge predicate on the "thread" edge.
func HasThread() predicate.UserThreadLike {
	return predicate.UserThreadLike(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, ThreadColumn),
			sqlgraph.Edge(sqlgraph.M2O, false, ThreadTable, ThreadColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasThreadWith applies the HasEdge predicate on the "thread" edge with a given conditions (other predicates).
func HasThreadWith(preds ...predicate.Thread) predicate.UserThreadLike {
	return predicate.UserThreadLike(func(s *sql.Selector) {
		step := newThreadStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.UserThreadLike) predicate.UserThreadLike {
	return predicate.UserThreadLike(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.UserThreadLike) predicate.UserThreadLike {
	return predicate.UserThreadLike(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.UserThreadLike) predicate.UserThreadLike {
	return predicate.UserThreadLike(sql.NotPredicates(p))
}
