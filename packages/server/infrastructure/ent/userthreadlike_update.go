// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"server/infrastructure/ent/predicate"
	"server/infrastructure/ent/thread"
	"server/infrastructure/ent/user"
	"server/infrastructure/ent/userthreadlike"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// UserThreadLikeUpdate is the builder for updating UserThreadLike entities.
type UserThreadLikeUpdate struct {
	config
	hooks    []Hook
	mutation *UserThreadLikeMutation
}

// Where appends a list predicates to the UserThreadLikeUpdate builder.
func (utlu *UserThreadLikeUpdate) Where(ps ...predicate.UserThreadLike) *UserThreadLikeUpdate {
	utlu.mutation.Where(ps...)
	return utlu
}

// SetUserID sets the "user_id" field.
func (utlu *UserThreadLikeUpdate) SetUserID(i int) *UserThreadLikeUpdate {
	utlu.mutation.SetUserID(i)
	return utlu
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (utlu *UserThreadLikeUpdate) SetNillableUserID(i *int) *UserThreadLikeUpdate {
	if i != nil {
		utlu.SetUserID(*i)
	}
	return utlu
}

// SetThreadID sets the "thread_id" field.
func (utlu *UserThreadLikeUpdate) SetThreadID(i int) *UserThreadLikeUpdate {
	utlu.mutation.SetThreadID(i)
	return utlu
}

// SetNillableThreadID sets the "thread_id" field if the given value is not nil.
func (utlu *UserThreadLikeUpdate) SetNillableThreadID(i *int) *UserThreadLikeUpdate {
	if i != nil {
		utlu.SetThreadID(*i)
	}
	return utlu
}

// SetLikedAt sets the "liked_at" field.
func (utlu *UserThreadLikeUpdate) SetLikedAt(t time.Time) *UserThreadLikeUpdate {
	utlu.mutation.SetLikedAt(t)
	return utlu
}

// SetNillableLikedAt sets the "liked_at" field if the given value is not nil.
func (utlu *UserThreadLikeUpdate) SetNillableLikedAt(t *time.Time) *UserThreadLikeUpdate {
	if t != nil {
		utlu.SetLikedAt(*t)
	}
	return utlu
}

// SetUser sets the "user" edge to the User entity.
func (utlu *UserThreadLikeUpdate) SetUser(u *User) *UserThreadLikeUpdate {
	return utlu.SetUserID(u.ID)
}

// SetThread sets the "thread" edge to the Thread entity.
func (utlu *UserThreadLikeUpdate) SetThread(t *Thread) *UserThreadLikeUpdate {
	return utlu.SetThreadID(t.ID)
}

// Mutation returns the UserThreadLikeMutation object of the builder.
func (utlu *UserThreadLikeUpdate) Mutation() *UserThreadLikeMutation {
	return utlu.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (utlu *UserThreadLikeUpdate) ClearUser() *UserThreadLikeUpdate {
	utlu.mutation.ClearUser()
	return utlu
}

// ClearThread clears the "thread" edge to the Thread entity.
func (utlu *UserThreadLikeUpdate) ClearThread() *UserThreadLikeUpdate {
	utlu.mutation.ClearThread()
	return utlu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (utlu *UserThreadLikeUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, utlu.sqlSave, utlu.mutation, utlu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (utlu *UserThreadLikeUpdate) SaveX(ctx context.Context) int {
	affected, err := utlu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (utlu *UserThreadLikeUpdate) Exec(ctx context.Context) error {
	_, err := utlu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (utlu *UserThreadLikeUpdate) ExecX(ctx context.Context) {
	if err := utlu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (utlu *UserThreadLikeUpdate) check() error {
	if _, ok := utlu.mutation.UserID(); utlu.mutation.UserCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "UserThreadLike.user"`)
	}
	if _, ok := utlu.mutation.ThreadID(); utlu.mutation.ThreadCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "UserThreadLike.thread"`)
	}
	return nil
}

func (utlu *UserThreadLikeUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := utlu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(userthreadlike.Table, userthreadlike.Columns, sqlgraph.NewFieldSpec(userthreadlike.FieldUserID, field.TypeInt), sqlgraph.NewFieldSpec(userthreadlike.FieldThreadID, field.TypeInt))
	if ps := utlu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := utlu.mutation.LikedAt(); ok {
		_spec.SetField(userthreadlike.FieldLikedAt, field.TypeTime, value)
	}
	if utlu.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   userthreadlike.UserTable,
			Columns: []string{userthreadlike.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := utlu.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   userthreadlike.UserTable,
			Columns: []string{userthreadlike.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if utlu.mutation.ThreadCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   userthreadlike.ThreadTable,
			Columns: []string{userthreadlike.ThreadColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(thread.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := utlu.mutation.ThreadIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   userthreadlike.ThreadTable,
			Columns: []string{userthreadlike.ThreadColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(thread.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, utlu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{userthreadlike.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	utlu.mutation.done = true
	return n, nil
}

// UserThreadLikeUpdateOne is the builder for updating a single UserThreadLike entity.
type UserThreadLikeUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *UserThreadLikeMutation
}

// SetUserID sets the "user_id" field.
func (utluo *UserThreadLikeUpdateOne) SetUserID(i int) *UserThreadLikeUpdateOne {
	utluo.mutation.SetUserID(i)
	return utluo
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (utluo *UserThreadLikeUpdateOne) SetNillableUserID(i *int) *UserThreadLikeUpdateOne {
	if i != nil {
		utluo.SetUserID(*i)
	}
	return utluo
}

// SetThreadID sets the "thread_id" field.
func (utluo *UserThreadLikeUpdateOne) SetThreadID(i int) *UserThreadLikeUpdateOne {
	utluo.mutation.SetThreadID(i)
	return utluo
}

// SetNillableThreadID sets the "thread_id" field if the given value is not nil.
func (utluo *UserThreadLikeUpdateOne) SetNillableThreadID(i *int) *UserThreadLikeUpdateOne {
	if i != nil {
		utluo.SetThreadID(*i)
	}
	return utluo
}

// SetLikedAt sets the "liked_at" field.
func (utluo *UserThreadLikeUpdateOne) SetLikedAt(t time.Time) *UserThreadLikeUpdateOne {
	utluo.mutation.SetLikedAt(t)
	return utluo
}

// SetNillableLikedAt sets the "liked_at" field if the given value is not nil.
func (utluo *UserThreadLikeUpdateOne) SetNillableLikedAt(t *time.Time) *UserThreadLikeUpdateOne {
	if t != nil {
		utluo.SetLikedAt(*t)
	}
	return utluo
}

// SetUser sets the "user" edge to the User entity.
func (utluo *UserThreadLikeUpdateOne) SetUser(u *User) *UserThreadLikeUpdateOne {
	return utluo.SetUserID(u.ID)
}

// SetThread sets the "thread" edge to the Thread entity.
func (utluo *UserThreadLikeUpdateOne) SetThread(t *Thread) *UserThreadLikeUpdateOne {
	return utluo.SetThreadID(t.ID)
}

// Mutation returns the UserThreadLikeMutation object of the builder.
func (utluo *UserThreadLikeUpdateOne) Mutation() *UserThreadLikeMutation {
	return utluo.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (utluo *UserThreadLikeUpdateOne) ClearUser() *UserThreadLikeUpdateOne {
	utluo.mutation.ClearUser()
	return utluo
}

// ClearThread clears the "thread" edge to the Thread entity.
func (utluo *UserThreadLikeUpdateOne) ClearThread() *UserThreadLikeUpdateOne {
	utluo.mutation.ClearThread()
	return utluo
}

// Where appends a list predicates to the UserThreadLikeUpdate builder.
func (utluo *UserThreadLikeUpdateOne) Where(ps ...predicate.UserThreadLike) *UserThreadLikeUpdateOne {
	utluo.mutation.Where(ps...)
	return utluo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (utluo *UserThreadLikeUpdateOne) Select(field string, fields ...string) *UserThreadLikeUpdateOne {
	utluo.fields = append([]string{field}, fields...)
	return utluo
}

// Save executes the query and returns the updated UserThreadLike entity.
func (utluo *UserThreadLikeUpdateOne) Save(ctx context.Context) (*UserThreadLike, error) {
	return withHooks(ctx, utluo.sqlSave, utluo.mutation, utluo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (utluo *UserThreadLikeUpdateOne) SaveX(ctx context.Context) *UserThreadLike {
	node, err := utluo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (utluo *UserThreadLikeUpdateOne) Exec(ctx context.Context) error {
	_, err := utluo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (utluo *UserThreadLikeUpdateOne) ExecX(ctx context.Context) {
	if err := utluo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (utluo *UserThreadLikeUpdateOne) check() error {
	if _, ok := utluo.mutation.UserID(); utluo.mutation.UserCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "UserThreadLike.user"`)
	}
	if _, ok := utluo.mutation.ThreadID(); utluo.mutation.ThreadCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "UserThreadLike.thread"`)
	}
	return nil
}

func (utluo *UserThreadLikeUpdateOne) sqlSave(ctx context.Context) (_node *UserThreadLike, err error) {
	if err := utluo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(userthreadlike.Table, userthreadlike.Columns, sqlgraph.NewFieldSpec(userthreadlike.FieldUserID, field.TypeInt), sqlgraph.NewFieldSpec(userthreadlike.FieldThreadID, field.TypeInt))
	if id, ok := utluo.mutation.UserID(); !ok {
		return nil, &ValidationError{Name: "user_id", err: errors.New(`ent: missing "UserThreadLike.user_id" for update`)}
	} else {
		_spec.Node.CompositeID[0].Value = id
	}
	if id, ok := utluo.mutation.ThreadID(); !ok {
		return nil, &ValidationError{Name: "thread_id", err: errors.New(`ent: missing "UserThreadLike.thread_id" for update`)}
	} else {
		_spec.Node.CompositeID[1].Value = id
	}
	if fields := utluo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, len(fields))
		for i, f := range fields {
			if !userthreadlike.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			_spec.Node.Columns[i] = f
		}
	}
	if ps := utluo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := utluo.mutation.LikedAt(); ok {
		_spec.SetField(userthreadlike.FieldLikedAt, field.TypeTime, value)
	}
	if utluo.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   userthreadlike.UserTable,
			Columns: []string{userthreadlike.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := utluo.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   userthreadlike.UserTable,
			Columns: []string{userthreadlike.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if utluo.mutation.ThreadCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   userthreadlike.ThreadTable,
			Columns: []string{userthreadlike.ThreadColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(thread.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := utluo.mutation.ThreadIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   userthreadlike.ThreadTable,
			Columns: []string{userthreadlike.ThreadColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(thread.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &UserThreadLike{config: utluo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, utluo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{userthreadlike.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	utluo.mutation.done = true
	return _node, nil
}
