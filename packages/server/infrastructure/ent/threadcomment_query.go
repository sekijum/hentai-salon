// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"database/sql/driver"
	"fmt"
	"math"
	"server/infrastructure/ent/predicate"
	"server/infrastructure/ent/thread"
	"server/infrastructure/ent/threadcomment"
	"server/infrastructure/ent/threadcommentattachment"
	"server/infrastructure/ent/user"
	"server/infrastructure/ent/usercommentlike"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ThreadCommentQuery is the builder for querying ThreadComment entities.
type ThreadCommentQuery struct {
	config
	ctx                 *QueryContext
	order               []threadcomment.OrderOption
	inters              []Interceptor
	predicates          []predicate.ThreadComment
	withThread          *ThreadQuery
	withAuthor          *UserQuery
	withParentComment   *ThreadCommentQuery
	withReplies         *ThreadCommentQuery
	withAttachments     *ThreadCommentAttachmentQuery
	withLikedUsers      *UserQuery
	withUserCommentLike *UserCommentLikeQuery
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the ThreadCommentQuery builder.
func (tcq *ThreadCommentQuery) Where(ps ...predicate.ThreadComment) *ThreadCommentQuery {
	tcq.predicates = append(tcq.predicates, ps...)
	return tcq
}

// Limit the number of records to be returned by this query.
func (tcq *ThreadCommentQuery) Limit(limit int) *ThreadCommentQuery {
	tcq.ctx.Limit = &limit
	return tcq
}

// Offset to start from.
func (tcq *ThreadCommentQuery) Offset(offset int) *ThreadCommentQuery {
	tcq.ctx.Offset = &offset
	return tcq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (tcq *ThreadCommentQuery) Unique(unique bool) *ThreadCommentQuery {
	tcq.ctx.Unique = &unique
	return tcq
}

// Order specifies how the records should be ordered.
func (tcq *ThreadCommentQuery) Order(o ...threadcomment.OrderOption) *ThreadCommentQuery {
	tcq.order = append(tcq.order, o...)
	return tcq
}

// QueryThread chains the current query on the "thread" edge.
func (tcq *ThreadCommentQuery) QueryThread() *ThreadQuery {
	query := (&ThreadClient{config: tcq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := tcq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := tcq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(threadcomment.Table, threadcomment.FieldID, selector),
			sqlgraph.To(thread.Table, thread.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, threadcomment.ThreadTable, threadcomment.ThreadColumn),
		)
		fromU = sqlgraph.SetNeighbors(tcq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryAuthor chains the current query on the "author" edge.
func (tcq *ThreadCommentQuery) QueryAuthor() *UserQuery {
	query := (&UserClient{config: tcq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := tcq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := tcq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(threadcomment.Table, threadcomment.FieldID, selector),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, threadcomment.AuthorTable, threadcomment.AuthorColumn),
		)
		fromU = sqlgraph.SetNeighbors(tcq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryParentComment chains the current query on the "parent_comment" edge.
func (tcq *ThreadCommentQuery) QueryParentComment() *ThreadCommentQuery {
	query := (&ThreadCommentClient{config: tcq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := tcq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := tcq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(threadcomment.Table, threadcomment.FieldID, selector),
			sqlgraph.To(threadcomment.Table, threadcomment.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, threadcomment.ParentCommentTable, threadcomment.ParentCommentColumn),
		)
		fromU = sqlgraph.SetNeighbors(tcq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryReplies chains the current query on the "replies" edge.
func (tcq *ThreadCommentQuery) QueryReplies() *ThreadCommentQuery {
	query := (&ThreadCommentClient{config: tcq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := tcq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := tcq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(threadcomment.Table, threadcomment.FieldID, selector),
			sqlgraph.To(threadcomment.Table, threadcomment.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, threadcomment.RepliesTable, threadcomment.RepliesColumn),
		)
		fromU = sqlgraph.SetNeighbors(tcq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryAttachments chains the current query on the "attachments" edge.
func (tcq *ThreadCommentQuery) QueryAttachments() *ThreadCommentAttachmentQuery {
	query := (&ThreadCommentAttachmentClient{config: tcq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := tcq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := tcq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(threadcomment.Table, threadcomment.FieldID, selector),
			sqlgraph.To(threadcommentattachment.Table, threadcommentattachment.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, threadcomment.AttachmentsTable, threadcomment.AttachmentsColumn),
		)
		fromU = sqlgraph.SetNeighbors(tcq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryLikedUsers chains the current query on the "liked_users" edge.
func (tcq *ThreadCommentQuery) QueryLikedUsers() *UserQuery {
	query := (&UserClient{config: tcq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := tcq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := tcq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(threadcomment.Table, threadcomment.FieldID, selector),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, threadcomment.LikedUsersTable, threadcomment.LikedUsersPrimaryKey...),
		)
		fromU = sqlgraph.SetNeighbors(tcq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryUserCommentLike chains the current query on the "user_comment_like" edge.
func (tcq *ThreadCommentQuery) QueryUserCommentLike() *UserCommentLikeQuery {
	query := (&UserCommentLikeClient{config: tcq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := tcq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := tcq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(threadcomment.Table, threadcomment.FieldID, selector),
			sqlgraph.To(usercommentlike.Table, usercommentlike.CommentColumn),
			sqlgraph.Edge(sqlgraph.O2M, true, threadcomment.UserCommentLikeTable, threadcomment.UserCommentLikeColumn),
		)
		fromU = sqlgraph.SetNeighbors(tcq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first ThreadComment entity from the query.
// Returns a *NotFoundError when no ThreadComment was found.
func (tcq *ThreadCommentQuery) First(ctx context.Context) (*ThreadComment, error) {
	nodes, err := tcq.Limit(1).All(setContextOp(ctx, tcq.ctx, ent.OpQueryFirst))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{threadcomment.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (tcq *ThreadCommentQuery) FirstX(ctx context.Context) *ThreadComment {
	node, err := tcq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first ThreadComment ID from the query.
// Returns a *NotFoundError when no ThreadComment ID was found.
func (tcq *ThreadCommentQuery) FirstID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = tcq.Limit(1).IDs(setContextOp(ctx, tcq.ctx, ent.OpQueryFirstID)); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{threadcomment.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (tcq *ThreadCommentQuery) FirstIDX(ctx context.Context) int {
	id, err := tcq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single ThreadComment entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one ThreadComment entity is found.
// Returns a *NotFoundError when no ThreadComment entities are found.
func (tcq *ThreadCommentQuery) Only(ctx context.Context) (*ThreadComment, error) {
	nodes, err := tcq.Limit(2).All(setContextOp(ctx, tcq.ctx, ent.OpQueryOnly))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{threadcomment.Label}
	default:
		return nil, &NotSingularError{threadcomment.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (tcq *ThreadCommentQuery) OnlyX(ctx context.Context) *ThreadComment {
	node, err := tcq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only ThreadComment ID in the query.
// Returns a *NotSingularError when more than one ThreadComment ID is found.
// Returns a *NotFoundError when no entities are found.
func (tcq *ThreadCommentQuery) OnlyID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = tcq.Limit(2).IDs(setContextOp(ctx, tcq.ctx, ent.OpQueryOnlyID)); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{threadcomment.Label}
	default:
		err = &NotSingularError{threadcomment.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (tcq *ThreadCommentQuery) OnlyIDX(ctx context.Context) int {
	id, err := tcq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of ThreadComments.
func (tcq *ThreadCommentQuery) All(ctx context.Context) ([]*ThreadComment, error) {
	ctx = setContextOp(ctx, tcq.ctx, ent.OpQueryAll)
	if err := tcq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*ThreadComment, *ThreadCommentQuery]()
	return withInterceptors[[]*ThreadComment](ctx, tcq, qr, tcq.inters)
}

// AllX is like All, but panics if an error occurs.
func (tcq *ThreadCommentQuery) AllX(ctx context.Context) []*ThreadComment {
	nodes, err := tcq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of ThreadComment IDs.
func (tcq *ThreadCommentQuery) IDs(ctx context.Context) (ids []int, err error) {
	if tcq.ctx.Unique == nil && tcq.path != nil {
		tcq.Unique(true)
	}
	ctx = setContextOp(ctx, tcq.ctx, ent.OpQueryIDs)
	if err = tcq.Select(threadcomment.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (tcq *ThreadCommentQuery) IDsX(ctx context.Context) []int {
	ids, err := tcq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (tcq *ThreadCommentQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, tcq.ctx, ent.OpQueryCount)
	if err := tcq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, tcq, querierCount[*ThreadCommentQuery](), tcq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (tcq *ThreadCommentQuery) CountX(ctx context.Context) int {
	count, err := tcq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (tcq *ThreadCommentQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, tcq.ctx, ent.OpQueryExist)
	switch _, err := tcq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (tcq *ThreadCommentQuery) ExistX(ctx context.Context) bool {
	exist, err := tcq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the ThreadCommentQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (tcq *ThreadCommentQuery) Clone() *ThreadCommentQuery {
	if tcq == nil {
		return nil
	}
	return &ThreadCommentQuery{
		config:              tcq.config,
		ctx:                 tcq.ctx.Clone(),
		order:               append([]threadcomment.OrderOption{}, tcq.order...),
		inters:              append([]Interceptor{}, tcq.inters...),
		predicates:          append([]predicate.ThreadComment{}, tcq.predicates...),
		withThread:          tcq.withThread.Clone(),
		withAuthor:          tcq.withAuthor.Clone(),
		withParentComment:   tcq.withParentComment.Clone(),
		withReplies:         tcq.withReplies.Clone(),
		withAttachments:     tcq.withAttachments.Clone(),
		withLikedUsers:      tcq.withLikedUsers.Clone(),
		withUserCommentLike: tcq.withUserCommentLike.Clone(),
		// clone intermediate query.
		sql:  tcq.sql.Clone(),
		path: tcq.path,
	}
}

// WithThread tells the query-builder to eager-load the nodes that are connected to
// the "thread" edge. The optional arguments are used to configure the query builder of the edge.
func (tcq *ThreadCommentQuery) WithThread(opts ...func(*ThreadQuery)) *ThreadCommentQuery {
	query := (&ThreadClient{config: tcq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	tcq.withThread = query
	return tcq
}

// WithAuthor tells the query-builder to eager-load the nodes that are connected to
// the "author" edge. The optional arguments are used to configure the query builder of the edge.
func (tcq *ThreadCommentQuery) WithAuthor(opts ...func(*UserQuery)) *ThreadCommentQuery {
	query := (&UserClient{config: tcq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	tcq.withAuthor = query
	return tcq
}

// WithParentComment tells the query-builder to eager-load the nodes that are connected to
// the "parent_comment" edge. The optional arguments are used to configure the query builder of the edge.
func (tcq *ThreadCommentQuery) WithParentComment(opts ...func(*ThreadCommentQuery)) *ThreadCommentQuery {
	query := (&ThreadCommentClient{config: tcq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	tcq.withParentComment = query
	return tcq
}

// WithReplies tells the query-builder to eager-load the nodes that are connected to
// the "replies" edge. The optional arguments are used to configure the query builder of the edge.
func (tcq *ThreadCommentQuery) WithReplies(opts ...func(*ThreadCommentQuery)) *ThreadCommentQuery {
	query := (&ThreadCommentClient{config: tcq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	tcq.withReplies = query
	return tcq
}

// WithAttachments tells the query-builder to eager-load the nodes that are connected to
// the "attachments" edge. The optional arguments are used to configure the query builder of the edge.
func (tcq *ThreadCommentQuery) WithAttachments(opts ...func(*ThreadCommentAttachmentQuery)) *ThreadCommentQuery {
	query := (&ThreadCommentAttachmentClient{config: tcq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	tcq.withAttachments = query
	return tcq
}

// WithLikedUsers tells the query-builder to eager-load the nodes that are connected to
// the "liked_users" edge. The optional arguments are used to configure the query builder of the edge.
func (tcq *ThreadCommentQuery) WithLikedUsers(opts ...func(*UserQuery)) *ThreadCommentQuery {
	query := (&UserClient{config: tcq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	tcq.withLikedUsers = query
	return tcq
}

// WithUserCommentLike tells the query-builder to eager-load the nodes that are connected to
// the "user_comment_like" edge. The optional arguments are used to configure the query builder of the edge.
func (tcq *ThreadCommentQuery) WithUserCommentLike(opts ...func(*UserCommentLikeQuery)) *ThreadCommentQuery {
	query := (&UserCommentLikeClient{config: tcq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	tcq.withUserCommentLike = query
	return tcq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		ThreadID int `json:"thread_id,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.ThreadComment.Query().
//		GroupBy(threadcomment.FieldThreadID).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (tcq *ThreadCommentQuery) GroupBy(field string, fields ...string) *ThreadCommentGroupBy {
	tcq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &ThreadCommentGroupBy{build: tcq}
	grbuild.flds = &tcq.ctx.Fields
	grbuild.label = threadcomment.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		ThreadID int `json:"thread_id,omitempty"`
//	}
//
//	client.ThreadComment.Query().
//		Select(threadcomment.FieldThreadID).
//		Scan(ctx, &v)
func (tcq *ThreadCommentQuery) Select(fields ...string) *ThreadCommentSelect {
	tcq.ctx.Fields = append(tcq.ctx.Fields, fields...)
	sbuild := &ThreadCommentSelect{ThreadCommentQuery: tcq}
	sbuild.label = threadcomment.Label
	sbuild.flds, sbuild.scan = &tcq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a ThreadCommentSelect configured with the given aggregations.
func (tcq *ThreadCommentQuery) Aggregate(fns ...AggregateFunc) *ThreadCommentSelect {
	return tcq.Select().Aggregate(fns...)
}

func (tcq *ThreadCommentQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range tcq.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, tcq); err != nil {
				return err
			}
		}
	}
	for _, f := range tcq.ctx.Fields {
		if !threadcomment.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if tcq.path != nil {
		prev, err := tcq.path(ctx)
		if err != nil {
			return err
		}
		tcq.sql = prev
	}
	return nil
}

func (tcq *ThreadCommentQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*ThreadComment, error) {
	var (
		nodes       = []*ThreadComment{}
		_spec       = tcq.querySpec()
		loadedTypes = [7]bool{
			tcq.withThread != nil,
			tcq.withAuthor != nil,
			tcq.withParentComment != nil,
			tcq.withReplies != nil,
			tcq.withAttachments != nil,
			tcq.withLikedUsers != nil,
			tcq.withUserCommentLike != nil,
		}
	)
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*ThreadComment).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &ThreadComment{config: tcq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, tcq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := tcq.withThread; query != nil {
		if err := tcq.loadThread(ctx, query, nodes, nil,
			func(n *ThreadComment, e *Thread) { n.Edges.Thread = e }); err != nil {
			return nil, err
		}
	}
	if query := tcq.withAuthor; query != nil {
		if err := tcq.loadAuthor(ctx, query, nodes, nil,
			func(n *ThreadComment, e *User) { n.Edges.Author = e }); err != nil {
			return nil, err
		}
	}
	if query := tcq.withParentComment; query != nil {
		if err := tcq.loadParentComment(ctx, query, nodes, nil,
			func(n *ThreadComment, e *ThreadComment) { n.Edges.ParentComment = e }); err != nil {
			return nil, err
		}
	}
	if query := tcq.withReplies; query != nil {
		if err := tcq.loadReplies(ctx, query, nodes,
			func(n *ThreadComment) { n.Edges.Replies = []*ThreadComment{} },
			func(n *ThreadComment, e *ThreadComment) { n.Edges.Replies = append(n.Edges.Replies, e) }); err != nil {
			return nil, err
		}
	}
	if query := tcq.withAttachments; query != nil {
		if err := tcq.loadAttachments(ctx, query, nodes,
			func(n *ThreadComment) { n.Edges.Attachments = []*ThreadCommentAttachment{} },
			func(n *ThreadComment, e *ThreadCommentAttachment) {
				n.Edges.Attachments = append(n.Edges.Attachments, e)
			}); err != nil {
			return nil, err
		}
	}
	if query := tcq.withLikedUsers; query != nil {
		if err := tcq.loadLikedUsers(ctx, query, nodes,
			func(n *ThreadComment) { n.Edges.LikedUsers = []*User{} },
			func(n *ThreadComment, e *User) { n.Edges.LikedUsers = append(n.Edges.LikedUsers, e) }); err != nil {
			return nil, err
		}
	}
	if query := tcq.withUserCommentLike; query != nil {
		if err := tcq.loadUserCommentLike(ctx, query, nodes,
			func(n *ThreadComment) { n.Edges.UserCommentLike = []*UserCommentLike{} },
			func(n *ThreadComment, e *UserCommentLike) {
				n.Edges.UserCommentLike = append(n.Edges.UserCommentLike, e)
			}); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (tcq *ThreadCommentQuery) loadThread(ctx context.Context, query *ThreadQuery, nodes []*ThreadComment, init func(*ThreadComment), assign func(*ThreadComment, *Thread)) error {
	ids := make([]int, 0, len(nodes))
	nodeids := make(map[int][]*ThreadComment)
	for i := range nodes {
		fk := nodes[i].ThreadID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(thread.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "thread_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (tcq *ThreadCommentQuery) loadAuthor(ctx context.Context, query *UserQuery, nodes []*ThreadComment, init func(*ThreadComment), assign func(*ThreadComment, *User)) error {
	ids := make([]int, 0, len(nodes))
	nodeids := make(map[int][]*ThreadComment)
	for i := range nodes {
		if nodes[i].UserID == nil {
			continue
		}
		fk := *nodes[i].UserID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(user.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "user_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (tcq *ThreadCommentQuery) loadParentComment(ctx context.Context, query *ThreadCommentQuery, nodes []*ThreadComment, init func(*ThreadComment), assign func(*ThreadComment, *ThreadComment)) error {
	ids := make([]int, 0, len(nodes))
	nodeids := make(map[int][]*ThreadComment)
	for i := range nodes {
		if nodes[i].ParentCommentID == nil {
			continue
		}
		fk := *nodes[i].ParentCommentID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(threadcomment.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "parent_comment_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (tcq *ThreadCommentQuery) loadReplies(ctx context.Context, query *ThreadCommentQuery, nodes []*ThreadComment, init func(*ThreadComment), assign func(*ThreadComment, *ThreadComment)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[int]*ThreadComment)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(threadcomment.FieldParentCommentID)
	}
	query.Where(predicate.ThreadComment(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(threadcomment.RepliesColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.ParentCommentID
		if fk == nil {
			return fmt.Errorf(`foreign-key "parent_comment_id" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "parent_comment_id" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (tcq *ThreadCommentQuery) loadAttachments(ctx context.Context, query *ThreadCommentAttachmentQuery, nodes []*ThreadComment, init func(*ThreadComment), assign func(*ThreadComment, *ThreadCommentAttachment)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[int]*ThreadComment)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(threadcommentattachment.FieldCommentID)
	}
	query.Where(predicate.ThreadCommentAttachment(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(threadcomment.AttachmentsColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.CommentID
		node, ok := nodeids[fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "comment_id" returned %v for node %v`, fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (tcq *ThreadCommentQuery) loadLikedUsers(ctx context.Context, query *UserQuery, nodes []*ThreadComment, init func(*ThreadComment), assign func(*ThreadComment, *User)) error {
	edgeIDs := make([]driver.Value, len(nodes))
	byID := make(map[int]*ThreadComment)
	nids := make(map[int]map[*ThreadComment]struct{})
	for i, node := range nodes {
		edgeIDs[i] = node.ID
		byID[node.ID] = node
		if init != nil {
			init(node)
		}
	}
	query.Where(func(s *sql.Selector) {
		joinT := sql.Table(threadcomment.LikedUsersTable)
		s.Join(joinT).On(s.C(user.FieldID), joinT.C(threadcomment.LikedUsersPrimaryKey[0]))
		s.Where(sql.InValues(joinT.C(threadcomment.LikedUsersPrimaryKey[1]), edgeIDs...))
		columns := s.SelectedColumns()
		s.Select(joinT.C(threadcomment.LikedUsersPrimaryKey[1]))
		s.AppendSelect(columns...)
		s.SetDistinct(false)
	})
	if err := query.prepareQuery(ctx); err != nil {
		return err
	}
	qr := QuerierFunc(func(ctx context.Context, q Query) (Value, error) {
		return query.sqlAll(ctx, func(_ context.Context, spec *sqlgraph.QuerySpec) {
			assign := spec.Assign
			values := spec.ScanValues
			spec.ScanValues = func(columns []string) ([]any, error) {
				values, err := values(columns[1:])
				if err != nil {
					return nil, err
				}
				return append([]any{new(sql.NullInt64)}, values...), nil
			}
			spec.Assign = func(columns []string, values []any) error {
				outValue := int(values[0].(*sql.NullInt64).Int64)
				inValue := int(values[1].(*sql.NullInt64).Int64)
				if nids[inValue] == nil {
					nids[inValue] = map[*ThreadComment]struct{}{byID[outValue]: {}}
					return assign(columns[1:], values[1:])
				}
				nids[inValue][byID[outValue]] = struct{}{}
				return nil
			}
		})
	})
	neighbors, err := withInterceptors[[]*User](ctx, query, qr, query.inters)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected "liked_users" node returned %v`, n.ID)
		}
		for kn := range nodes {
			assign(kn, n)
		}
	}
	return nil
}
func (tcq *ThreadCommentQuery) loadUserCommentLike(ctx context.Context, query *UserCommentLikeQuery, nodes []*ThreadComment, init func(*ThreadComment), assign func(*ThreadComment, *UserCommentLike)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[int]*ThreadComment)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(usercommentlike.FieldCommentID)
	}
	query.Where(predicate.UserCommentLike(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(threadcomment.UserCommentLikeColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.CommentID
		node, ok := nodeids[fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "comment_id" returned %v for node %v`, fk, n)
		}
		assign(node, n)
	}
	return nil
}

func (tcq *ThreadCommentQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := tcq.querySpec()
	_spec.Node.Columns = tcq.ctx.Fields
	if len(tcq.ctx.Fields) > 0 {
		_spec.Unique = tcq.ctx.Unique != nil && *tcq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, tcq.driver, _spec)
}

func (tcq *ThreadCommentQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(threadcomment.Table, threadcomment.Columns, sqlgraph.NewFieldSpec(threadcomment.FieldID, field.TypeInt))
	_spec.From = tcq.sql
	if unique := tcq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if tcq.path != nil {
		_spec.Unique = true
	}
	if fields := tcq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, threadcomment.FieldID)
		for i := range fields {
			if fields[i] != threadcomment.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
		if tcq.withThread != nil {
			_spec.Node.AddColumnOnce(threadcomment.FieldThreadID)
		}
		if tcq.withAuthor != nil {
			_spec.Node.AddColumnOnce(threadcomment.FieldUserID)
		}
		if tcq.withParentComment != nil {
			_spec.Node.AddColumnOnce(threadcomment.FieldParentCommentID)
		}
	}
	if ps := tcq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := tcq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := tcq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := tcq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (tcq *ThreadCommentQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(tcq.driver.Dialect())
	t1 := builder.Table(threadcomment.Table)
	columns := tcq.ctx.Fields
	if len(columns) == 0 {
		columns = threadcomment.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if tcq.sql != nil {
		selector = tcq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if tcq.ctx.Unique != nil && *tcq.ctx.Unique {
		selector.Distinct()
	}
	for _, p := range tcq.predicates {
		p(selector)
	}
	for _, p := range tcq.order {
		p(selector)
	}
	if offset := tcq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := tcq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// ThreadCommentGroupBy is the group-by builder for ThreadComment entities.
type ThreadCommentGroupBy struct {
	selector
	build *ThreadCommentQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (tcgb *ThreadCommentGroupBy) Aggregate(fns ...AggregateFunc) *ThreadCommentGroupBy {
	tcgb.fns = append(tcgb.fns, fns...)
	return tcgb
}

// Scan applies the selector query and scans the result into the given value.
func (tcgb *ThreadCommentGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, tcgb.build.ctx, ent.OpQueryGroupBy)
	if err := tcgb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*ThreadCommentQuery, *ThreadCommentGroupBy](ctx, tcgb.build, tcgb, tcgb.build.inters, v)
}

func (tcgb *ThreadCommentGroupBy) sqlScan(ctx context.Context, root *ThreadCommentQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(tcgb.fns))
	for _, fn := range tcgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*tcgb.flds)+len(tcgb.fns))
		for _, f := range *tcgb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*tcgb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := tcgb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// ThreadCommentSelect is the builder for selecting fields of ThreadComment entities.
type ThreadCommentSelect struct {
	*ThreadCommentQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (tcs *ThreadCommentSelect) Aggregate(fns ...AggregateFunc) *ThreadCommentSelect {
	tcs.fns = append(tcs.fns, fns...)
	return tcs
}

// Scan applies the selector query and scans the result into the given value.
func (tcs *ThreadCommentSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, tcs.ctx, ent.OpQuerySelect)
	if err := tcs.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*ThreadCommentQuery, *ThreadCommentSelect](ctx, tcs.ThreadCommentQuery, tcs, tcs.inters, v)
}

func (tcs *ThreadCommentSelect) sqlScan(ctx context.Context, root *ThreadCommentQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(tcs.fns))
	for _, fn := range tcs.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*tcs.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := tcs.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
