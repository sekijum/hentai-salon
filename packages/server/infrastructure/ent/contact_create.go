// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"server/infrastructure/ent/contact"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ContactCreate is the builder for creating a Contact entity.
type ContactCreate struct {
	config
	mutation *ContactMutation
	hooks    []Hook
}

// SetEmail sets the "email" field.
func (cc *ContactCreate) SetEmail(s string) *ContactCreate {
	cc.mutation.SetEmail(s)
	return cc
}

// SetSubject sets the "subject" field.
func (cc *ContactCreate) SetSubject(s string) *ContactCreate {
	cc.mutation.SetSubject(s)
	return cc
}

// SetMessage sets the "message" field.
func (cc *ContactCreate) SetMessage(s string) *ContactCreate {
	cc.mutation.SetMessage(s)
	return cc
}

// SetIPAddress sets the "ip_address" field.
func (cc *ContactCreate) SetIPAddress(s string) *ContactCreate {
	cc.mutation.SetIPAddress(s)
	return cc
}

// SetStatus sets the "status" field.
func (cc *ContactCreate) SetStatus(i int) *ContactCreate {
	cc.mutation.SetStatus(i)
	return cc
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (cc *ContactCreate) SetNillableStatus(i *int) *ContactCreate {
	if i != nil {
		cc.SetStatus(*i)
	}
	return cc
}

// SetCreatedAt sets the "created_at" field.
func (cc *ContactCreate) SetCreatedAt(t time.Time) *ContactCreate {
	cc.mutation.SetCreatedAt(t)
	return cc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (cc *ContactCreate) SetNillableCreatedAt(t *time.Time) *ContactCreate {
	if t != nil {
		cc.SetCreatedAt(*t)
	}
	return cc
}

// SetUpdatedAt sets the "updated_at" field.
func (cc *ContactCreate) SetUpdatedAt(t time.Time) *ContactCreate {
	cc.mutation.SetUpdatedAt(t)
	return cc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (cc *ContactCreate) SetNillableUpdatedAt(t *time.Time) *ContactCreate {
	if t != nil {
		cc.SetUpdatedAt(*t)
	}
	return cc
}

// SetID sets the "id" field.
func (cc *ContactCreate) SetID(i int) *ContactCreate {
	cc.mutation.SetID(i)
	return cc
}

// Mutation returns the ContactMutation object of the builder.
func (cc *ContactCreate) Mutation() *ContactMutation {
	return cc.mutation
}

// Save creates the Contact in the database.
func (cc *ContactCreate) Save(ctx context.Context) (*Contact, error) {
	cc.defaults()
	return withHooks(ctx, cc.sqlSave, cc.mutation, cc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (cc *ContactCreate) SaveX(ctx context.Context) *Contact {
	v, err := cc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (cc *ContactCreate) Exec(ctx context.Context) error {
	_, err := cc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cc *ContactCreate) ExecX(ctx context.Context) {
	if err := cc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (cc *ContactCreate) defaults() {
	if _, ok := cc.mutation.Status(); !ok {
		v := contact.DefaultStatus
		cc.mutation.SetStatus(v)
	}
	if _, ok := cc.mutation.CreatedAt(); !ok {
		v := contact.DefaultCreatedAt()
		cc.mutation.SetCreatedAt(v)
	}
	if _, ok := cc.mutation.UpdatedAt(); !ok {
		v := contact.DefaultUpdatedAt()
		cc.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cc *ContactCreate) check() error {
	if _, ok := cc.mutation.Email(); !ok {
		return &ValidationError{Name: "email", err: errors.New(`ent: missing required field "Contact.email"`)}
	}
	if v, ok := cc.mutation.Email(); ok {
		if err := contact.EmailValidator(v); err != nil {
			return &ValidationError{Name: "email", err: fmt.Errorf(`ent: validator failed for field "Contact.email": %w`, err)}
		}
	}
	if _, ok := cc.mutation.Subject(); !ok {
		return &ValidationError{Name: "subject", err: errors.New(`ent: missing required field "Contact.subject"`)}
	}
	if v, ok := cc.mutation.Subject(); ok {
		if err := contact.SubjectValidator(v); err != nil {
			return &ValidationError{Name: "subject", err: fmt.Errorf(`ent: validator failed for field "Contact.subject": %w`, err)}
		}
	}
	if _, ok := cc.mutation.Message(); !ok {
		return &ValidationError{Name: "message", err: errors.New(`ent: missing required field "Contact.message"`)}
	}
	if _, ok := cc.mutation.IPAddress(); !ok {
		return &ValidationError{Name: "ip_address", err: errors.New(`ent: missing required field "Contact.ip_address"`)}
	}
	if v, ok := cc.mutation.IPAddress(); ok {
		if err := contact.IPAddressValidator(v); err != nil {
			return &ValidationError{Name: "ip_address", err: fmt.Errorf(`ent: validator failed for field "Contact.ip_address": %w`, err)}
		}
	}
	if _, ok := cc.mutation.Status(); !ok {
		return &ValidationError{Name: "status", err: errors.New(`ent: missing required field "Contact.status"`)}
	}
	if _, ok := cc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "Contact.created_at"`)}
	}
	if _, ok := cc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "Contact.updated_at"`)}
	}
	return nil
}

func (cc *ContactCreate) sqlSave(ctx context.Context) (*Contact, error) {
	if err := cc.check(); err != nil {
		return nil, err
	}
	_node, _spec := cc.createSpec()
	if err := sqlgraph.CreateNode(ctx, cc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int(id)
	}
	cc.mutation.id = &_node.ID
	cc.mutation.done = true
	return _node, nil
}

func (cc *ContactCreate) createSpec() (*Contact, *sqlgraph.CreateSpec) {
	var (
		_node = &Contact{config: cc.config}
		_spec = sqlgraph.NewCreateSpec(contact.Table, sqlgraph.NewFieldSpec(contact.FieldID, field.TypeInt))
	)
	if id, ok := cc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := cc.mutation.Email(); ok {
		_spec.SetField(contact.FieldEmail, field.TypeString, value)
		_node.Email = value
	}
	if value, ok := cc.mutation.Subject(); ok {
		_spec.SetField(contact.FieldSubject, field.TypeString, value)
		_node.Subject = value
	}
	if value, ok := cc.mutation.Message(); ok {
		_spec.SetField(contact.FieldMessage, field.TypeString, value)
		_node.Message = value
	}
	if value, ok := cc.mutation.IPAddress(); ok {
		_spec.SetField(contact.FieldIPAddress, field.TypeString, value)
		_node.IPAddress = value
	}
	if value, ok := cc.mutation.Status(); ok {
		_spec.SetField(contact.FieldStatus, field.TypeInt, value)
		_node.Status = value
	}
	if value, ok := cc.mutation.CreatedAt(); ok {
		_spec.SetField(contact.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := cc.mutation.UpdatedAt(); ok {
		_spec.SetField(contact.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	return _node, _spec
}

// ContactCreateBulk is the builder for creating many Contact entities in bulk.
type ContactCreateBulk struct {
	config
	err      error
	builders []*ContactCreate
}

// Save creates the Contact entities in the database.
func (ccb *ContactCreateBulk) Save(ctx context.Context) ([]*Contact, error) {
	if ccb.err != nil {
		return nil, ccb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(ccb.builders))
	nodes := make([]*Contact, len(ccb.builders))
	mutators := make([]Mutator, len(ccb.builders))
	for i := range ccb.builders {
		func(i int, root context.Context) {
			builder := ccb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ContactMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ccb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ccb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ccb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ccb *ContactCreateBulk) SaveX(ctx context.Context) []*Contact {
	v, err := ccb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ccb *ContactCreateBulk) Exec(ctx context.Context) error {
	_, err := ccb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ccb *ContactCreateBulk) ExecX(ctx context.Context) {
	if err := ccb.Exec(ctx); err != nil {
		panic(err)
	}
}
